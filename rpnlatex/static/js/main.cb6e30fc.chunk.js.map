{"version":3,"sources":["Keymap.js","Models.js","Actions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditorKeymap","base","files","help","stack","config","text_entry","math_text_entry","latex_entry","delimiters","custom_delimiters","operator","named_operator","hyperbolic","inverse","inverse_hyperbolic","squared","squared_hyperbolic","integral_limits","derivative","infix","relational","symbol","decoration","array","change_matrix_type","dissect","script","calligraphic","lowercase_greek","uppercase_greek","variant_greek","Keymap","constructor","this","bindings","KeybindingTable","lookup_binding","mode","key","mode_map","test","Settings","static","serialized_string","localStorage","getItem","from_json","JSON","parse","json","s","saved_keys","forEach","current_keymap","inverse_video","last_opened_filename","popup_mode","show_mode_indicator","layout","default_layout","zoom_factor","stack_rightalign_math","document_rightalign_math","inline_math","stack_side","stack_split","apply_layout_to_dom","stack_panel_elt","document_panel_elt","popup_panel_elt","style","display","root_elt","document","getElementById","percentage","Math","round","pow","fontSize","root_vars","querySelector","itembar_pixels","min","max","setProperty","headingbar_pixels","stack_bounds","document_bounds","_split_rectangle","x","y","w","h","_apply_bounds","bounds","side","split_percent","w1","w2","h1","h2","elt","left","top","width","height","save","stringify","to_json","setItem","LatexEmitter","base_expr","selected_expr_path","tokens","last_token_type","current_path","ExprPath","emit_token","text","token_type","length","push","expr","index","descend","equals","CommandExpr","TextExpr","emit_latex","ascend","grouped_expr","force_braces","grouped","fn","old_tokens","old_last_token_type","join","last_token","_is_latex_identifier_char","charAt","ch","command","command_name","command_options","text_or_command","startsWith","slice","begin_environment","envname","environment_argument","end_environment","align_separator","row_separator","finished_string","AppState","Stack","Document","_default_stack","is_dirty","item","TextItem","parse_string","same_as","app_state","format","UndoStack","state_stack","max_stack_depth","undo_count","clear","initial_app_state","push_state","state","undo_state","redo_state","DissectUndoStack","initial_expr","expr_path_stack","expr_path","pop","DocumentStorage","open_request","database","open_database","onsuccess","indexedDB","on_open_success","open","onupgradeneeded","handle_upgrade_database","bind","handle_open_success","onerror","handle_open_error","event","result","oldVersion","build_initial_schema","createObjectStore","keyPath","onversionchange","close","alert","create_transaction","readwrite","transaction","sanitize_filename","filename","replaceAll","trim","load_state","request","objectStore","get","save_state","serialized_json","metadata_json","filesize","description","stack_item_count","depth","document_item_count","items","timestamp","Date","put","oncomplete","onabort","delete_state","delete","fetch_file_list","getAll","row","ts_value","fetch_all_documents","onrowfetched","onfinished","cursor","openCursor","c","target","value","continue","ImportExportState","document_storage","import_count","failed_count","error_message","download_url","import_result_string","file_list_needs_update","onstatechange","textual_state","download_available","generate_download_filename","date","getFullYear","toString","toLocaleString","month","toLowerCase","getDate","padStart","change_state","new_state","start_exporting","zip","JSZip","add_document_json_to_zip","start_compressing","file","generateAsync","type","then","content_blob","finished_compressing","clear_download_url","URL","revokeObjectURL","createObjectURL","start_importing","zipfile","reader","FileReader","addEventListener","process_uploaded_data","readAsArrayBuffer","data","loadAsync","promises","endsWith","async","content","import_file","name","Promise","all","parsed","e","FileManagerState","file_list","selected_filename","current_filename","unavailable","sort_file_list","field","ascending","sort","a","b","a_value","b_value","generate_unused_filename","basename","replace","n","candidate","some","find_adjacent_filename","offset","new_filename","f","new_index","subexpr_indexes","other_path","i","last_expr_but","subexpressions","selected_expr","last_index_but","concat","move","direction","parent_expr","final_index","subexpr_count","replace_selection","new_expr","replace_subexpression","local_parent","subexpr_index","extract_selection","PlaceholderExpr","Expr","expr_type","_list","operand_exprs","options","InfixExpr","operator_exprs","split_at_index","split_type","SequenceExpr","exprs","fused","DelimiterExpr","left_type","right_type","middle_type","inner_exprs","fixed_size","SubscriptSuperscriptExpr","_expr","subscript_expr","superscript_expr","ArrayExpr","array_type","row_count","column_count","_list2d","element_exprs","row_separators","column_separators","json_array","map","expr_json","row_exprs","right","combine_command_pair","left_name","right_name","operand_count","as_bold","new_command_name","to_latex","emitter","json_keys","json_key","obj","undefined","to_text","visit","has_subexpressions","find_placeholder","found","substitute_expr","old_expr","is_command_with_name","super","indexOf","operand_expr","is_font_command","op_index","left_expr","right_expr","op_expr","new_operand_exprs","new_operator_exprs","operator_text","needs_autoparenthesization","every","op","expr_index","operator_expr","with_split_at","new_split_at_index","new_split_type","swap_sides_at","operator_index","extract_side_at","subexpr","parenthesize","emit_latex_fixed_size","emit_latex_flex_size","as_fixed_size","without_delimiters","expr1","expr2","split_mode","_split_expr","combine_infix","blank","combine_pair","Array","fill","is_matrix","t","with_array_type","new_array_type","with_ellipses","make_cell","new_element_exprs","new_row_count","new_column_count","inserted_row_exprs","splice","transposed","_transpose_cell","cell_expr","split_rows","with_separator","is_column","toggle","separators","size","_emit_array_with_separators","row_index","col_index","left_delim","right_delim","pieces","column_layout_string","has_row_separators","separator","column","floor","Item","serial_number","item_type","ExprItem","tag_expr","elements","element_json","TextItemElement","is_heading","CodeItem","language","source","from_string","serial","next_serial","react_key","prefix","clone","TextItemExprElement","TextItemTextElement","is_bold","is_italic","TextItemRawElement","raw","is_text","is_expr","is_raw","split","_latex_escape","replacements","match","string","is_explicit_space","pieces2","j","pieces3","k","item1","item2","separator_text","from_expr","merged_elements","last_index","last_merged_element","element","is_empty","as_editable_string","try_substitute_placeholder","substitution_expr","new_elements","placeholder_expr","item_json","check","check_exprs","peek","underflow","_unchecked_pop","pop_exprs","type_error","new_stack","pop_arrays","pop_matrices","array_exprs","push_all","Error","push_all_exprs","push_expr","clone_all_items","object_type","selection_index","selected_item","insert_item","new_item","new_items","delete_selection","move_selection_by","shift_selection_by","TextEntryState","edited_item","current_text","cursor_position","insert","backspace","InputContext","app_component","settings","new_mode","new_document","files_changed","file_saved","notification_text","perform_undo_or_redo","prefix_argument","preserve_prefix_argument","dissect_undo_stack","handle_key","effective_mode","last_keypress","process_command","commands","piece","token","process_command_batch","parameters","handler_function","new_app_state","message","error_flash_stack","switch_to_mode","error_flash_element","dom_element","classList","remove","offsetWidth","add","error_flash_document","clear_all_flashes","elt_id","notify","_build_subscript_superscript","child_expr","is_superscript","autoparenthesize","autoparenthesize_frac","make_subscript_superscript","do_subscript","do_superscript","do_prime","new_prime_expr","is_prime_command","new_superscript_expr","do_mode","do_undo","do_redo","do_prefix_argument","new_prefix_argument","parseInt","_get_prefix_argument","default_value","all_value","_require_prefix_argument","star_ok","do_dup","arg","do_pop","do_nip","do_swap","reverse","do_tuck","last_item","do_over","do_rot","do_unrot","do_change_document_selection","amount_string","amount","do_shift_document_selection","do_save_file","file_manager_state","do_save_file_as","request_file_list","window","prompt","do_load_selected_file","confirm","start_loading_filename","do_start_new_file","do_toggle_popup","do_select_adjacent_file","offset_string","do_delete_selected_file","do_pop_to_document","preserve","do_extract_from_document","do_reset_all","do_push_separator","empty_item","do_push","do_self_push","do_push_placeholder","do_to_case","case_type","toUpperCase","convert_fn","do_operator","opname","arity","arguments","popped_exprs","result_expr","do_font_operator","facename","do_named_function","funcname","superscript_text","arg_expr","orig_funcname","sup_or_sub","do_underset_operator","make_operatorname","argument_expr","sub_expr","command_expr","limits_expr","do_apply_hat","hat_op","inner_expr","do_html_class","class_name","class_name_2","new_class_name","do_make_bold","do_make_roman","do_custom_delimiter","delimiter_type","middle","_finish_custom_delimiters","d","do_toggle_fixed_size_delimiters","do_remove_delimiters","do_infix","left_item","right_item","concatenate_items","do_conjunction","phrase","conjunction_item","do_split_infix","infix_expr","new_infix_expr","do_swap_infix","do_cancel","do_concat","do_fuse","do_substitute_placeholder","new_stack_2","original_expr","new_text_item","do_extract_infix_side","which_side","extracted_expr","do_start_text_entry","text_entry_mode","initial_text","do_cancel_text_entry","cancel_text_entry","do_text_entry_move_cursor","move_type","do_append_text_entry","do_backspace_text_entry","new_mode_when_empty","do_finish_text_entry","textstyle","do_edit_item","_latex_unescape","do_start_dissect_mode","do_cancel_dissect_mode","do_dissect_undo","new_expr_path","do_dissect_descend","_do_dissect_operation","do_dissect_ascend","do_dissect_move_selection","do_dissect_extract_selection","expr_with_placeholder","do_dissect_copy_selection","new_expr_item","do_toggle_is_heading","do_extract_latex_source","latex_source","code_item","do_delimiters","expr_count_string","expr_count","do_parenthesize","do_autoparenthesize","do_apply_operator","arg_count_string","arg_count","do_apply_infix","mode_string","scrollTop","help_scroll_top","do_config","config_option","scratch","full_refresh_needed","location","reload","do_fullscreen","on_or_off","exitFullscreen","getElementsByTagName","requestFullscreen","do_build_matrix_row","matrix_type","matrix_expr","do_stack_arrays","m1","m2","new_array","stack_arrays","do_split_array","array_expr","do_dissolve_array","dissolved_exprs","do_insert_matrix_ellipses","do_transpose_matrix","do_change_matrix_type","new_type","do_array_separator","is_row_or_column","separator_type","do_build_align","align_type","split_elements","do_build_infix_list","infix_text","final_operand_text","infix_operator_expr","final_operand","do_build_substack","rows","do_apply_tag","tagged_item","tag_item","do_copy_to_clipboard","slot","clipboard_items","do_paste_from_clipboard","do_recenter_document","screen_percentage_string","screen_percentage","container","selected_elts","getElementsByClassName","selected_elt","top_scrolltop","offsetTop","bottom_scrolltop","offsetHeight","clientHeight","ratio","new_scrolltop","do_scroll","panel_name","direction_string","percentage_string","panel_elt","scrollLeft","clientWidth","do_export_document_as_text","exported_text","navigator","clipboard","writeText","do_export_stack_items_as_text","$e","React","createElement","App","Component","props","load_from_local_storage","import_export_state","input_context","undo_stack","import_export_state_changed","handleKeyDown","handleBeforeUnload","handleVisibilityChange","on_open_database","file_manager_state_changed","setState","file_list_request_finished","file_list_request_error","file_load_finished","file_load_error","error","componentDidMount","body","stack_panel_ref","current","document_panel_ref","popup_panel_ref","componentDidUpdate","new_title","title","componentWillUnmount","removeEventListener","render","createRef","stack_panel_components","StackItemsComponent","ModeIndicatorComponent","id","className","ref","DocumentComponent","PopupPanelComponent","altKey","metaKey","_keyname_from_event","was_handled","preventDefault","manage_undo_state","state_updates","shiftKey","ctrlKey","indicator_item","input_mode","colon","item_components","selected","ItemComponent","item_ref","component","TextEntryComponent","entry_type","class_names","subcomponents","is_selected","selected_item_ref","top_is_selected","top_spacer","ensure_selection_visible","extra_space","cursor_pos","FileManagerComponent","show_import_export","file_input_ref","render_current_filename","render_file_table","render_shortcuts","render_export_import_section","href","onClick","export_filename","download","handle_file_upload","fontWeight","colSpan","_render_file_list_row","item_count","toLocaleDateString","toLocaleTimeString","keyhelp_elements","spec","keyname","helptext","file_input_elt","tag_ref","node","_render_with_katex","latex_code","display_mode","katex","throwOnError","displayMode","fleqn","trust","strict","minRuleThickness","msg","innerHTML","refs","help_content","subcomponent","help_source_elt","help_dest_elt","_render_help_latex","parentNode","removeChild","appendChild","help_elt","children","code_elt","textContent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","console","log","onUpdate","onSuccess","catch","ReactDOMClient","createRoot","_jsx","process","origin","fetch","headers","response","contentType","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.cb6e30fc.chunk.js","sourcesContent":["\nconst EditorKeymap = {\n    base: {\n        // Letters/numbers and some symbols immediately push onto the stack\n        '[alnum]': \"self_push\",\n        '#': \"push \\\\#\",\n        '@': \"push @\",\n        '*': \"push *\",\n        '~': \"push \\\\sim\",\n\n        // Immediate action special keys\n        '!': \"autoparenthesize;push !;concat\",\n        'Enter': \"subscript\",\n\t'Shift+Enter': \"edit_item\",\n        '^': \"superscript\",\n        'Backspace': \"pop\",\n        \"`\": \"superscript\",\n        ' ': \"autoparenthesize 2;concat\",\n        '=': \"mode relational\",\n        '<': \"infix <\",\n        '>': \"infix >\",\n        '+': \"infix +\",\n        '-': \"infix -\",\n        ']': \"make_bold\",\n        '[': \"delimiters [ ]\",\n        '(': \"delimiters ( )\",\n        '{': \"delimiters \\\\{ \\\\}\",\n\n        // Document commands\n        'ArrowUp': \"change_document_selection -1\",\n        'Shift+ArrowUp': \"shift_document_selection -1\",\n        'ArrowDown': \"change_document_selection +1\",\n        'Shift+ArrowDown': \"shift_document_selection +1\",\n        'PageUp': \"change_document_selection -5\",  // TODO: scroll based on viewport height instead\n        'PageDown': \"change_document_selection +5\",\n        'Home': \"change_document_selection -10000\",\n        'End': \"change_document_selection +10000\",\n\n        // Stack scrolling commands\n        'ArrowRight': \"scroll stack_panel horizontal 75\",\n        'ArrowLeft': \"scroll stack_panel horizontal -75\",\n\n        // Prefix keys\n        'Tab': \"mode stack\",\n        \"'\": \"mode symbol\",\n        '.': \"mode decoration\",\n        ',': \"mode infix\",\n        ')': \"mode delimiters\",\n        '}': \"custom_delimiter\",\n        ';': \"mode lowercase_greek\",\n        ':': \"mode uppercase_greek\",\n        '%': \"mode calligraphic\",\n        '&': \"mode script\",\n        '/': \"mode operator\",\n        \"\\\\\": \"start_text_entry math_text_entry\",\n        \"\\\"\": \"start_text_entry text_entry\",\n        '|': \"mode array\",\n        '_': \"start_dissect_mode\",\n        '$': \"mode config\",\n        '?': \"toggle_popup help\",\n\n        // Other Ctrl-based shortcuts\n        'Ctrl+0': \"push 0;subscript\",\n        'Ctrl+1': \"push -1;superscript\",\n        'Ctrl+2': \"push 2;superscript\",\n        'Ctrl+3': \"push 3;superscript\",\n        'Ctrl+4': \"push 4;superscript\",\n        'Ctrl+a': \"swap\",\n        'Ctrl+b': \"make_bold\",\n        'Ctrl+c': \"copy_to_clipboard\",\n        'Ctrl+e': \"push e;operator mathrm;swap;superscript\",  // exp(x) - same as [/][e]\n        'Ctrl+i': \"pop_to_document\",\n        'Ctrl+j': \"extract_from_document\",\n        'Ctrl+k': \"infix \\\\,\",\n        'Ctrl+l': \"recenter_document 50\",\n        'Ctrl+m': \"push -;swap;fuse\",\n        'Ctrl+o': \"parenthesize;fuse\",  // -> f(x): same as [/][o]\n        'Ctrl+p': \"delimiters ( )\",\n        'Ctrl+r': \"infix ,;parenthesize;fuse\",  // -> f(x,y): same as [/][r]\n        'Ctrl+s': \"save_file\",\n        'Ctrl+u': \"superscript\",\n        'Ctrl+v': \"paste_from_clipboard\",\n        'Ctrl+y': \"redo\",\n        'Ctrl+z': \"undo\",\n        'Ctrl+ ': \"infix \\\\,\",\n        'Ctrl+,': \"infix ,\",\n        'Ctrl+ArrowRight': \"scroll document_container horizontal 75\",\n        'Ctrl+ArrowLeft': \"scroll document_container horizontal -75\",\n        'Ctrl+/': \"operator frac 2\"\n    },\n\n    // File Manager mode\n    files: {\n        'default': \"toggle_popup files\",\n        'd': \"delete_selected_file\",\n        'n': \"start_new_file\",\n        'Enter': \"load_selected_file\",\n        's': \"save_file\",\n        'S': \"save_file_as\",\n        'ArrowUp': \"select_adjacent_file -1\",\n        'ArrowDown': \"select_adjacent_file 1\",\n        // undocumented: j/k for scrolling the panel itself\n        'j': 'scroll popup_panel vertical 25',\n        'k': 'scroll popup_panel vertical -25',\n    },\n\n    // User Manual mode\n    help: {\n        'ArrowDown': 'scroll popup_panel vertical 25',\n        'ArrowUp': 'scroll popup_panel vertical -25',\n        'j': 'scroll popup_panel vertical 25',\n        'k': 'scroll popup_panel vertical -25',\n        'ArrowLeft': 'cancel',\n        'ArrowRight': 'cancel',\n        'PageUp': 'scroll popup_panel vertical -95',\n        'PageDown': 'scroll popup_panel vertical 95',\n        'default': \"toggle_popup help\"\n    },\n\n    // Tab prefix: stack/misc operations\n    stack: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"swap\",\n        'c': \"copy_to_clipboard\",\n        'd': \"pop\",\n        'i': \"pop_to_document\",\n        'I': \"pop_to_document preserve\",\n        'f': \"toggle_popup files\",\n        'j': \"extract_from_document\",\n        'J': \"extract_from_document preserve\",\n        'l': \"recenter_document 50\",\n        'n': \"nip\",\n        'o': \"over\",\n        'r': \"rot\",\n        's': \"save_file\",\n        't': \"tuck\",\n        'u': \"unrot\",\n        'v': \"paste_from_clipboard\",\n        'X': \"reset_all\",\n        'Enter': \"dup\",\n        'Backspace': \"pop\",\n        'Tab': \"undo\",\n        '.': \"redo\",\n        '!': \"export_document_as_text\",\n        '@': \"export_stack_items_as_text\",\n        '$': \"extract_latex_source\",\n        'ArrowRight': \"scroll document_container horizontal 75\",\n        'ArrowLeft': \"scroll document_container horizontal -75\"\n    },\n\n    // $ prefix: configuration\n    config: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'ArrowLeft': \"config stack_side left\",\n        'ArrowRight': \"config stack_side right\",\n        'ArrowUp': \"config stack_side top\",\n        'ArrowDown': \"config stack_side bottom\",\n        'f': \"fullscreen on\",\n        'F': \"fullscreen off\",\n        'i': \"config toggle_inline_math\",\n\t'I': \"config toggle_mode_indicator\",\n        'm': \"config math_align toggle_document\",\n        'M': \"config math_align toggle_stack\",\n        'r': \"config reset_layout\",\n        'R': \"config reload_page\",\n        's': \"config stack_split\",\n        'v': \"config inverse_video\",\n        'z': \"config zoom_factor increase\",\n        'Z': \"config zoom_factor decrease\",\n        '$': \"push \\\\$\",\n        '!': \"push \\\\alpha\\\\boldsymbol{\\\\alpha}\\\\mathcal{A}\\\\mathfrak{A}A\\\\bold{A}\\\\boldsymbol{A}\\\\mathtt{A}\\\\mathrm{A}\\\\mathsf{A}\\\\textup{A}\\\\Bbb{A}\\\\mathscr{A}[\\\\big[\\\\Big[\\\\bigg[\\\\Bigg[\\\\int\"\n    },\n\n    // \" prefix (TextItem text)\n    text_entry: {\n        'Enter': \"finish_text_entry text\",\n        'Shift+Enter': \"finish_text_entry heading\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'ArrowLeft': \"text_entry_move_cursor left\",\n        'ArrowRight': \"text_entry_move_cursor right\",\n        'default': \"append_text_entry\"\n    },\n\n    // \\ prefix (math text)\n    math_text_entry: {\n        'Enter': \"finish_text_entry math\",\n        'Shift+Enter': \"finish_text_entry roman_math\",\n        \"\\\\\": \"start_text_entry latex_entry\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'ArrowLeft': \"text_entry_move_cursor left\",\n        'ArrowRight': \"text_entry_move_cursor right\",\n        'default': \"append_text_entry\"\n    },\n\n    // double \\ prefix (latex command)\n    latex_entry: {\n        'Enter': \"finish_text_entry latex\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry math_text_entry\",\n        'ArrowLeft': \"text_entry_move_cursor left\",\n        'ArrowRight': \"text_entry_move_cursor right\",\n        'default': \"append_text_entry\"\n    },\n\n    // right-parenthesis prefix: special delimiters\n    delimiters: {\n        'b': \"delimiters \\\\langle \\\\vert\",  // <x| Dirac bra\n        'c': \"delimiters \\\\lceil \\\\rceil\",\n        'f': \"delimiters \\\\lfloor \\\\rfloor\",\n\t'F': \"toggle_fixed_size_delimiters\",\n        'g': \"delimiters \\\\lgroup \\\\rgroup\",\n        'i': \"delimiters \\\\langle \\\\rangle \\\\vert 2\",  // <x|y>; mnemonic: [i]nner product\n        'I': \"delimiters \\\\langle \\\\rangle \\\\vert 3\",  // <x|y|z>\n        'k': \"delimiters \\\\vert \\\\rangle\",  // |x> Dirac ket\n        'm': \"delimiters \\\\lmoustache \\\\rmoustache\",\n        'n': \"delimiters \\\\lVert \\\\rVert\",  // n = Norm\n        'N': \"delimiters \\\\lVert \\\\rVert\",  // alias for n\n        'w': \"delimiters . \\\\vert\",  // \"where\"\n        'W': \"delimiters . \\\\vert\",  // alias for w\n        'x': \"remove_delimiters\",\n        '|': \"delimiters \\\\vert \\\\vert\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '(': \"delimiters ( )\",\n        '[': \"delimiters [ ]\",\n        ']': \"push \\\\llbracket;swap;concat;push \\\\rrbracket;concat\",\n        '{': \"delimiters \\\\{ \\\\}\"\n    },\n\n    // right-curly-brace prefix: custom delimiter builder mode\n    custom_delimiters: {\n        '[digit]': \"prefix_argument\",\n        'c': \"custom_delimiter \\\\lceil\",\n        'C': \"custom_delimiter \\\\rceil\",\n        'f': \"custom_delimiter \\\\lfloor\",\n        'F': \"custom_delimiter \\\\rfloor\",\n        'g': \"custom_delimiter \\\\lgroup\",\n        'G': \"custom_delimiter \\\\rgroup\",\n        'm': \"custom_delimiter \\\\lmoustache\",\n        'M': \"custom_delimiter \\\\rmoustache\",\n        'v': \"custom_delimiter \\\\Vert\",\n        '<': \"custom_delimiter \\\\langle\",\n        '>': \"custom_delimiter \\\\rangle\",\n        '(': \"custom_delimiter (\",\n        ')': \"custom_delimiter )\",\n        '[': \"custom_delimiter [\",\n        ']': \"custom_delimiter ]\",\n        '{': \"custom_delimiter \\\\{\",\n        '}': \"custom_delimiter \\\\}\",\n        '.': \"custom_delimiter .\",\n        ' ': \"custom_delimiter .\",\n        '/': \"custom_delimiter /\",\n        \"\\\\\": \"custom_delimiter \\\\backslash\",\n        '|': \"custom_delimiter |\"\n    },\n\n    // forward-slash prefix: assorted functions/operators\n    operator: {\n        '1': \"push 1;swap;operator frac 2\",\n        '2': \"mode squared\",\n        'a': \"apply_operator 1\",\n        'A': \"apply_operator 2\",\n        'b': \"operator binom 2\",\n        'c': \"named_function cos\",\n        'C': \"named_function csc\",\n        'd': \"mode derivative\",\n        'D': \"named_function det\",\n        'e': \"push e;operator mathrm;swap;superscript\",  // exp(x)\n        'E': \"named_function exp\",\n        'f': \"mode named_operator\",\n        'h': \"mode hyperbolic\",\n        'i': \"mode integral_limits\",\n        'I': \"push \\\\int;swap;superscript;swap;subscript\",\n        'k': \"delimiters . . \\\\vert 2;parenthesize;fuse\",  // f x y -> f(x|y)\n        'l': \"push \\\\limits;swap;subscript;push \\\\lim;swap;concat\",  // lim_{x}\n        'L': \"infix \\\\to;push \\\\limits;swap;subscript;push \\\\lim;swap;concat\",  // lim_{y \\to x}\n        'n': \"named_function ln\",\n        'N': \"named_function log\",\n        'o': \"parenthesize;fuse\",  // f x -> f(x)  \"of\" ('fuse' closes up the spacing after 'f')\n        'O': \"swap;operator overset 2\",\n        'p': \"parenthesize;operator Pr\",  // Pr(x) (probability)\n        'P': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;parenthesize;operator Pr\",  // Pr(y|x)\n        'q': \"operator sqrt\",\n        'Q': \"operator sqrt[3]\",\n        'r': \"infix ,;parenthesize;fuse\",  // f x y -> f(x,y)\n        's': \"named_function sin\",\n        'S': \"named_function sec\",\n        't': \"named_function tan\",\n        'T': \"named_function cot\",\n        'U': \"swap;operator underset 2\",\n        'v': \"parenthesize;push Var;operator operatorname;swap;concat\",\n        'V': \"swap;push ,;concat;swap;concat;parenthesize;push Cov;operator operatorname;swap;concat\",\n\t'w': \"swap_infix\",\n        'x': \"push E;operator mathbb;swap;delimiters [ ];fuse\",  // E[x] (expectation)\n        'X': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;delimiters [ ];push E;operator mathbb;swap;fuse\",  // E[y|x]\n        'y': \"push E;operator mathbb;swap;subscript;swap;delimiters [ ];fuse\",  // E_x[y] (with subscript)\n        'Y': \"unrot;push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;delimiters [ ];swap;push E;operator mathbb;swap;subscript;swap;fuse\",  // E_x[z|y]\n        ';': \"apply_tag\",\n        ',': \"split_infix\",\n        '/': \"operator frac 2\",\n        '[': \"delimiters [ ];fuse\",  // f x -> f[x]\n        ']': \"delimiters \\\\{ \\\\};fuse\",  // f x -> f{x}\n        '}': \"swap;operator underbrace;swap;subscript\",\n        '{': \"swap;operator overbrace;swap;superscript\",\n        '<': \"extract_infix_side left\",\n        '>': \"extract_infix_side right\",\n        '-': \"mode inverse\",\n        '=': \"unrot;infix =;push \\\\sum;swap;subscript;swap;superscript\",\n        '+': \"infix \\\\ge;push \\\\sum;swap;subscript\",\n        \"'\": \"substitute_placeholder\",\n        \"\\\"\": \"toggle_is_heading\",\n        'Enter': \"unrot;subscript;swap;superscript\"  // apply superscript and subscript at once\n    },\n\n    named_operator: {\n        'a': \"operator arg\",\n        'c': \"operator gcd\",\n        'd': \"operator dim\",\n        'e': \"operator deg\",\n        'f': \"operator liminf\",\n        'g': \"operator argmax\",\n        'h': \"operator hom\",\n        'i': \"operator inf\",\n        'k': \"operator ker\",\n        'l': \"operator lim\",\n        'm': \"operator min\",\n        'n': \"operator argmin\",\n        'o': \"push Cov;operator operatorname;swap;concat\",\n        'p': \"operator Pr\",\n        'r': \"push tr;operator operatorname;swap;concat\",\n        's': \"operator sup\",\n        't': \"operator det\",\n        'u': \"operator limsup\",\n        'v': \"push Var;operator operatorname;swap;concat\",\n        'x': \"operator max\",\n\n        'A': \"underset_operator arg\",\n        'C': \"underset_operator gcd\",\n        'D': \"underset_operator dim\",\n        'E': \"underset_operator deg\",\n        'F': \"underset_operator liminf\",\n        'G': \"underset_operator argmax\",\n        'H': \"underset_operator hom\",\n        'I': \"underset_operator inf\",\n        'K': \"underset_operator ker\",\n        'L': \"underset_operator lim\",\n        'M': \"underset_operator min\",\n        'N': \"underset_operator argmin\",\n        'O': \"underset_operator Cov true\",\n        'P': \"underset_operator Pr\",\n        'R': \"underset_operator tr true\",\n        'S': \"underset_operator sup\",\n        'T': \"underset_operator det\",\n        'U': \"underset_operator limsup\",\n        'V': \"underset_operator Var true\",\n        'X': \"underset_operator max\"\n    },\n\n    // TODO: maybe make a more general way of doing these\n    hyperbolic: {\n        's': \"named_function sinh\",\n        'S': \"named_function sech\",\n        'c': \"named_function cosh\",\n        'C': \"named_function csch\",\n        't': \"named_function tanh\",\n        'T': \"named_function coth\",\n        '2': \"mode squared_hyperbolic\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n    inverse: {\n        's': \"named_function sin -1\",\n        'S': \"named_function sec -1\",\n        'c': \"named_function cos -1\",\n        'C': \"named_function csc -1\",\n        't': \"named_function tan -1\",\n        'T': \"named_function cot -1\",\n        'h': \"mode inverse_hyperbolic\",\n        '2': \"mode squared\"\n    },\n    inverse_hyperbolic: {\n        's': \"named_function sinh -1\",\n        'S': \"named_function sech -1\",\n        'c': \"named_function cosh -1\",\n        'C': \"named_function csch -1\",\n        't': \"named_function tanh -1\",\n        'T': \"named_function coth -1\",\n        '2': \"mode squared_hyperbolic\"\n    },\n    squared: {\n        's': \"named_function sin 2\",\n        'S': \"named_function sec 2\",\n        'c': \"named_function cos 2\",\n        'C': \"named_function csc 2\",\n        't': \"named_function tan 2\",\n        'T': \"named_function cot 2\",\n        'n': \"named_function lg\",  // [n][N] are special cases for base-2 log\n        'N': \"named_function log _2\",\n        'h': \"mode squared_hyperbolic\",\n        '-': \"mode inverse\"\n    },\n    squared_hyperbolic: {\n        's': \"named_function sinh 2\",\n        'S': \"named_function sech 2\",\n        'c': \"named_function cosh 2\",\n        'C': \"named_function csch 2\",\n        't': \"named_function tanh 2\",\n        'T': \"named_function coth 2\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n\n    // /i prefix\n    integral_limits: {\n        'r': \"push -\\\\infty;subscript;push \\\\infty;superscript\",  // -oo..oo : [r]eals\n        'n': \"push -\\\\infty;subscript;push 0;superscript\",  // -oo..0 : [n]egative \n        'p': \"push 0;subscript;push \\\\infty;superscript\",  // 0..oo : [p]ositive\n        'u': \"push 0;subscript;push 1;superscript\",  // 0..1 : [u]nit\n        'U': \"push -1;subscript;push 1;superscript\",  // -1..1 : symmetric [U]nit\n        't': \"push 0;subscript;push 2\\\\pi;superscript\",  // 0..2pi : [t]rigonometric\n        'T': \"push -\\\\pi;subscript;push \\\\pi;superscript\"  // -pi..pi : symmetric [T]rigonometric\n    },\n\n    // /d prefix: derivative operations\n    derivative: {\n        // \\partial y / \\partial x\n        'j': \"push \\\\partial;swap;concat;swap;push \\\\partial;swap;concat;swap;operator frac 2\",\n        // \\partial^2 y / \\partial x^2\n        'J': \"push 2;superscript;push \\\\partial;swap;concat;swap;push \\\\partial;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // dy/dx\n        'k': \"push d;operator mathrm;swap;concat;swap;push d;operator mathrm;swap;concat;swap;operator frac 2\",\n        // d^2(y) / dx^2\n        'K': \"push 2;superscript;push d;operator mathrm;swap;concat;swap;push d;operator mathrm;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // \\partial / \\partial x\n        'q': \"push \\\\partial;swap;concat;push \\\\partial;swap;operator frac 2\",\n        // \\partial^2 / \\partial x^2\n        'Q': \"push 2;superscript;push \\\\partial;swap;concat;push \\\\partial;push 2;superscript;swap;operator frac 2\",\n        // d/dx\n        'x': \"push d;operator mathrm;swap;concat;push d;operator mathrm;swap;operator frac 2\",\n        // d^2 / dx^2\n        'X': \"push 2;superscript;push d;operator mathrm;swap;concat;push d;operator mathrm;push 2;superscript;swap;operator frac 2\",\n        // \\partial^2 / \\partial x\\,\\partial y\n        'm': \"push \\\\partial;swap;concat;push \\\\partial;rot;concat;swap;push \\\\,;swap;concat;concat;push \\\\partial;push 2;superscript;swap;operator frac 2\",\n        // \\partial^2 z / \\partial x\\,\\partial y\n        'M': \"push \\\\partial;swap;concat;push \\\\partial;rot;concat;swap;push \\\\,;swap;concat;concat;swap;push \\\\partial;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // gradient\n        'g': \"push \\\\nabla;swap;concat\",\n        // gradient with respect to x\n        'G': \"push \\\\nabla;swap;subscript;swap;concat\",\n        // divergence\n        '.': \"push \\\\nabla;push \\\\cdot;concat;swap;concat\",\n        // curl\n        'c': \"push \\\\nabla;push \\\\times;concat;swap;concat\",\n        // Laplacian\n        'l': \"push \\\\nabla;push 2;superscript;swap;concat\",\n        // d'Alembertian\n        'L': \"push \\\\Box;push 2;superscript;swap;concat\",\n        // x -> dx\n        'd': \"push d;operator mathrm;swap;fuse\",\n        // x -> d^2x\n        '2': \"push d;operator mathrm;push 2;superscript;swap;fuse\",\n        '3': \"push d;operator mathrm;push 3;superscript;swap;fuse\",\n        '4': \"push d;operator mathrm;push 4;superscript;swap;fuse\",\n        // y x -> y dx\n        'i': \"swap;push \\\\,;concat;swap;push d;operator mathrm;swap;fuse;concat\",\n        // y x -> ydx (with thinspace after the dx)\n        'I': \"push d;operator mathrm;swap;fuse;concat;push \\\\,;concat\",\n        // y x -> ydx (no spacing around the dx)\n        ' ': \"push d;operator mathrm;swap;fuse;concat\"\n    },\n\n    // comma prefix: combine two objects with an infix operation\n    infix: {\n        'a': \"apply_infix\",\n        'b': \"infix \\\\bullet\",\n        'c': \"infix \\\\cap\",\n        'd': \"infix \\\\setminus\",  // (set [d]ifference)\n        'e': \"infix ,\\\\dots,\",\n        'f': \"conjunction if\",\n        'F': \"conjunction iff\",\n        'g': \"infix \\\\gets\",\n        'k': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2\",  // x | y  ([k]onditional)\n        'l': \"infix \\\\parallel\",\n        'M': \"infix \\\\mp\",\n        'n': \"conjunction when\",\n        'o': \"infix \\\\circ\",\n        'O': \"infix \\\\odot\",\n        'p': \"infix \\\\perp\",\n        'P': \"infix \\\\pm\",\n        'q': \"conjunction and\",\n        'Q': \"conjunction or\",\n        'r': \"conjunction for\",\n        's': \"infix \\\\,\",\n        't': \"infix \\\\to\",\n        'T': \"infix \\\\longrightarrow\",\n        'u': \"infix \\\\cup\",\n        'v': \"infix \\\\vee\",\n        'V': \"infix \\\\veebar\",\n        'w': \"infix \\\\wedge\",\n        'W': \"infix \\\\barwedge\",\n        'x': \"infix \\\\times\",\n        'X': \"infix \\\\otimes\",\n        '[': \"infix \\\\llcorner\",  // right-contraction\n        ']': \"infix \\\\lrcorner\",  // left-contraction\n        '|': \"delimiters . . \\\\vert 2\",  // \"infix |\",\n        '=': \"infix \\\\Rightarrow\",\n        '-': \"infix \\\\ominus\",\n        '+': \"infix \\\\oplus\",\n        '.': \"infix \\\\cdot\",\n        ',': \"infix ,\",  // comma without thinspace\n        ' ': \"infix ,\\\\,\",  // comma plus thinspace\n        ':': \"infix :\",\n        ';': \"infix semicolon\\\\:\",\n        '`': \"swap;push T;superscript;swap;concat\",  // xTy\n        '%': \"operator pmod;concat\",  // y (mod x)\n        '*': \"infix *\",\n\t'(': \"infix ,;delimiters ( )\",  // (x,y)\n        '<': \"infix ,;delimiters \\\\langle \\\\rangle\",  // <x,y>\n        '>': \"infix \\\\cdots\",\n        '/': \"autoparenthesize 2;delimiters . . / 2\",  // flex x/y\n        \"\\\\\": \"autoparenthesize 2;infix /\"  // fixed x/y\n    },\n\n    // = prefix: relational operators\n    relational: {\n\t'9': \"infix \\\\prec\",\n\t'0': \"infix \\\\succ\",\n        'a': \"infix \\\\approx\",\n        'c': \"infix \\\\cong\",  // =~  congruent\n        'e': \"infix \\\\equiv\",\n        'E': \"infix \\\\iff\",\n        'g': \"infix >\",\n\t'f': \"infix \\\\Leftarrow\", // \"[f]rom\"\n        'G': \"infix \\\\gg\",\n        'i': \"infix \\\\in\",\n        'I': \"infix \\\\notin\",\n\t'j': \"infix \\\\Join\",\n        'l': \"infix <\",\n        'L': \"infix \\\\ll\",\n        'm': \"infix \\\\mapsto\",\n        'n': \"infix \\\\ne\",\n        '!': \"infix \\\\ne\",\n\t'o': \"infix \\\\circeq\",\n        'p': \"infix \\\\propto\",\n        'q': \"infix =\",\n        's': \"infix \\\\subseteq\",\n        'S': \"infix \\\\subset\",\n        't': \"infix \\\\sim\",\n\t'u': \"infix \\\\supseteq\",\n\t'U': \"infix \\\\supset\",\n        '=': \"infix =\",\n\t'^': \"infix \\\\triangleq\",\n        '<': \"infix \\\\le\",\n        '>': \"infix \\\\ge\",\n        '[': \"infix \\\\le\",\n        ']': \"infix \\\\ge\",\n\t'{': \"infix \\\\sqsubset\",\n\t'}': \"infix \\\\sqsupset\",\n\t'(': \"infix \\\\preceq\",\n\t')': \"infix \\\\succeq\",\n\t'.': \"infix \\\\doteq\",\n        ':': \"infix \\\\coloneqq\",\n        ';': \"infix \\\\coloncolon\",\n        '~': \"infix \\\\sim\",\n\t'-': \"infix \\\\vdash\",\n        '|': \"infix \\\\vDash\",\n        '?': \"push ?;push =;operator overset 2;apply_infix\"\n    },\n\n    // apostrophe prefix: assorted standalone math symbols\n    symbol: {\n        '0': \"push \\\\varnothing\",\n        '1': \"push -1\",\n        '2': \"push 1;push 2;operator frac 2\",  // 1/2 (display)\n        '3': \"push 1;push 2;infix /\",  // 1/2 (inline)\n        '8': \"push \\\\infty\",\n        'a': \"push \\\\forall\",\n        'c': \"push \\\\cdot\",\n        'C': \"push \\\\bigcap\",\n        'd': \"push \\\\partial\",\n        'e': \"push \\\\exists\",\n\t'E': \"push \\\\nexists\",\n        'h': \"push \\\\hslash\",\n        'i': \"push \\\\int\",\n        'I': \"push \\\\iint\",\n        'l': \"push \\\\ell\",\n        'M': \"push \\\\mp\",\n\t'n': \"push \\\\ne\",\n        'o': \"push \\\\circ\",\n        'p': \"push \\\\prod\",\n        'P': \"push \\\\pm\",\n        's': \"push \\\\sum\",\n        't': \"push \\\\therefore\",\n        'U': \"push \\\\bigcup\",\n        'v': \"push \\\\vee\",\n\t'V': \"push \\\\bigvee\",\n        'w': \"push \\\\wedge\",\n\t'W': \"push \\\\bigwedge\",\n        'y': \"push \\\\oint\",\n        'Y': \"push \\\\oiint\",\n        '.': \"push \\\\dots\",\n        '>': \"push \\\\cdots\",\n        '-': \"push -\",\n        '+': \"push +\",\n        '*': \"push \\\\star\",\n        '|': \"push |\",\n        '=': \"push_separator\",\n        '?': \"push ?\",  // NOTE: no mode-sensitive help shortcut for symbols because of this\n        '!': \"push !\",\n        ',': \"push ,\",\n        ';': \"push semicolon\",\n        ':': \"push :\",\n        '`': \"push `\",\n        '_': \"push \\\\_\",\n        \"'\": \"push_placeholder\",\n        ' ': \"push \",  // \"nothing\", e.g. when you don't want something on one side of an infix\n        'ArrowUp': \"push \\\\uparrow\",\n        'ArrowDown': \"push \\\\downarrow\"\n    },\n\n    // . prefix: expression decorators (fonts, hats, etc)\n    decoration: {\n        '0': \"push 0;subscript\",\n        '1': \"push -1;superscript\",\n        '2': \"push 2;superscript\",\n        '3': \"push 3;superscript\",\n        '4': \"push 4;superscript\",\n        '8': \"push \\\\infty;infix \\\\to\",\n        'A': \"operator acute\",\n        'b': \"font_operator mathbb\",\n        'c': \"autoparenthesize;push 1;swap;infix -\",\n        'C': \"html_class emphasized emphasized2\",\n        'd': \"push \\\\dagger;superscript\",\n        'D': \"push \\\\ddagger;superscript\",\n        'e': \"operator bold\",  // bold roman (sort of)\n        'g': \"operator mathring\",\n        'G': \"operator grave\",\n        'h': \"apply_hat hat\",\n        'H': \"apply_hat widehat\",\n        'i': \"push -;superscript\",\n        'I': \"push +;superscript\",\n        'k': \"font_operator mathfrak\",\n        'l': \"push \\\\parallel;subscript\",\n        'm': \"font_operator mathtt\",\n        'M': \"push \\\\mp;swap;fuse\",\n\t'n': \"push \\\\neg;swap;fuse\",\n        'o': \"operator bar\",\n        'O': \"operator overline\",\n        'p': \"push \\\\perp;subscript\",\n        'P': \"push \\\\pm;swap;fuse\",\n        'q': \"push =;swap;fuse\",\n        'r': \"make_roman\",\n        's': \"font_operator mathsf\",  // sans-serif\n        't': \"push \\\\to;swap;fuse\",\n        'T': \"operator widetilde\",\n        'u': \"apply_hat breve\",\n        'U': \"operator utilde\",\n        'v': \"operator vec\",\n        'V': \"apply_hat check\",\n        'w': \"operator overline\",\n        'W': \"apply_hat widecheck\",\n        'x': \"operator boxed\",\n        'X': \"operator sout\",  // strikeout\n        'z': \"operator cancel\",\n        '.': \"apply_hat dot\",\n        '>': \"push .;concat\",\n        \"\\\"\": \"apply_hat ddot\",\n        ' ': \"push \\\\,;concat\",  // append thin space\n        \"'\": \"autoparenthesize;prime\",\n        '*': \"push *;superscript\",\n        '~': \"apply_hat tilde\",\n        '=': \"push \\\\Rightarrow;swap;fuse\",\n        '-': \"push -;swap;fuse\",\n        '+': \"push +;swap;fuse\",\n        '`': \"push T;superscript\",  // transpose\n        '/': \"push 1;swap;autoparenthesize;delimiters . . / 2\",  // flex 1/x\n        \"\\\\\": \"push 1;swap;autoparenthesize;infix /\",  // fixed 1/x\n        '_': \"operator underline\"\n    },\n\n    // | prefix: array/matrix operations\n    array: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"build_align aligned\",\n        'c': \"build_align cases\",\n        'C': \"build_align rcases\",\n        'd': \"dissolve_array\",\n        'e': \"build_infix_list ,\\\\,;push \\\\dots;push ,\\\\,;apply_infix\",\n        'E': \"insert_matrix_ellipses\",\n        'f': \"build_align cases_if\",\n        'F': \"build_align rcases_if\",\n        'g': \"build_align gathered\",\n        'h': \"transpose_matrix;swap;transpose_matrix;swap;stack_arrays;transpose_matrix\",  // i.e., stack horizontally\n        'k': \"build_substack\",\n        'm': \"build_matrix_row matrix\",\n        'p': \"build_infix_list +;push \\\\cdots;push +;apply_infix\",\n        's': \"split_array\",\n        't': \"mode change_matrix_type\",\n        'T': \"transpose_matrix\",\n        'v': \"build_matrix_row vmatrix\",\n        'V': \"build_matrix_row Vmatrix\",\n        '|': \"stack_arrays\",\n        ',': \"build_infix_list ,\\\\,\",\n        '.': \"build_infix_list ,\\\\, \\\\dots\",\n        ';': \"build_infix_list semicolon\\\\,\",\n        '+': \"build_infix_list + \\\\cdots\",\n        '(': \"build_matrix_row pmatrix\",\n        '[': \"build_matrix_row bmatrix\",\n        '{': \"build_matrix_row Bmatrix\",\n        '@': \"build_matrix_row bmatrix 2;transpose_matrix\",\n        '#': \"build_matrix_row bmatrix 3;transpose_matrix\",\n        '$': \"build_matrix_row bmatrix 2;unrot;build_matrix_row bmatrix 2;swap;stack_arrays\",\n        ':': \"array_separator column dashed\",\n        '!': \"array_separator column solid\",\n        '-': \"array_separator row dashed\",\n        '_': \"array_separator row solid\",\n        'Enter': \"stack_arrays\"\n    },\n\n    change_matrix_type: {\n        'm': \"change_matrix_type matrix\",\n        'v': \"change_matrix_type vmatrix\",\n        'V': \"change_matrix_type Vmatrix\",\n        '(': \"change_matrix_type pmatrix\",\n        '[': \"change_matrix_type bmatrix\",\n        '{': \"change_matrix_type Bmatrix\"\n    },\n\n    // NOTE: The duplicate keybindings here are for the user's convenience\n    // (e.g., capitals so they don't have to release the Shift key).\n    dissect: {\n\t'default': \"cancel_dissect_mode\",\n        //'Enter': \"finish_dissect_mode\",\n        'Escape': \"cancel_dissect_mode\",\n        'q': \"cancel_dissect_mode\",\n        'Q': \"cancel_dissect_mode\",\n        'Tab': \"dissect_undo\",\n        'Ctrl+z': \"dissect_undo\",\n\t'_': \"dissect_descend\",\n\t'u': \"dissect_ascend\",\n\t'U': \"dissect_ascend\",\n\t'ArrowUp': \"dissect_ascend\",\n\t'ArrowDown': \"dissect_descend\",\n\t'ArrowLeft': \"dissect_move_selection left\",\n\t'ArrowRight': \"dissect_move_selection right\",\n\t'[': \"dissect_move_selection left\",\n\t'{': \"dissect_move_selection left\",\n\t']': \"dissect_move_selection right\",\n\t'}': \"dissect_move_selection right\",\n\t'x': \"dissect_extract_selection\",\n\t'X': \"dissect_extract_selection\",\n\t'd': \"dissect_extract_selection trim\",\n\t'D': \"dissect_extract_selection trim\",\n\t'Backspace': \"dissect_extract_selection trim\",\n\t\"'\": \"dissect_extract_selection\",\n        'c': \"dissect_copy_selection\",\n        'C': \"dissect_copy_selection\",\n        't': \"dissect_copy_selection trim\",\n        'T': \"dissect_copy_selection trim\"\n    },\n\n    // & prefix\n    script: {\n        '[alpha]': \"self_push;to_case uppercase;font_operator mathscr\",\n        '&': \"push \\\\&\"\n    },\n\n    // % prefix\n    calligraphic: {\n        '[alpha]': \"self_push;to_case uppercase;font_operator mathcal\",\n        '%': \"push \\\\%\"\n    },\n\n    // ; prefix: lowercase Greek letters\n    lowercase_greek: {\n        'a': \"push \\\\alpha\",     'b': \"push \\\\beta\",\n        'c': \"push \\\\chi\",       'd': \"push \\\\delta\",\n        'e': \"push \\\\epsilon\",   'f': \"push \\\\phi\",\n        'g': \"push \\\\gamma\",     'h': \"push \\\\eta\",\n        'i': \"push \\\\iota\",      'j': \"push \\\\varphi\",\n        'k': \"push \\\\kappa\",     'l': \"push \\\\lambda\",\n        'm': \"push \\\\mu\",        'n': \"push \\\\nu\",\n        'o': \"push \\\\omega\",     'p': \"push \\\\pi\",\n        'q': \"push \\\\vartheta\",  'r': \"push \\\\rho\",\n        's': \"push \\\\sigma\",     't': \"push \\\\tau\",\n        'u': \"push \\\\upsilon\",   'v': \"push \\\\theta\",\n        'w': \"push \\\\omega\",     'x': \"push \\\\xi\",\n        'y': \"push \\\\psi\",       'z': \"push \\\\zeta\",\n\n        ':': \"mode variant_greek\",\n        ';': \"infix semicolon\"\n    },\n\n    // : prefix: uppercase Greek letters\n    uppercase_greek: {\n        'd': \"push \\\\Delta\",     'e': \"push \\\\varepsilon\",\n        'f': \"push \\\\Phi\",       'g': \"push \\\\Gamma\",\n        'k': \"push \\\\varkappa\",  'l': \"push \\\\Lambda\",\n        'm': \"push \\\\varpi\",     'o': \"push \\\\Omega\",\n        'p': \"push \\\\Pi\",        'q': \"push \\\\vartheta\",\n        'r': \"push \\\\varrho\",    's': \"push \\\\Sigma\",\n        't': \"push \\\\varsigma\",  'u': \"push \\\\Upsilon\",\n        'v': \"push \\\\Theta\",     'w': \"push \\\\Omega\",\n        'x': \"push \\\\Xi\",        'y': \"push \\\\Psi\",\n        '6': \"push \\\\digamma\",   '^': \"push \\\\digamma\",\n        'n': \"push \\\\nabla\",  // special case\n\n        // TODO: support for case-insensitive keybindings in general\n        'D': \"push \\\\Delta\",     'E': \"push \\\\varepsilon\",\n        'F': \"push \\\\Phi\",       'G': \"push \\\\Gamma\",\n        'K': \"push \\\\varkappa\",  'L': \"push \\\\Lambda\",\n        'M': \"push \\\\varpi\",     'O': \"push \\\\Omega\",\n        'P': \"push \\\\Pi\",        'Q': \"push \\\\vartheta\",\n        'R': \"push \\\\varrho\",    'S': \"push \\\\Sigma\",\n        'T': \"push \\\\varsigma\",  'U': \"push \\\\Upsilon\",\n        'V': \"push \\\\Theta\",     'W': \"push \\\\Omega\",\n        'X': \"push \\\\Xi\",        'Y': \"push \\\\Psi\",\n        'N': \"push \\\\nabla\",\n\n        ':': \"infix :\"\n    },\n\n    // \"variant\" uppercase Greek letters - these are italic versions of the normal ones\n    variant_greek: {\n        'd': \"push \\\\varDelta\",    'D': \"push \\\\varDelta\",\n        'f': \"push \\\\varPhi\",      'F': \"push \\\\varPhi\",\n        'g': \"push \\\\varGamma\",    'G': \"push \\\\varGamma\",\n        'l': \"push \\\\varLambda\",   'L': \"push \\\\varLambda\",\n        'o': \"push \\\\varOmega\",    'O': \"push \\\\varOmega\",\n        'p': \"push \\\\varPi\",       'P': \"push \\\\varPi\",\n        'q': \"push \\\\varTheta\",    'Q': \"push \\\\varTheta\",\n        's': \"push \\\\varSigma\",    'S': \"push \\\\varSigma\",\n        'u': \"push \\\\varUpsilon\",  'U': \"push \\\\varUpsilon\",\n        'x': \"push \\\\varXi\",       'X': \"push \\\\varXi\",\n        'y': \"push \\\\varPsi\",      'Y': \"push \\\\varPsi\"\n    }\n};\n\n\nexport default EditorKeymap;\n","\n\nimport KeybindingTable from './Keymap';\nimport JSZip from 'jszip';\n\n\nclass Keymap {\n    constructor() {\n        this.bindings = KeybindingTable;\n    }\n    \n    lookup_binding(mode, key) {\n        const mode_map = this.bindings[mode];\n        if(!mode_map) return null;\n        if(mode_map[key]) return mode_map[key];\n        if(mode_map['[alpha]'] && /^[a-zA-Z]$/.test(key)) return mode_map['[alpha]'];\n        if(mode_map['[digit]'] && /^[0-9]$/.test(key)) return mode_map['[digit]'];\n        if(mode_map['[alnum]'] && /^[a-zA-Z0-9]$/.test(key)) return mode_map['[alnum]'];\n        if(mode_map['default']) return mode_map['default'];\n        if(mode === 'base' || mode === 'editor')\n            return null;\n        else\n            return 'cancel';\n    }\n}\n\n\nclass Settings {\n    static load_from_local_storage() {\n        const serialized_string = localStorage.getItem('settings');\n        if(serialized_string)\n            return Settings.from_json(JSON.parse(serialized_string));\n        else\n            return new Settings();\n    }\n    \n    static from_json(json) {\n        let s = new Settings();\n        Settings.saved_keys.forEach(key => { s[key] = json[key]; });\n        return s;\n    }\n    \n    constructor() {\n        this.current_keymap = new Keymap();\n        this.inverse_video = false;\n        this.last_opened_filename = null;\n        this.popup_mode = null;  // null, 'help', 'files'\n\tthis.show_mode_indicator = true;\n        this.layout = this.default_layout();\n    }\n\n    default_layout() {\n        return {\n            zoom_factor: 0,\n            stack_rightalign_math: false,\n            document_rightalign_math: false,\n            inline_math: false,\n            stack_side: 'left',\n            stack_split: 50\n        };\n    }\n\n    apply_layout_to_dom(stack_panel_elt, document_panel_elt, popup_panel_elt) {\n        const layout = this.layout;\n\n        // Show or hide popup panel.\n        popup_panel_elt.style.display = this.popup_mode ? 'block' : 'none';\n\n        // Set overall font scale factor.\n        const root_elt = document.getElementById('root');\n        const percentage = Math.round(100*Math.pow(1.05, layout.zoom_factor || 0));\n        root_elt.style.fontSize = percentage + '%';\n\n\t// Set some specific scale factors for other UI elements\n\t// by manipulating the corresponding CSS variables.\n\tconst root_vars = document.querySelector(':root');\n\tconst itembar_pixels = Math.min(10, Math.max(2, Math.round(4 * percentage/100)));\n\troot_vars.style.setProperty('--itemtype-bar-width', itembar_pixels + 'px');\n\tconst headingbar_pixels = Math.max(1, Math.round(3 * percentage/100));\n\troot_vars.style.setProperty('--heading-bar-height', headingbar_pixels + 'px');\n\n        // Set up panel layout.\n        let [stack_bounds, document_bounds] = this._split_rectangle(\n            {x: 0, y: 0, w: 100, h: 100}, layout.stack_side, layout.stack_split);\n\n        this._apply_bounds(stack_panel_elt, stack_bounds);\n        this._apply_bounds(document_panel_elt, document_bounds);\n    }\n\n    // Split a parent bounding rectangle into \"primary\" and \"secondary\"\n    // subrectangles according to the given 'side' and split %.\n    _split_rectangle(bounds, side, split_percent) {\n        const w1 = Math.round(split_percent*bounds.w/100);\n        const w2 = bounds.w - w1;\n        const h1 = Math.round(split_percent*bounds.h/100);\n        const h2 = bounds.h - h1;\n        switch(side) {\n        case 'left':\n            return [{x: bounds.x,    y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x+w1, y: bounds.y, w: w2, h: bounds.h}];\n        case 'right':\n            return [{x: bounds.x+w2, y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x,    y: bounds.y, w: w2, h: bounds.h}];\n        case 'top':\n            return [{x: bounds.x, y: bounds.y,    w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y+h1, w: bounds.w, h: h2}];\n        case 'bottom':\n            return [{x: bounds.x, y: bounds.y+h2, w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y,    w: bounds.w, h: h2}];\n        default:\n            return [bounds, bounds];\n        }\n    }\n\n    _apply_bounds(elt, bounds) {\n        elt.style.left = bounds.x + '%';\n        elt.style.top = bounds.y + '%';\n        elt.style.width = bounds.w + '%';\n        elt.style.height = bounds.h + '%';\n    }\n\n    save() {\n        const serialized_string = JSON.stringify(this.to_json());\n        localStorage.setItem('settings', serialized_string);\n    }\n\n    to_json() {\n        let json = {};\n        Settings.saved_keys.forEach(key => { json[key] = this[key]; });\n        return json;\n    }\n}\n\nSettings.saved_keys = [\n    'inverse_video',\n    'last_opened_filename',\n    'popup_mode',\n    'layout',\n    'show_mode_indicator'\n];\n\n\n// Helper for generating LaTeX strings from Expr objects.\nclass LatexEmitter {\n    // selected_expr_path is optional, but if provided it is an ExprPath\n    // object that indicates which Expr is to be rendered with a \"highlight\"\n    // indicating that is currently selected.\n    constructor(base_expr, selected_expr_path) {\n        this.tokens = [];\n        this.last_token_type = null;\n\tthis.selected_expr_path = selected_expr_path;\n\n\t// Initialize a \"blank\" ExprPath that tracks the rendering.\n\t// When this current_path matches up with selected_expr_path,\n\t// that's when it's pointing at the selected expr.\n\tif(this.selected_expr_path)\n\t    this.current_path = new ExprPath(base_expr, []);\n    }\n\n    emit_token(text, token_type) {\n        if(text.length > 0)\n            this.tokens.push(text);\n        this.last_token_type = token_type;\n    }\n\n    // 'index' is the index of this (sub)expression within its parent.\n    // This is used to correlate with this given this.selected_expr_path\n    // so that we know when we've hit the right subexpression to highlight.\n    // (Expr objects can be aliased so we can't just rely on object identity.)\n    expr(expr, index) {\n\tif(index !== null && this.selected_expr_path)\n\t    this.current_path = this.current_path.descend(index);\n\t// Check if we're now rendering the 'selected' expression.\n\tif(this.selected_expr_path &&\n\t   this.selected_expr_path.equals(this.current_path)) {\n\t    // Wrap the selected expression in something to \"highlight\" it\n\t    // and render that instead.\n\t    const highlight_expr = new CommandExpr('htmlClass', [\n\t\tnew TextExpr('dissect_highlight_brace'),\n\t\tnew CommandExpr('overbrace', [\n\t\t    new CommandExpr('htmlClass', [\n\t\t\tnew TextExpr('dissect_highlight'),\n\t\t\texpr])])]);\t    \n            highlight_expr.emit_latex(this);\n\t}\n\telse\n\t    expr.emit_latex(this);\n\tif(index !== null && this.selected_expr_path)\n\t    this.current_path = this.current_path.ascend();\n    }\n\n    grouped_expr(expr, force_braces, index) {\n\tthis.grouped(() => this.expr(expr, index), force_braces);\n    }\n\n    grouped(fn, force_braces) {\n        let [old_tokens, old_last_token_type] = [this.tokens, this.last_token_type];\n        [this.tokens, this.last_token_type] = [[], null];\n\n        fn();\n\n        const [tokens, last_token_type] = [this.tokens, this.last_token_type];\n        this.tokens = old_tokens;\n        this.last_token_type = old_last_token_type;\n\n        // The only real 'special' case is a group with exactly 1 token.\n        // In that case we may be able to omit the surrounding braces if\n        // it's a 1-character string or a single \\latexcommand.  In all other\n        // cases the braces need to be included.\n        if(force_braces === 'force' || tokens.length === 0 || tokens.length > 1) {\n            this.text('{');\n            this.text(tokens.join(''));\n            this.text('}');\n        }\n        else {  // tokens.length === 1 && !force_braces\n            if(last_token_type === 'text') {\n                if(tokens[0].length === 1)\n                    this.text(tokens[0]);\n                else {\n                    this.text('{');\n                    this.text(tokens[0]);\n                    this.text('}');\n                }\n            }\n            else if(force_braces === 'force_commands') {\n                this.text('{');\n                this.emit_token(tokens[0], 'command');\n                this.text('}');\n            }\n            else\n                this.emit_token(tokens[0], 'command');\n        }\n    }\n\n    // Emit 'raw' LaTeX code.\n    text(text) {\n        if(this.last_token_type === 'command') {\n            // Determine if a space is needed after the last command; this depends\n            // on whether two non-special characters are adjacent.\n            const last_token = this.tokens[this.tokens.length-1];\n            if(this._is_latex_identifier_char(last_token.charAt(last_token.length-1)) &&\n               (this._is_latex_identifier_char(text.charAt(0)) /*|| text.charAt(0) === '{'*/))\n                this.emit_token(' ', 'text');\n        }\n        this.emit_token(text, 'text');\n    }\n\n    _is_latex_identifier_char(ch) {\n        return /^[a-zA-Z]$/.test(ch);\n    }\n\n    // \\latexcommand (something that isn't a single special-character command like \\,)\n    command(command_name, command_options) {\n        if(command_options)\n            command_name = command_name + '[' + command_options + ']';\n        this.emit_token(\"\\\\\" + command_name, 'command');\n    }\n\n    // Treated like text or a command depending on whether it starts with a backslash.\n    text_or_command(text) {\n        if(text.startsWith(\"\\\\\"))\n            this.command(text.slice(1));\n        else\n            this.text(text);\n    }\n\n    // environment_argument is an optional string to be placed directly after the \\begin{...}.\n    // This is used for array environments with a specified column layout, for example\n    // \\begin{matrix}{c:c:c}\n    begin_environment(envname, environment_argument) {\n        this.text(\"\\\\begin{\" + envname + \"}\");\n        if(environment_argument) this.text(environment_argument);\n        this.text(\"\\n\");\n    }\n\n    end_environment(envname) { this.text(\"\\n\\\\end{\" + envname + \"}\\n\"); }\n\n    align_separator() { this.text(' & '); }\n\n    // Table row separators for e.g. \\begin{matrix}\n    row_separator() {\n        // Give a little more space between rows, for fractions.\n        // See KaTeX \"common issues\" page.\n        this.text(\"\\\\\\\\[0.1em]\\n\");\n        // this.text(\"\\\\\\\\\\n\");\n    }\n\n    finished_string() { return this.tokens.join(''); }\n}\n\n\n// Overall app state, holding the stack and document.\nclass AppState {\n    static from_json(json) {\n        return new AppState(\n            Stack.from_json(json.stack),\n            Document.from_json(json.document)\n        );\n    }\n    \n    constructor(stack, document) {\n        this.stack = stack || this._default_stack();\n        this.document = document || new Document([], 0);\n        this.is_dirty = false;\n    }\n\n    _default_stack() {\n        const item = TextItem.parse_string(\n            \"Welcome to the editor.  Press **[?]** to view the User Guide.\");\n        return new Stack([item]);\n    }\n\n    same_as(app_state) {\n        // NOTE: AppState stuff is never modified in-place, so all that needs to be\n        // done here is check object identities.\n        return this.stack === app_state.stack && this.document === app_state.document;\n    }\n\n    to_json() {\n        return {\n            stack: this.stack.to_json(),\n            document: this.document.to_json(),\n            format: 1\n        };\n    }\n}\n\n\nclass UndoStack {\n    constructor() {\n        // Stack of saved AppState instances (most recent one at the end).\n        this.state_stack = [];\n\n        // Maximum size of this.state_stack\n        this.max_stack_depth = 100;\n        \n        // Number of consecutive undo operations that have been performed so far.\n        // If this is greater that zero, 'redo' operations can revert the undos.\n        this.undo_count = 0;\n    }\n\n    clear(initial_app_state) {\n        this.state_stack = [initial_app_state];\n        this.undo_count = 0;\n    }\n\n    push_state(state) {\n        // Only save state if it differs from the state we'd be undoing to.\n        if(this.state_stack.length > this.undo_count &&\n           this.state_stack[this.state_stack.length - this.undo_count - 1].same_as(state))\n            return null;\n        if(this.undo_count > 0) {\n            // Truncate already-undone saved states.  This means that 'redo' will no longer work\n            // until some more undos are performed.\n            this.state_stack = this.state_stack.slice(0, this.state_stack.length - this.undo_count);\n            this.undo_count = 0;\n        }\n        this.state_stack.push(state);\n        // Prevent the undo list from growing indefinitely.\n        if(this.state_stack.length > this.max_stack_depth)\n            this.state_stack = this.state_stack.slice(this.state_stack.length - this.max_stack_depth);\n        return state;\n    }\n\n    undo_state() {\n        if(this.state_stack.length-1 > this.undo_count) {\n            this.undo_count++;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else\n            return null;\n    }\n\n    redo_state() {\n        if(this.undo_count > 0) {\n            this.undo_count--;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else\n            return null;\n    }\n}\n\n\n// Like UndoStack but specialized to 'dissect' mode.\n// With DissectUndoStack, there is no need to keep track of the entire stack,\n// only the changes to the item being edited on the stack top.\n// Also, 'redo' in not supported by this currently (though it could be added).\nclass DissectUndoStack {\n    // Unlike UndoStack, this.expr_path_stack stores ExprPath instances rather than\n    // entire Stacks.\n    // 'initial_expr' is the original Expr as it was before dissect mode was entered.\n    constructor(initial_expr) {\n        this.initial_expr = initial_expr;\n        this.expr_path_stack = [];\n        this.max_stack_depth = 100;\n    }\n    \n    push(expr_path) {\n        this.expr_path_stack.push(expr_path);\n        if(this.expr_path_stack.length > this.max_stack_depth)\n            this.expr_path_stack = this.expr_path_stack.slice(\n                this.expr_path_stack.length - this.max_stack_depth);\n        return expr_path;\n    }\n\n    pop() {\n        if(this.expr_path_stack.length > 0)\n            return this.expr_path_stack.pop();\n        else\n            return null;\n    }\n}\n\n\n// Interface to the browser's IndexedDB storage.\n// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\nclass DocumentStorage {\n    constructor() {\n        this.open_request = null;\n        this.database = null;\n    }\n\n    open_database(onsuccess) {\n        if(!indexedDB) return;\n        this.on_open_success = onsuccess;\n        this.open_request = indexedDB.open('rpnlatex', 1);\n        this.open_request.onupgradeneeded = this.handle_upgrade_database.bind(this);\n        this.open_request.onsuccess = this.handle_open_success.bind(this);\n        this.open_request.onerror = this.handle_open_error.bind(this);\n    }\n\n    handle_upgrade_database(event) {\n        this.database = this.open_request.result;\n        switch(event.oldVersion) {\n        case 0: this.build_initial_schema(); break;\n        default: break;\n        }\n    }\n\n    // 'documents' is a map of filename->json document content\n    // 'documents_metadata' is a map of filename->filesize, etc.\n    // The metadata is needed because otherwise the entire file contents have to be loaded and parsed\n    // just to show the filesize and object count in the file selector.\n    // IndexedDB indexes could probably be used for this instead (by having the index key be\n    // \"filename:filesize:object_counts:timestamp:etc\").\n    build_initial_schema() {\n        this.database.createObjectStore('documents', {keyPath: 'filename'});\n        this.database.createObjectStore('documents_metadata', {keyPath: 'filename'});\n    }\n\n    handle_open_error(event) {\n        //alert(\"Unable to open IndexedDB for document storage.  You will be unable to save or load documents.\\nThis may happen in Private Browsing mode on some browsers.\\nError message: \" + this.open_request.error);\n        this.open_request = null;\n    }\n\n    handle_open_success(event) {\n        this.database = this.open_request.result;\n        this.open_request = null;\n        this.database.onversionchange = () => {\n            this.database.close();\n            this.database = null;\n            alert('Warning: database is outdated, please reload the page.');\n        };\n        if(this.on_open_success) this.on_open_success();\n    }\n\n    create_transaction(readwrite) {\n        return this.database.transaction(\n            ['documents', 'documents_metadata'],\n            readwrite ? 'readwrite' : 'readonly');\n    }\n\n    sanitize_filename(filename) {\n        const fn = filename.replaceAll(/[^a-zA-Z0-9_ ]/g, '').trim();\n        return (fn.length === 0 || fn.length > 200) ? null : fn;\n    }\n\n    load_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let document_store = transaction.objectStore('documents');\n        let request = document_store.get(filename);\n        request.onsuccess = () => {\n            // NOTE: request.result will be undefined if the filename key wasn't\n            // found.  This still counts as a 'success'.\n            const json = request.result;\n            if(json) {\n                const app_state = AppState.from_json(request.result);\n                onsuccess(filename, app_state);\n            }\n            else\n                onerror(filename, '???');  // TODO\n        };\n        request.onerror = () => {\n            onerror(filename, '???');  // TODO\n        };\n    }\n\n    save_state(app_state, filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let serialized_json = app_state.to_json();\n        serialized_json.filename = filename;\n\n        // Estimate the file size by serializing JSON.\n        // IndexedDB also does this serialization itself, but there doesn't\n        // seem to be any way to reuse that result directly.\n        const filesize = JSON.stringify(serialized_json).length;\n        const metadata_json = {\n            filename: filename,\n            filesize: filesize,\n            description: '',  // TODO\n            stack_item_count: app_state.stack.depth(),\n            document_item_count: app_state.document.items.length,\n            timestamp: new Date()\n        };\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').put(serialized_json);\n        transaction.objectStore('documents_metadata').put(metadata_json);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    delete_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').delete(filename);\n        transaction.objectStore('documents_metadata').delete(filename);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    fetch_file_list(onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let request = transaction.objectStore('documents_metadata').getAll();\n        request.onsuccess = () => {\n            request.result.forEach(row => {\n                // Parse the timestamp\n                const ts_value = Date.parse(row.timestamp);\n                row.timestamp = ts_value ? new Date(ts_value) : null;\n            });\n            onsuccess(request.result);\n        };\n        request.onerror = onerror;\n    }\n\n    // Fetch all documents using a cursor.  'onrowfetched' is invoked once per document\n    // and then 'onfinished' is invoked at the end.\n    fetch_all_documents(onrowfetched, onfinished, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let cursor = transaction.objectStore('documents').openCursor();\n        cursor.onsuccess = (event) => {\n            const c = event.target.result;\n            if(c) {\n                onrowfetched(c.value);\n                c.continue();\n            }\n            else\n                onfinished();\n        };\n        cursor.onerror = onerror;\n    }\n}\n\n\n// Manage state of importing/exporting zip archives.\nclass ImportExportState {\n    constructor() {\n        // States:\n        //   'idle' - if this.download_url is populated, an export download is ready\n        //   'error' - export failed, this.error_message is populated\n        //   'loading' - in the process of loading from the database cursor\n        //   'zipping' - creation of zip file in progress\n        //   'uploading' - user is uploading an archive zipfile\n        //   'importing' - uploaded zipfile is being processed/imported\n        this.state = 'idle';\n\n        this.document_storage = null;  // will be initialized by AppState\n\n        // Number of imported documents handled so far.\n        this.import_count = 0;\n\n        // Number of failures noted this import (if >0, this.error_message will also be set).\n        this.failed_count = 0;\n        this.error_message = null;\n\n        // Holds the last-generated blob download URL, if any.\n        this.download_url = null;\n\n        // This will be set on a successful import.\n        this.import_result_string = null;\n\n        // This will be set to true if the main file list (FileManagerState) needs to be refreshed from the DB.\n        this.file_list_needs_update = false;\n\n        // This can be set to a function to monitor state changes.\n        this.onstatechange = null;\n    }\n\n    // TODO: -> state_description()\n    textual_state() {\n        switch(this.state) {\n        case 'idle': return this.download_url ? 'Download ready' : 'Ready for export or import';\n        case 'error': return 'Error: ' + this.error_message;\n        case 'loading': return 'Extacting database...';\n        case 'zipping': return 'Compressing files...';\n        case 'uploading': return 'Uploading data...';\n        case 'importing': return 'Importing documents: ' + this.import_count + ' so far';\n        default: return '???';\n        }\n    }\n\n    download_available() {\n        return this.state === 'idle' && this.download_url;\n    }\n\n    generate_download_filename() {\n        const date = new Date();\n        return [\n            'rpnlatex_', date.getFullYear().toString(), '_',\n            date.toLocaleString('default', {month: 'short'}).toLowerCase(),\n            '_', date.getDate().toString().padStart(2, '0'), '.zip'\n        ].join('');\n    }\n\n    change_state(new_state) {\n        this.state = new_state;\n        if(this.onstatechange)\n            this.onstatechange(this);\n    }\n    \n    start_exporting() {\n        let document_storage = this.document_storage;\n        this.zip = new JSZip();\n        document_storage.fetch_all_documents(\n            (row) => this.add_document_json_to_zip(row),\n            () => this.start_compressing(),\n            () => {\n                this.error_message = 'Unable to export the document database.';\n                this.change_state('error');\n            });\n        this.change_state('loading');\n    }\n\n    add_document_json_to_zip(json) {\n        this.zip.file(json.filename + '.json', JSON.stringify(json));\n    }\n\n    start_compressing() {\n        this.change_state('zipping');\n        this.zip.generateAsync({type: 'blob'}).then(content_blob => {\n            this.finished_compressing(content_blob);\n        });\n    }\n\n    clear_download_url() {\n        if(this.download_url) {\n            URL.revokeObjectURL(this.download_url);\n            this.download_url = null;\n        }\n    }\n\n    finished_compressing(content_blob) {\n        this.clear_download_url();\n        this.download_url = URL.createObjectURL(content_blob);\n        this.zip = null;\n        this.change_state('idle');\n    }\n\n    // zipfile is a File object from a <input type=\"file\"> element.\n    start_importing(zipfile) {\n        this.clear_download_url();\n        this.import_result_string = null;\n        if(zipfile.type !== 'application/zip') {\n            alert('Import files must be zip archives.');\n            return;\n        }\n        this.change_state('uploading');\n        let reader = new FileReader();\n        reader.addEventListener(\n            'load',\n            event => this.process_uploaded_data(event.target.result));\n        reader.readAsArrayBuffer(zipfile);\n    }\n\n    process_uploaded_data(data) {\n        this.import_count = 0;\n        this.failed_count = 0;\n        this.error_message = null;\n        this.change_state('importing');\n        JSZip.loadAsync(data).then(zipfile => {\n            let promises = [];\n            for(let filename in zipfile.files) {\n                const file = zipfile.files[filename];\n                if(filename.endsWith('.json')) {\n                    promises.push(\n                        file.async('string').then(\n                            content => this.import_file(file.name.slice(0, file.name.length-5), content)));\n                }\n                else {\n                    this.error_message = 'Invalid filename in archive: ' + filename;\n                    this.failed_count++;\n                }\n            }\n            Promise.all(promises).then(\n                () => {\n                    if(this.failed_count > 0)\n                        this.import_result_string = 'Errors encountered: ' + this.error_message;\n                    else\n                        this.import_result_string = 'Successfully imported ' + this.import_count + ' document' + (this.import_count === 1 ? '' : 's');\n                    this.change_state('idle');\n                    this.file_list_needs_update = true;\n                });\n        });\n    }\n\n    import_file(filename, content) {\n        let document_storage = this.document_storage;\n        let parsed, app_state;\n        try {\n            parsed = JSON.parse(content);\n            app_state = AppState.from_json(parsed);\n        } catch(e) {\n            this.error_message = 'Invalid document found in zip file: ' + filename;\n            this.failed_count++;\n            return;\n        }\n        document_storage.save_state(app_state, filename);\n        this.import_count++;\n        this.change_state('importing');\n    }\n}\n\n\nclass FileManagerState {\n    constructor(file_list, selected_filename, current_filename) {\n        this.file_list = file_list;\n        this.selected_filename = selected_filename;\n        this.current_filename = current_filename;\n        this.unavailable = false;  // set to true if there's a database error\n    }\n\n    sort_file_list(field, ascending) {\n        this.file_list.sort((a, b) => {\n            const a_value = a[field], b_value = b[field];\n            return (ascending ? 1 : -1)*(a_value === b_value ? 0 : (a_value < b_value ? -1 : 1));\n        });\n    }\n\n    // basename -> basename_1\n    // basename_1 -> basename_2\n    // The first available name is used, so basename_50 -> basename_2\n    // if basename_2 is available but basename_1 is taken.\n    generate_unused_filename(basename) {\n        if(this.unavailable || !this.file_list)\n            return basename;\n        basename = basename.replace(/_\\d+$/, '')\n        for(let n = 1; n < 1000; n++) {\n            const candidate = basename + '_' + n;\n            if(!this.file_list.some(file => file.filename === candidate))\n                return candidate;\n        }\n        return basename + '_toomany';\n    }\n\n    // For moving up or down in the list of files.\n    find_adjacent_filename(filename, offset) {\n        if(this.unavailable || !this.file_list) return null;\n        let new_filename = null;\n        let file_list = this.file_list;\n        file_list.forEach((f, index) => {\n            if(f.filename === filename) {\n                let new_index = index+offset;\n                if(new_index < 0) new_index = 0;\n                if(new_index >= file_list.length) new_index = file_list.length-1;\n                new_filename = file_list[new_index].filename;\n            }\n        });\n        if(!new_filename && file_list.length > 0)\n            new_filename = file_list[0].filename;\n        return new_filename;\n    }\n}\n\n\n// Represents a \"path\" within an Expr to one of its subexpressions.\n// Each element (selector) along the path is an integer identifying one of the\n// children of the Expr at that level.  In the current implementation, the\n// path must be at least of length 1; in other words an ExprPath can't refer\n// directly to its base expression.\nclass ExprPath {\n    constructor(expr, subexpr_indexes) {\n\tthis.expr = expr;\n\tthis.subexpr_indexes = subexpr_indexes;\n    }\n\n    depth() { return this.subexpr_indexes.length; }\n\n    // This comparison is needed by the LatexEmitter to determine when the\n    // rendering path matches up with the selected expression path.\n    equals(other_path) {\n\tif(this.expr !== other_path.expr)\n            return false;\n\tif(this.subexpr_indexes.length !== other_path.subexpr_indexes.length)\n            return false;\n\tfor(let i = 0; i < this.subexpr_indexes.length; i++)\n\t    if(this.subexpr_indexes[i] !== other_path.subexpr_indexes[i])\n\t\treturn false;\n\treturn true;\n    }\n\n    // Return the 'n'th parent of the selected subexpression.\n    // n === 0 returns the actual selected subexpression;\n    // n === 1 is its first parent, etc.\n    last_expr_but(n) {\n\tlet expr = this.expr;\n\tfor(let i = 0; i < this.subexpr_indexes.length-n; i++)\n\t    expr = expr.subexpressions()[this.subexpr_indexes[i]];\n\treturn expr;\n    }\n\n    selected_expr() { return this.last_expr_but(0); }\n\n    last_index_but(n) {\n\treturn this.subexpr_indexes[this.subexpr_indexes.length-n];\n    }\n\n    // Return a new ExprPath descended into the subexpression of the\n    // selected expression indicated by 'index'.\n    descend(index) {\n\treturn new ExprPath(\n\t    this.expr,\n\t    this.subexpr_indexes.concat([index]));\n    }\n\n    // Return a new ExprPath that selects the parent Expr of the current\n    // subexpression(s).\n    ascend() {\n\treturn new ExprPath(\n\t    this.expr,\n\t    this.subexpr_indexes.slice(0, -1));\n    }\n\n    // Return a new Expr that is like this one but with the \"sibling\" subexpression\n    // in the given direction selected.\n    // 'direction' can be 'left' or 'right'.  The selection wraps around when going\n    // past the ends of the expression.\n    move(direction) {\n\tconst parent_expr = this.last_expr_but(1);\n\tconst final_index = this.last_index_but(1);\n\tconst subexpr_count = parent_expr.subexpressions().length;\n\tlet new_index = final_index + (direction === 'right' ? +1 : -1);\n\t// NOTE: could use % but Javascript returns negative when new_index goes negative.\n\t// We need it between 0 and subexpr_count-1.\n\tif(new_index < 0) new_index = subexpr_count-1;\n\tif(new_index >= subexpr_count) new_index = 0;\n\treturn this.ascend().descend(new_index);\n    }\n\n    // Replace the currently selected subexpression with new_expr.\n    // This returns a version of the original this.expr, except the\n    // indicated subexpression has been replaced by the given expression.\n    // The subexpression that has been replaced is still available via this.selected_expr().\n    replace_selection(new_expr) {\n\tconst parent_expr = this.last_expr_but(1);\n\tconst final_index = this.last_index_but(1);\n\tlet expr = parent_expr.replace_subexpression(final_index, new_expr);\n\t// Unwind back up the ExprPath \"stack\" backwards, replacing subexpressions along the way.\n\t// This is O(n^2) in the depth of the tree structure.  This could be optimized to O(n)\n\t// by streamlining the repetitive last_*_but() calls.\n\tfor(let i = 2; i <= this.subexpr_indexes.length; i++) {\n\t    const local_parent = this.last_expr_but(i);\n\t    const subexpr_index = this.last_index_but(i);\n\t    expr = local_parent.replace_subexpression(subexpr_index, expr);\n\t}\n\treturn expr;\n    }\n\n    // \"Extract\" the currently selected subexpression, replacing it with a placeholder\n    // where it previously was.\n    extract_selection() {\n\treturn this.replace_selection(new PlaceholderExpr());\n    }\n\n/*    // \"Delete\" the currently selected subexpression from the expression tree entirely.\n    // This is not always possible; in such cases the expression is instead replaced with\n    // a blank TextExpr.  This returns a version of the original this.expr, except the\n    // indicated subexpression has been removed from the tree, or at least been replaced\n    // by a blank.\n    delete_selection() {\n\tconst parent_expr = this.last_expr_but(1);\n\tconst final_index = this.last_index_but(1);\n\tlet expr = parent_expr.delete_subexpression(final_index);\n\t// The rest follows as in extract_selection().\n\tfor(let i = 2; i <= this.subexpr_indexes.length; i++) {\n\t    const local_parent = this.last_expr_but(i);\n\t    const subexpr_index = this.last_index_but(i);\n\t    expr = local_parent.replace_subexpression(subexpr_index, expr);\n\t}\n\treturn expr;\n    } */\n}\n\n\n// Abstract superclass for expression trees.\nclass Expr {\n    static from_json(json) {\n        switch(json.expr_type) {\n        case 'command':\n            return new CommandExpr(\n\t\tjson.command_name,\n\t\tthis._list(json.operand_exprs),\n\t\tjson.options);\n        case 'infix':\n            return new InfixExpr(\n                this._list(json.operand_exprs),\n\t\tthis._list(json.operator_exprs),\n\t\tjson.split_at_index || null,\n\t\tjson.split_type || null);\n        case 'placeholder':\n            return new PlaceholderExpr();\n        case 'text':\n            return new TextExpr(json.text);\n        case 'sequence':\n            return new SequenceExpr(\n\t\tthis._list(json.exprs),\n\t\t!!json.fused);\n        case 'delimiter':\n            return new DelimiterExpr(\n                json.left_type,\n\t\tjson.right_type,\n\t\tjson.middle_type,\n                this._list(json.inner_exprs),\n\t\tjson.fixed_size);\n        case 'subscriptsuperscript':\n            return new SubscriptSuperscriptExpr(\n                this._expr(json.base_expr),\n                this._expr(json.subscript_expr),\n                this._expr(json.superscript_expr));\n        case 'array':\n            return new ArrayExpr(\n                json.array_type, json.row_count, json.column_count, this._list2d(json.element_exprs),\n                json.row_separators, json.column_separators);\n        default:\n            return new TextExpr('invalid expr type ' + json.expr_type);\n        }\n    }\n\n    // Helper routines for from_json\n    static _expr(json) { return json ? Expr.from_json(json) : null; }\n    static _list(json_array) { return json_array.map(expr_json => Expr.from_json(expr_json)); }\n    static _list2d(json_array) { return json_array.map(row_exprs => Expr._list(row_exprs)); }\n    \n    // Concatenate two Exprs into one.  This will merge Sequence and Text\n    // nodes when possible, instead of creating nested SequenceExprs.\n    static combine_pair(left, right) {\n        const left_type = left.expr_type(), right_type = right.expr_type();\n        if(left_type === 'sequence' && !left.fused &&\n\t   right_type === 'sequence' && !right.fused)\n            return new SequenceExpr(left.exprs.concat(right.exprs));\n        else if(left_type === 'text' && right_type === 'text')\n            return new TextExpr(left.text + right.text);\n        else if(left_type === 'sequence' && !left.fused &&\n\t\tright_type === 'text' &&\n\t\tleft.exprs[left.exprs.length-1].expr_type() === 'text') {\n            // Left sequence ends in a Text; merge it with the new Text.\n            return new SequenceExpr(\n                left.exprs.slice(0, -1).concat([\n                    new TextExpr(left.exprs[left.exprs.length-1].text + right.text)\n                ]));\n        }\n        else if(left_type === 'text' &&\n\t\tright_type === 'sequence' && !right.fused &&\n                right.exprs[0].expr_type() === 'text') {\n            // Right sequence starts with a Text; merge it with the new Text.\n            return new SequenceExpr(\n                [new TextExpr(left.text + right.exprs[0].text)\n                ].concat(right.exprs.slice(1)));\n        }\n        else if(left_type === 'sequence' && !left.fused) {\n            // Sequence + anything => longer Sequence\n            return new SequenceExpr(left.exprs.concat([right]));\n        }\n        else if(right_type === 'sequence' && !right.fused) {\n            // Anything + Sequence => longer Sequence\n            return new SequenceExpr([left].concat(right.exprs));\n        }\n        else if(left_type === 'command' && right_type === 'command')\n            return Expr.combine_command_pair(left, right);\n        else\n            return new SequenceExpr([left, right]);\n    }\n\n    // Combine two CommandExprs with some special-casing for some particular command pairs.\n    static combine_command_pair(left, right) {\n        const left_name = left.command_name, right_name = right.command_name;\n\n\t// Try combining \\boldsymbol{X...} + \\boldsymbol{Y...} -> \\boldsymbol{X...Y...}\n\t// Combining in this way fixes (or at least improves) some edge-case spacing problems with KaTeX.\n\t// Compare: \\boldsymbol{W}\\boldsymbol{A} vs. \\boldsymbol{WA}\n\tif(left_name === 'boldsymbol' && right_name === 'boldsymbol' &&\n\t   left.operand_count() === 1 && right.operand_count() === 1)\n\t    return new SequenceExpr(\n\t\t[left.operand_exprs[0], right.operand_exprs[0]]\n\t    ).as_bold();\n\n\t// Try combining adjacent integral symbols into multiple-integral commands.\n        let new_command_name = null;\n        if(left_name === 'int' && right_name === 'int') new_command_name = 'iint';\n        if(left_name === 'iint' && right_name === 'int') new_command_name = 'iiint';\n        if(left_name === 'int' && right_name === 'iint') new_command_name = 'iiint';\n        if(left_name === 'oint' && right_name === 'oint') new_command_name = 'oiint';\n        if(left_name === 'oiint' && right_name === 'oint') new_command_name = 'oiiint';\n        if(left_name === 'oint' && right_name === 'oiint') new_command_name = 'oiiint';\n        if(new_command_name)\n            return new CommandExpr(new_command_name);\n\n\t// Everything else just becomes a SequenceExpr.\n        return new SequenceExpr([left, right]);\n    }\n\n    // Convert a string into a TextExpr, or a CommandExpr if it begins\n    // with \\ (i.e. a latex command).\n    static text_or_command(s) {\n        if(s.startsWith(\"\\\\\"))\n            return new CommandExpr(s.slice(1));\n        else\n            return new TextExpr(s);\n    }\n    \n    expr_type() { return '???'; }\n\n    to_latex(selected_expr_path) {\n        let emitter = new LatexEmitter(this, selected_expr_path);\n\temitter.expr(this, null);\n        return emitter.finished_string();\n    }\n\n    emit_latex(emitter) { emitter.text('INVALID'); }\n\n    // Return a list of property names on this object that should be serialized\n    json_keys() { return []; }\n\n    // Subclasses can extend this if they need special handling.\n    to_json() {\n        let json = { expr_type: this.expr_type() };\n        this.json_keys().forEach(json_key => {\n            const obj = this[json_key];\n            let value;\n            if(obj === null || obj === undefined)\n                value = null;\n            else if(typeof(obj) === 'object' && obj instanceof Expr)\n                value = obj.to_json();\n            else if(typeof(obj) === 'object') {\n                // Assume it's an Array.  It could also be a 2-dimensional array, in which case the subclasses\n                // need to extend to_json() instead of relying on this default.\n                value = obj.map(elt => elt.to_json());\n            }\n            else // Strings, numbers, etc.\n                value = obj;\n            json[json_key] = value;\n        });\n        return json;\n    }\n\n    to_text() { return \"$$\\n\" + this.to_latex() + \"\\n$$\"; }\n\n    // Invoke fn once for each subexpression in this expression tree (including 'this').\n    // The visiting is performed depth-first, left-to-right, so should correspond visually\n    // to the left-to-right rendering of the expression.\n    visit(fn) { fn(this); }\n\n    // Return a list of all subexpressions of this one, in (at least approximate) left-to-right order.\n    subexpressions() { return []; }\n\n    // True if this has any subexpressions to descend into via ExprPath.\n    // As a special case, CommandExprs that represent font commands peek into\n    // their arguments (recursively) to determine this.  This is to prevent\n    // selecting \"inside\" font commands that only wrap a simple leaf expression.\n    // This means that has_subexpressions() may sometimes return false even\n    // if subexpressions() is nonempty.\n    has_subexpressions() { return this.subexpressions().length > 0; }\n\n    // Return a new Expr like this one but with the subexpression at the given index replaced\n    // with a new one.  The subexpression indexes here correspond to what is returned by subexpressions().\n    replace_subexpression(index, new_expr) { return this; }\n\n/*    // Return a new Expr with the subexpression at the given index \"deleted\".\n    // If deletion is not structurally possible, the subexpression might instead\n    // be replaced by a blank TextExpr.\n    // Note that the returned Expr may not be the same type as the original; for example,\n    // deleting the last superscript or subscript from a SubscriptSuperscriptExpr leaves\n    // only the base Expr.\n    delete_subexpression(index) {\n\t// Default implementation; subclasses can override.\n\treturn this.replace_subexpression(index, TextExpr.blank());\n    } */\n\n    // Find the first PlaceholderExpr that exists in this expression.  Returns null if none.\n    find_placeholder() {\n        let found = null;\n        this.visit(expr => {\n            if(expr.expr_type() === 'placeholder' && !found)\n                found = expr;\n        });\n        return found;\n    }\n\n    // Return a (possibly) new Expr with old_expr substituted for new_expr, if old_expr is present.\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr)\n            return new_expr;\n        else\n            return this;\n    }\n\n    // NOTE: CommandExpr overrides this\n    as_bold() { return new CommandExpr('boldsymbol', [this]); }\n\n    is_command_with_name(command_name) { return false; }\n}\n\n\n// Represents a \"raw\" LaTeX command such as \\sqrt plus optional operand expressions.\nclass CommandExpr extends Expr {\n    // NOTES:\n    //   - 'command_name' does not include the initial \\ character\n    //   - 'options', if provided, is a plain string that becomes \"\\command_name[options]{...}\"\n    //   - 'command_name' itself can include the options in [brackets], in which case it is\n    //     automatically split off into 'options' (this is used for keybindings).\n    //     (e.g.: command_name='sqrt[3]' -> command_name='sqrt', options='3'\n    constructor(command_name, operand_exprs, options) {\n        super();\n        if(command_name.endsWith(']')) {\n            const index = command_name.indexOf('[');\n            this.command_name = command_name.slice(0, index);\n            this.options = command_name.slice(index+1, command_name.length-1);\n        }\n        else {\n            this.command_name = command_name;\n            this.options = options === undefined ? null : options;\n        }\n        this.operand_exprs = operand_exprs || [];\n    }\n\n    operand_count() { return this.operand_exprs.length; }\n    expr_type() { return 'command'; }\n    json_keys() { return ['command_name', 'operand_exprs', 'options']; }\n\n    emit_latex(emitter) {\n        if(this.command_name !== '')\n            emitter.command(this.command_name, this.options);\n        // Braces need to be forced around each operand, even single-letter operands.\n        this.operand_exprs.forEach((operand_expr, index) =>\n            emitter.grouped_expr(operand_expr, 'force', index));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.operand_exprs.forEach(operand_expr => operand_expr.visit(fn));\n    }\n\n    subexpressions() { return this.operand_exprs; }\n\n    // See comment in Expr.has_subexpressions().\n    has_subexpressions() {\n\tif(this.is_font_command())\n\t    return this.operand_exprs[0].has_subexpressions();\n\telse\n\t    return super.has_subexpressions();\n    }\n\n    replace_subexpression(index, new_expr) {\n\treturn new CommandExpr(\n\t    this.command_name,\n\t    this.operand_exprs.map(\n\t\t(operand_expr, op_index) => op_index === index ? new_expr : operand_expr),\n\t    this.options);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new CommandExpr(\n            this.command_name,\n            this.operand_exprs.map(operand_expr => operand_expr.substitute_expr(old_expr, new_expr)),\n            this.options);\n    }\n\n    // Wrap this expression in a \\boldsymbol{...} command if it's not already.\n    // LaTeX has different ways of expressing 'bold' so this is not quite trivial.\n    // TextItem implements as_bold() in yet another way.\n    as_bold() {\n        if(this.command_name === 'boldsymbol')\n            return this;\n        else if(this.command_name === 'mathrm') {\n            // Replace \\mathrm with \\bold (as if it were originally created with [.][e] (operator bold))\n            if(this.operand_count() === 1)\n                return new CommandExpr('bold', this.operand_exprs);\n            else\n                return this;\n        }\n        else if(this.command_name === 'mathtt' || this.command_name === 'mathsf' ||\n                this.command_name === 'mathbb' || this.command_name === 'mathfrak' ||\n                this.command_name === 'mathscr' || this.command_name === 'mathcal') {\n            // For font families without bold fonts, wrap it in \\pmb{} instead.\n            // Since KaTeX v.0.16.2, \\pmb is rendered better (via CSS shadows) which\n            // makes this feasible.\n            if(this.operand_count() === 1)\n                return new CommandExpr('pmb', [this]);\n            else\n                return this;\n        }\n        else\n            return super.as_bold();\n    }\n\n    is_command_with_name(command_name) {\n        return this.command_name === command_name;\n    }\n\n    is_font_command() {\n\tif(this.operand_count() !== 1)\n\t    return false;\n\tconst c = this.command_name;\n\treturn c === 'boldsymbol' || c === 'bold' || c === 'pmb' ||\n\t    c === 'mathrm' || c === 'mathtt' || c === 'mathsf' || c === 'mathbb' ||\n\t    c === 'mathfrak' || c === 'mathscr' || c === 'mathcal';\n    }\n}\n\n\n// Represents two or more expressions joined by infix operators (like + or \\wedge).\n// Fields:\n//   - operand_exprs: The x,y,z in 'x + y - z'.  There must be at least 2.\n//   - operator_exprs: The +,- in 'x + y - z'.  Length must be 1 less than operand_exprs.\n//   - split_at_index: Index of the operator_expr that is considered the 'split point'\n//     for this InfixExpr.  Generally this is the last operator used to create the\n//     infix expression.  For binary expressions this is 0; for something like x+y = z+w\n//     it would be 1 if the '=' was used to join the existing x+y and z+w.\n//   - split_type: null, 'before', or 'after'; if not null, the equation is split\n//     via \\\\ and \\qquad at the split_at_index (i.e. split_at_index === 0 breaks\n//     at the first operator).\nclass InfixExpr extends Expr {\n    // Combine two existing expressions into an InfixExpr.\n    // If one or both of the expressions are already InfixExprs, they are\n    // merged into a larger InfixExpr.  Otherwise, a new binary InfixExpr\n    // will be created to contain them.  In either case, the result is\n    // joined by 'op_expr' as the infix operator.\n    // NOTE: if either of the existing InfixExprs have split_types specified,\n    // they are not combined, to avoid messing up the linebreak point (since\n    // each InfixExpr can have only one linebreak specified).\n    static combine_infix(left_expr, right_expr, op_expr) {\n\tlet new_operand_exprs = [];\n\tlet new_operator_exprs = [];\n\tif(left_expr.expr_type() === 'infix' && !left_expr.split_type) {\n\t    new_operand_exprs = new_operand_exprs.concat(left_expr.operand_exprs);\n\t    new_operator_exprs = new_operator_exprs.concat(left_expr.operator_exprs);\n\t}\n\telse\n\t    new_operand_exprs.push(left_expr);\n        // Determine index of the new op_expr within the new InfixExpr;\n        // this becomes the split_at_index determining where do_split_infix()\n        // applies at.\n        const split_at_index = new_operator_exprs.length;\n\tnew_operator_exprs.push(op_expr);\n\tif(right_expr.expr_type() === 'infix' && !right_expr.split_type) {\n\t    new_operand_exprs = new_operand_exprs.concat(right_expr.operand_exprs);\n\t    new_operator_exprs = new_operator_exprs.concat(right_expr.operator_exprs);\n\t}\n\telse\n\t    new_operand_exprs.push(right_expr);\n\treturn new InfixExpr(new_operand_exprs, new_operator_exprs, split_at_index);\n    }\n    \n    constructor(operand_exprs, operator_exprs, split_at_index, split_type) {\n\tsuper();\n\tthis.operand_exprs = operand_exprs;\n\tthis.operator_exprs = operator_exprs;\n\tthis.split_at_index = split_at_index || 0;\n\tthis.split_type = split_type;\n    }\n\n    expr_type() { return 'infix'; }\n\n    json_keys() { return ['operand_exprs', 'operator_exprs', 'split_at_index', 'split_type']; }\n\n    // If the given infix operator is a simple command like '+' or '\\cap',\n    // return the command name (without the initial \\ if it has one).\n    // If it's anything more complex, return null.\n    // If 'op_expr' is omitted, check only the operator at the split_at point.\n    operator_text(op_expr) {\n\tif(op_expr) {\n            if(op_expr.expr_type() === 'command' && op_expr.operand_count() === 0)\n\t\treturn op_expr.command_name;\n            else if(op_expr.expr_type() === 'text')\n\t\treturn op_expr.text;\n            else\n\t\treturn null;\n\t}\n\telse\n            return this.operator_text(this.operator_exprs[this.split_at_index]);\n    }\n\n    // Check if this is a low-precedence infix expression like x+y\n    // This is mostly for convenience so it doesn't need to be that precise.\n    needs_autoparenthesization() {\n\treturn this.operator_exprs.every(op_expr => {\n\t    const op = this.operator_text(op_expr);\n            return op && (op === '+' || op === '-');\n\t});\n    }\n\n    emit_latex(emitter) {\n\tfor(let i = 0; i < this.operator_exprs.length; i++) {\n\t    emitter.expr(this.operand_exprs[i], 2*i);\n\t    if(this.split_at_index === i && this.split_type === 'before') {\n\t\temitter.command(\"\\\\\");\n\t\temitter.command(\"qquad\");\n\t    }\n\t    emitter.expr(this.operator_exprs[i], 2*i+1);\n\t    if(this.split_at_index === i && this.split_type === 'after') {\n\t\temitter.command(\"\\\\\");\n\t\temitter.command(\"qquad\");\n\t    }\n\t}\n\temitter.expr(\n\t    this.operand_exprs[this.operand_exprs.length-1],\n\t    2*this.operator_exprs.length);\n    }\n\n    visit(fn) {\n\tfn(this);\n\tfor(let i = 0; i < this.operator_exprs.length; i++) {\n\t    this.operand_exprs[i].visit(fn);\n\t    this.operator_exprs[i].visit(fn);\n\t}\n\tthis.operand_exprs[this.operand_exprs.length-1].visit(fn);\n    }\n\n    subexpressions() {\n\t// Interleave operators and operands.\n\tlet exprs = [];\n\tfor(let i = 0; i < this.operator_exprs.length; i++) {\n\t    exprs.push(this.operand_exprs[i]);\n\t    exprs.push(this.operator_exprs[i]);\n\t}\n\texprs.push(this.operand_exprs[this.operand_exprs.length-1]);\n\treturn exprs;\n    }\n\n    // Even indices reference operands; odd indices reference operators.\n    replace_subexpression(index, new_expr) {\n\treturn new InfixExpr(\n\t    this.operand_exprs.map((operand_expr, expr_index) =>\n\t\texpr_index*2 === index ? new_expr : operand_expr),\n\t    this.operator_exprs.map((operator_expr, expr_index) =>\n\t\texpr_index*2 + 1 === index ? new_expr : operator_expr),\n\t    this.split_at_index,\n\t    this.split_type);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n\tif(this === old_expr) return new_expr;\n\treturn new InfixExpr(\n\t    this.operand_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)),\n\t    this.operator_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)),\n\t    this.split_at_index,\n\t    this.split_type);\n    }\n\n    // Returns an InfixExpr like this one, but with the specified split mode set.\n    with_split_at(new_split_at_index, new_split_type) {\n        return new InfixExpr(\n\t    this.operand_exprs, this.operator_exprs,\n\t    new_split_at_index, new_split_type);\n    }\n\n    // Swap everything to the left of operator_index with everything to the right of operator_index.\n    swap_sides_at(operator_index) {\n        const new_operand_exprs =\n              this.operand_exprs.slice(operator_index+1).concat(\n                  this.operand_exprs.slice(0, operator_index+1));\n        const new_operator_exprs =\n              this.operator_exprs.slice(operator_index+1).concat(\n                  [this.operator_exprs[operator_index]]).concat(\n                      this.operator_exprs.slice(0, operator_index));\n        return new InfixExpr(\n            new_operand_exprs,\n            new_operator_exprs,\n            new_operator_exprs.length - this.split_at_index - 1,\n            this.split_type);\n    }\n\n    // Extract everything to one side of the given operator index.\n    // The resulting Expr may not necessarily be another InfixExpr.\n    // 'side' can be 'left' or 'right'.\n    // NOTE: The new split_at_index will always be 0.  There is not a good way\n    // to do this properly currently since we only track the most recent operator\n    // in InfixExpr.\n    extract_side_at(operator_index, side) {\n        if(side === 'right') {\n            if(operator_index === this.operator_exprs.length-1)\n                return this.operand_exprs[operator_index+1];  // rightmost operand\n            else\n                return new InfixExpr(\n                    this.operand_exprs.slice(operator_index+1),\n                    this.operator_exprs.slice(operator_index+1),\n                    0, null);\n        }\n        else {\n            if(operator_index === 0)\n                return this.operand_exprs[0];  // leftmost operand\n            else\n                return new InfixExpr(\n                    this.operand_exprs.slice(0, operator_index+1),\n                    this.operator_exprs.slice(0, operator_index),\n                    0, null);\n        }\n    }\n}\n\n\n// Represents a \"placeholder marker\" that can be used with the 'substitute_placeholder' command.\nclass PlaceholderExpr extends Expr {\n    expr_type() { return 'placeholder'; }\n    json_keys() { return []; }\n\n    emit_latex(emitter) {\n        const expr = new CommandExpr('htmlClass', [\n            new TextExpr('placeholder_expr'), new TextExpr(\"\\\\blacksquare\")]);\n        emitter.expr(expr, null);\n    }\n}\n\n\n// Represents a snippet of LaTeX code; these are the \"leaves\" of Expr-trees.\nclass TextExpr extends Expr {\n    static blank() { return new TextExpr(''); }\n    \n    constructor(text) {\n        super();\n        this.text = text;\n    }\n\n    expr_type() { return 'text'; }\n    json_keys() { return ['text']; }\n\n    emit_latex(emitter) { emitter.text(this.text, null); }\n}\n\n\n// Represents a sequence of expressions all concatenated together.\n// Adjacent SequenceExprs can be merged together; see Expr.combine_pair().\n// If 'fused' is true, this will not be combined with other adjacent\n// expressions in Expr.combine_pair(), etc.\n// This can be used to group things that functionally belong together\n// like f(x), which matters for 'dissect' mode.\nclass SequenceExpr extends Expr {\n    constructor(exprs, fused) {\n        super();\n        this.exprs = exprs;\n\tthis.fused = !!fused;\n    }\n\n    expr_type() { return 'sequence'; }\n    json_keys() { return ['exprs']; }\n\n    to_json() {\n\tlet json = super.to_json();\n\tif(this.fused) json.fused = true;\n\treturn json;\n    }\n\n    // Special case: Two-element \"fused\" SequenceExprs of the form\n    // [Expr, DelimiterExpr] automatically wrap the DelimiterExpr in an \"empty\"\n    // latex command (i.e., set of braces).\n    // For example: f(x) is [TextExpr('f'), DelimiterExpr('(', 'x', ')')]\n    // so this becomes f{(x)} instead of f(x).  This has the effect of tightening\n    // the spacing after f to better match normal function notation.\n    emit_latex(emitter) {\n        if(this.exprs.length === 2 &&\n           this.exprs[1].expr_type() === 'delimiter') {\n            emitter.expr(this.exprs[0], 0);\n            emitter.grouped_expr(this.exprs[1], 'force', 1);\n        }\n        else\n            this.exprs.forEach((expr, index) => emitter.expr(expr, index));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.exprs.forEach(expr => expr.visit(fn));\n    }\n\n    subexpressions() { return this.exprs; }\n\n    replace_subexpression(index, new_expr) {\n\treturn new SequenceExpr(\n\t    this.exprs.map(\n\t\t(subexpr, subexpr_index) => subexpr_index === index ? new_expr : subexpr));\n    }\n\n/*    // If this SequenceExpr is left with only one item after deletion,\n    // the result is just that item.\n    // (Note that SequenceExprs always must have >= 2 items.)\n    delete_subexpression(index) {\n\tconst new_exprs = this.exprs.slice(0, index).concat(this.exprs.slice(index+1));\n\tif(new_exprs.length === 1)\n\t    return new_exprs[0];\n\telse return new SequenceExpr(new_exprs);\n    } */\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SequenceExpr(\n            this.exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents an expression enclosed in (flexible) left/right delimiters.\n// \\left( ... \\right)\n// If there is more than one inner_expr, they'll be separated with this.middle_type\n// e.g.: \\left( x \\middle| y \\right)\nclass DelimiterExpr extends Expr {\n    static parenthesize(expr) {\n        return new DelimiterExpr('(', ')', null, [expr]);\n    }\n\n    // Parenthesize 'expr' only if it's a low-precedence InfixExpr like 'x+y'.\n    static autoparenthesize(expr) {\n        if(expr.expr_type() === 'infix' && expr.needs_autoparenthesization())\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n\n    // Parenthesize 'expr' only if it's a \"fraction\", which could mean one of:\n    //   \\frac{x}{y}\n    //   x/y\n    //   \\left.x\\middle/\\right.  (as created by e.g. [,][\\])\n    static autoparenthesize_frac(expr) {\n        const needs_parenthesization = (\n            // \\frac{x}{y}\n            (expr.expr_type() === 'command' &&\n             expr.command_name === 'frac' &&\n             expr.operand_count() === 2) ||\n\n            // x/y\n            (expr.expr_type() === 'infix' && expr.operator_text() === '/') ||\n\n            // \\left.x\\middle/\\right.\n            (expr.expr_type() === 'delimiter' &&\n             expr.left_type === '.' &&\n             expr.middle_type === '/' &&\n             expr.right_type === '.')\n        );\n        if(needs_parenthesization)\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n    \n    constructor(left_type, right_type, middle_type, inner_exprs, fixed_size) {\n        super();\n        this.left_type = left_type;\n        this.right_type = right_type;\n        this.middle_type = middle_type || null;  // to avoid 'undefined's in the JSON\n\tthis.fixed_size = fixed_size || false;\n        this.inner_exprs = inner_exprs || [];\n    }\n\n    expr_type() { return 'delimiter'; }\n    json_keys() { return ['left_type', 'right_type', 'middle_type', 'inner_exprs']; }\n\n    emit_latex(emitter) {\n\tif(this.fixed_size)\n\t    this.emit_latex_fixed_size(emitter);\n\telse\n\t    this.emit_latex_flex_size(emitter);\n    }\n\n    emit_latex_flex_size(emitter) {\n        emitter.command('left');\n        emitter.text_or_command(this.left_type);\n        this.inner_exprs.forEach((expr, index) => {\n            if(index > 0) {\n                emitter.command('middle');\n                emitter.text_or_command(this.middle_type || '|');\n            }\n            emitter.expr(expr, index);\n        });\n        emitter.command('right');\n        emitter.text_or_command(this.right_type);\n    }\n\n    emit_latex_fixed_size(emitter) {\n\tif(this.left_type !== '.')\n\t    emitter.text_or_command(this.left_type);\n\tthis.inner_exprs.forEach((expr, index) => {\n\t    if(index > 0 && this.middle_type !== '.')\n\t\temitter.text_or_command(this.middle_type || '|');\n\t    emitter.expr(expr, index);\n\t});\n\tif(this.right_type !== '.')\n\t    emitter.text_or_command(this.right_type);\n    }\n\n    // Return a copy of this expression but with the given fixed_size flag.\n    as_fixed_size(fixed_size) {\n\treturn new DelimiterExpr(\n\t    this.left_type, this.right_type, this.middle_type,\n\t    this.inner_exprs, fixed_size);\n    }\n\n    // Return a version of this expression with the delimiters removed.\n    // For simple delimiter expressions, this just returns the wrapped expression.\n    // If there are multiple inner_exprs, this has to be \"faked\" by replacing the\n    // delimiters with blank ones.\n    without_delimiters() {\n        if(this.inner_exprs.length === 1)\n            return this.inner_exprs[0];\n        else return new DelimiterExpr(\n            '.', '.', this.middle_type,\n            this.inner_exprs, this.fixed_size);\n    }\n\n    to_json() {\n\tlet json = super.to_json();\n\tif(this.fixed_size) json.fixed_size = true;\n\treturn json;\n    }\n\n    visit(fn) {\n        fn(this);\n        this.inner_exprs.forEach(expr => expr.visit(fn));\n    }\n\n    subexpressions() { return this.inner_exprs; }\n\n    replace_subexpression(index, new_expr) {\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(\n\t\t(expr, expr_index) => expr_index === index ? new_expr : expr));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents a base expression with either a subscript or superscript, or both.\nclass SubscriptSuperscriptExpr extends Expr {\n    constructor(base_expr, subscript_expr, superscript_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.subscript_expr = subscript_expr;\n        this.superscript_expr = superscript_expr;\n    }\n\n    expr_type() { return 'subscriptsuperscript'; }\n    json_keys() { return ['base_expr', 'subscript_expr', 'superscript_expr']; }\n\n    emit_latex(emitter) {\n        // If the base_expr is a command, don't put it inside grouping braces.\n        // This accounts for attaching subscripts or superscripts to commands\n        // with arguments such as \\underbrace{xyz}_{abc}.\n        if(this.base_expr.expr_type() === 'command')\n            emitter.expr(this.base_expr, 0);\n        else\n            emitter.grouped_expr(this.base_expr, false, 0);\n\tlet subexpr_index = 1;\n        if(this.superscript_expr) {\n            emitter.text('^');\n            emitter.grouped_expr(this.superscript_expr, 'force_commands', subexpr_index);\n\t    subexpr_index++;\n        }\n        if(this.subscript_expr) {\n            emitter.text('_');\n            // 'force_commands' ensures that single LaTeX commands are still grouped, even\n            // though single-letter super/subscripts are still OK to leave ungrouped.\n            // e.g.: x^{\\sum} instead of x^\\sum, but x^2 is fine.\n            emitter.grouped_expr(this.subscript_expr, 'force_commands', subexpr_index);\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.base_expr.visit(fn);\n        if(this.subscript_expr) this.subscript_expr.visit(fn);\n        if(this.superscript_expr) this.superscript_expr.visit(fn);\n    }\n\n    subexpressions() {\n\tlet exprs = [this.base_expr];\n\tif(this.superscript_expr) exprs.push(this.superscript_expr);\n\tif(this.subscript_expr) exprs.push(this.subscript_expr);\n\treturn exprs;\n    }\n\n    // NOTE: the meaning of 'index' may vary depending on whether sub/superscript is populated.\n    replace_subexpression(index, new_expr) {\n\treturn new SubscriptSuperscriptExpr(\n\t    index === 0 ? new_expr : this.base_expr,\n\t    (index === 2 || (!this.superscript_expr && index === 1)) ? new_expr : this.subscript_expr,\n\t    (index === 1 && this.superscript_expr) ? new_expr : this.superscript_expr);\n    }\n\n/*    delete_subexpression(index) {\n\t// When deleting the base, we always have to just replace it with a blank.\n\tif(index === 0) return super.delete_subexpression(index);\n\t// Deleting the last remaining subscript or superscript decays into the base expression.\n\tif(index === 1 && (!this.subscript_expr || !this.superscript_expr))\n\t    return this.base_expr;\n\t// Otherwise, both subscript and superscript exist and we can delete one of them\n\t// and still have a SubscriptSuperscriptExpr.\n\treturn new SubscriptSuperscriptExpr(\n\t    this.base_expr,\n\t    index === 2 ? null : this.subscript_expr,\n\t    index === 1 ? null : this.superscript_expr);\n    }  */\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SubscriptSuperscriptExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.subscript_expr ? this.subscript_expr.substitute_expr(old_expr, new_expr) : null,\n            this.superscript_expr ? this.superscript_expr.substitute_expr(old_expr, new_expr) : null);\n    }\n\n    is_command_with_name(command_name) {\n        return this.base_expr.is_command_with_name(command_name);\n    }\n}\n\n\n// \\begin{bmatrix} ... etc\n// Currently supported \"array types\" are:\n//   matrices: bmatrix, Bmatrix, matrix, pmatrix, vmatrix, Vmatrix\n//   non-matrices (alignment environments): gathered, gather, cases, rcases, substack\nclass ArrayExpr extends Expr {\n    // Stack two ArrayExprs on top of each other.\n    // If there is an incompatibility such as mismatched column counts, null is returned.\n    static stack_arrays(expr1, expr2) {\n        if(expr1.column_count !== expr2.column_count)\n            return null;\n        return new ArrayExpr(\n            expr2.array_type,\n            expr1.row_count + expr2.row_count,\n            expr1.column_count,\n            expr1.element_exprs.concat(expr2.element_exprs),\n            expr1.row_separators.concat([null], expr2.row_separators),\n            expr2.column_separators);\n    }\n    \n    // split_mode:  (for placing alignment markers automatically for \"\\cases\" and such)\n    //    'none': do nothing, just put each entry_expr in its own row\n    //    'infix': place alignment markers before infix, if any\n    //    'colon': if there is a ':' infix, remove it and place alignment marker where it was\n    //    'colon_if': like 'colon', but place the word \"if\" before the right-hand side if there\n    //                is a ':' infix.  If there is no ':' infix, the right-hand side becomes 'otherwise'.\n    static split_elements(exprs, split_mode) {\n        return exprs.map(expr => ArrayExpr._split_expr(expr, split_mode));\n    }\n\n    // Split up 'expr' into separately-aligned 'columns'.\n    static _split_expr(expr, split_mode) {\n        switch(split_mode) {\n        case 'none':\n            return [expr];\n        case 'infix':\n            if(expr.expr_type() === 'infix') {\n\t\t// Left side will be the left \"side\" of the infix at its split_at_index point.\n                // Right side will be the right \"side\", but we have to insert a new initial \"fake\"\n                // blank operand to give it the right structure.\n\t\treturn [\n                    expr.extract_side_at(expr.split_at_index, 'left'),\n                    InfixExpr.combine_infix(\n                        TextExpr.blank(),\n                        expr.extract_side_at(expr.split_at_index, 'right'),\n                        expr.operator_exprs[expr.split_at_index])];\n\t    }\n            else\n                return [expr, null];\n        case 'colon':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [\n                    expr.extract_side_at(expr.split_at_index, 'left'),\n                    expr.extract_side_at(expr.split_at_index, 'right')];\n            else\n                return [expr, null];\n        case 'colon_if':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [\n                    expr.extract_side_at(expr.split_at_index, 'left'),\n                    Expr.combine_pair(\n                        Expr.combine_pair(\n                            new CommandExpr('mathrm', [new TextExpr('if')]),\n                            new CommandExpr('enspace'), []),\n                        expr.extract_side_at(expr.split_at_index, 'right'))];\n            else return [\n                expr,\n                new CommandExpr('mathrm', [new TextExpr('otherwise')])];\n        default:\n            return [expr];\n        }\n    }\n\n    // element_exprs is a nested array of length 'row_count', each of which is\n    // an array of 'column_count' Exprs.\n    // row_separators and column_separators can either be null or an array of N-1\n    // items (where N is the row or column count respectively).  Each item can be\n    // one of: [null, 'solid', 'dashed'] indicating the type of separator to put\n    // between the corresponding row or column.\n    constructor(array_type, row_count, column_count, element_exprs,\n                row_separators, column_separators) {\n        super();\n        this.array_type = array_type;\n        this.row_count = row_count;\n        this.column_count = column_count;\n        this.element_exprs = element_exprs;\n        this.row_separators = row_separators || new Array(row_count-1).fill(null);\n        this.column_separators = column_separators || new Array(column_count-1).fill(null);\n    }\n\n    expr_type() { return 'array'; }\n    json_keys() { return ['array_type', 'row_count', 'column_count']; }\n\n    is_matrix() {\n        const t = this.array_type;\n        // TODO: t.endsWith('matrix')?\n        return (t === 'bmatrix' || t === 'Bmatrix' || t === 'matrix' ||\n                t === 'pmatrix' || t === 'vmatrix' || t === 'Vmatrix');\n    }\n\n    // Return a copy of this expression but with a different array_type (e.g. 'pmatrix').\n    // is_matrix() should be true before calling this.\n    with_array_type(new_array_type) {\n        return new ArrayExpr(\n            new_array_type, this.row_count, this.column_count,\n            this.element_exprs, this.row_separators, this.column_separators);\n    }\n\n    as_bold() {\n        return new ArrayExpr(\n            this.array_type,\n            this.row_count,\n            this.column_count,\n            this.element_exprs.map(row_exprs => row_exprs.map(expr => expr.as_bold())),\n            this.row_separators,\n            this.column_separators);\n    }\n\n    to_json() {\n        let json = super.to_json();\n        json.element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(expr => expr.to_json()));\n        // Don't emit row/column separators if they are all turned off (to keep the JSON smaller).\n        if(!this.row_separators.every(s => s === null))\n            json.row_separators = this.row_separators;\n        if(!this.column_separators.every(s => s === null))\n            json.column_separators = this.column_separators;\n        return json;\n    }\n\n    // Return a new ArrayExpr like this one, but with ellipses inserted before the\n    // last row and column, and along the diagonal.\n    // NOTE: is_matrix() should be true before calling this.\n    // NOTE: this does not preserve column/row separators.  There's not really a\n    // consistent way of doing this automatically.\n    with_ellipses() {\n        const make_cell = content => new TextExpr(content);\n        let new_row_count = this.row_count, new_column_count = this.column_count;\n        let new_element_exprs;\n        if(this.column_count > 1) {\n            new_element_exprs = this.element_exprs.map((row_exprs, index) => [\n                ...row_exprs.slice(0, -1),\n                make_cell((index === 0 || index === this.row_count-1) ? \"\\\\cdots\" : ''),\n                row_exprs[this.column_count-1]\n            ]);\n            new_column_count++;\n        }\n        else\n            new_element_exprs = [...this.element_exprs];\n        if(this.row_count > 1) {\n            let inserted_row_exprs = [make_cell(\"\\\\vdots\")];\n            for(let i = 0; i < this.column_count-2; i++)\n                inserted_row_exprs.push(make_cell(''));\n            if(this.column_count > 1)\n                inserted_row_exprs.push(make_cell(\"\\\\ddots\"), make_cell(\"\\\\vdots\"));\n            new_element_exprs.splice(this.row_count-1, 0, inserted_row_exprs);\n            new_row_count++;\n        }\n        // TODO: preserve row/column separators\n        return new ArrayExpr(this.array_type, new_row_count, new_column_count, new_element_exprs);\n    }\n\n    // Return a new ArrayExpr with rows and columns interchanged.\n    // NOTE: is_matrix() should be true before calling this.\n    transposed() {\n        let new_element_exprs = [];\n        for(let i = 0; i < this.column_count; i++)\n            new_element_exprs.push(this.element_exprs.map(\n                row_exprs => this._transpose_cell(row_exprs[i])));\n        return new ArrayExpr(\n            this.array_type, this.column_count, this.row_count, new_element_exprs,\n            this.column_separators, this.row_separators);\n    }\n\n    // When transposing a matrix, we generally want to flip vertical and horizontal ellipses\n    // within the cells.\n    _transpose_cell(cell_expr) {\n        if(cell_expr.expr_type() === 'text') {\n            switch(cell_expr.text) {\n            case \"\\\\vdots\": return new TextExpr(\"\\\\cdots\");\n            case \"\\\\cdots\": return new TextExpr(\"\\\\vdots\");\n            default: break;\n            }\n        }\n        return cell_expr;\n    }\n\n    // Return an array of 1xN ArrayExprs, one for each row in this matrix.\n    split_rows() {\n        return this.element_exprs.map(\n            row_exprs => new ArrayExpr(\n                this.array_type, 1, this.column_count, [row_exprs],\n                this.column_separators, null));\n    }\n\n    // Return a copy with a changed row or column separator at the specified location.\n    // 'index'=0 means right after the first row or column.\n    // 'index'=null means apply separators to ALL rows or columns.\n    // 'type' is one of: [null, 'solid', 'dashed'].\n    // If 'toggle' is true, that indicates that if the current separator is already\n    // of the requested type, the separator will be turned off instead.\n    with_separator(is_column, index, type, toggle) {\n        const row_separators = [...this.row_separators];\n        const column_separators = [...this.column_separators];\n        const separators = is_column ? column_separators : row_separators;\n        const size = is_column ? this.column_count : this.row_count;\n        if(index === null) {\n            if(toggle && separators.every(s => s === type))\n                type = null;\n            for(let i = 0; i < size-1; i++)\n                separators[i] = type;\n        }\n        else {\n            if(index < 0 || index >= size-1)\n                return this;  // out of bounds\n            if(toggle && separators[index] === type)\n                type = null;\n            separators[index] = type;\n        }\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, this.element_exprs,\n            row_separators, column_separators);\n    }\n\n    emit_latex(emitter) {\n        // Matrices with row or column separators require special handling in LaTeX.\n        if(this.is_matrix() &&\n           !(this.column_separators.every(s => s === null) &&\n             this.row_separators.every(s => s === null)))\n            return this._emit_array_with_separators(emitter);\n\tlet subexpr_index = 0;\n        if(this.array_type === 'substack')  // substack is a special case here\n            emitter.text(\"\\\\substack{\\n\");\n        else\n            emitter.begin_environment(this.array_type);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0)\n                emitter.row_separator();\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr, subexpr_index);  // should always be true\n\t\tsubexpr_index++;\n            });\n        });\n        if(this.array_type === 'substack')\n            emitter.text(\"}\");\n        else\n            emitter.end_environment(this.array_type);\n    }\n\n    // This is a matrix with at least one column separator specified.\n    // Unfortunately, with LaTeX/KaTeX, the {array} environment has to be used\n    // which doesn't support the surrounding matrix delimiters, so we have to\n    // explicitly put out the delimiters here.  But this also throws off the matrix\n    // spacing - \\kern is used to compensate for that.  But the spacing after \\kern\n    // is too small to accomodate horizontal rules (row separators) so if those are\n    // present, the (default) larger spacing is used.\n    _emit_array_with_separators(emitter) {\n        // Determine which delimiters to explicitly emit based on the matrix type.\n        let left_delim = null, right_delim = null;\n        switch(this.array_type) {\n        case 'bmatrix': left_delim = '['; right_delim = ']'; break;\n        case 'Bmatrix': left_delim = \"\\\\{\"; right_delim = \"\\\\}\"; break;\n        case 'matrix': left_delim = null; right_delim = null; break;\n        case 'pmatrix': left_delim = '('; right_delim = ')'; break;\n        case 'vmatrix': left_delim = right_delim = '|'; break;\n        case 'Vmatrix': left_delim = right_delim = \"\\\\Vert\"; break;\n        default: break;\n        }\n\n        // Assemble the LaTeX column separator \"specification\" string\n        // (the {c:c:c} part in: \\begin{array}{c:c:c}).\n        let pieces = ['{'];\n        for(let i = 0; i < this.column_count; i++) {\n            pieces.push('c');  // centered (only mode that's supported currently)\n            if(i < this.column_count-1) {\n                const s = this.column_separators[i];\n                if(s === 'solid') pieces.push('|');\n                else if(s === 'dashed') pieces.push(':');\n            }\n        }\n        pieces.push('}');\n        const column_layout_string = pieces.join('');\n\n        if(left_delim) {\n            emitter.command('left');\n            emitter.text_or_command(left_delim);\n        }\n        const has_row_separators = !this.row_separators.every(s => s === null);\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        emitter.begin_environment('array', column_layout_string);\n\tlet subexpr_index = 0;\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0) {\n                emitter.row_separator();\n                const separator = this.row_separators[row_index-1];\n                if(separator) {\n                    if(separator === 'solid') emitter.command('hline')\n                    else if(separator === 'dashed') emitter.command('hdashline');\n                    emitter.text(\"\\n\");\n                }\n            }\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr, subexpr_index);  // should always be true\n\t\tsubexpr_index++;\n            });\n        });\n        emitter.end_environment('array');\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        if(right_delim) {\n            emitter.command('right');\n            emitter.text_or_command(right_delim);\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.element_exprs.forEach(\n            row_exprs => row_exprs.forEach(expr => expr.visit(fn)));\n    }\n\n    subexpressions() {\n\t// Flatten element expressions in row-major order.\n\treturn [].concat(...this.element_exprs);\n    }\n\n    replace_subexpression(index, new_expr) {\n\tconst column = index % this.column_count;\n\tconst row = Math.floor((index - column) / this.column_count);  // floor() is not strictly needed\n\tconst new_element_exprs = this.element_exprs.map(\n\t    (row_exprs, row_index) => row_exprs.map(\n\t\t(expr, col_index) => (row_index === row && col_index === column) ? new_expr : expr));\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, new_element_exprs,\n            this.row_separators, this.column_separators);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        const new_element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(\n                expr => expr.substitute_expr(old_expr, new_expr)));\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, new_element_exprs,\n            this.row_separators, this.column_separators);\n    }\n}\n\n\n// Represents an entry in the stack or document.\nclass Item {\n    // Used for React collection keys.  Each entry in a React component list is\n    // supposed to have a unique ID.\n    // NOTE: iOS Safari doesn't seem to like static variables like this?\n    // As a workaround, this will be initialized after the class definition instead.\n    //static serial_number = 1;\n    static next_serial() { return Item.serial_number++; }\n\n    static from_json(json) {\n        switch(json.item_type) {\n        case 'expr':\n            return new ExprItem(\n                Expr.from_json(json.expr),\n                json.tag_expr ? Expr.from_json(json.tag_expr) : null);\n        case 'text':\n            return new TextItem(\n                json.elements.map(element_json => TextItemElement.from_json(element_json)),\n                !!json.is_heading);\n\tcase 'code':\n\t    return new CodeItem(json.language, json.source);\n        default:\n            return TextItem.from_string('invalid item type ' + json.item_type);\n        }\n    }\n\n    constructor() {\n        this.serial = Item.next_serial();\n    }\n\n    react_key(prefix) { return prefix + '_' + this.serial; }\n\n    // Subclasses need to override these:\n    item_type() { return '???'; }\n    to_json() { return {}; }\n    to_text() { return '???'; }\n\n    // Return a new Item of the same type and contents (shallow copy) but with a new serial_number.\n    // This is mainly needed for React, which needs a distinct React key for each item in\n    // a list (like the list of stack items).  Things like 'dup' that can duplicate objects\n    // need to make sure to use clone() so that every Item in the stack/document is distinct.\n    clone() { return null; }\n}\n\n// iOS Safari workaround\nItem.serial_number = 1;\n\n\n// Represents a math expression (Expr instance) in the stack or document.\nclass ExprItem extends Item {\n    // tag_expr is an optional tag shown to the right of the item.\n    // selected_expr_path is an optional ExprPath object; the indicated subexpression(s)\n    //     will be highlighted in a \"selected\" style by the renderer.\n    constructor(expr, tag_expr, selected_expr_path) {\n        super()\n        this.expr = expr;\n        this.tag_expr = tag_expr;\n\tthis.selected_expr_path = selected_expr_path;\n    }\n\n    item_type() { return 'expr'; }\n\n    to_latex() {\n\treturn this.expr.to_latex(this.selected_expr_path);\n    }\n    \n    to_json() {\n        let json = {item_type: 'expr', expr: this.expr.to_json()};\n        if(this.tag_expr) json.tag_expr = this.tag_expr.to_json();\n        return json;\n    }\n\n    to_text() { return this.expr.to_text(); }\n    clone() { return new ExprItem(this.expr, this.tag_expr); }\n    as_bold() { return new ExprItem(this.expr.as_bold(), this.tag_expr); }\n}\n\n\n// A TextItem contains a list of TextItemElement subclass instances.\n//   - TextItemExprElement - wraps a Expr object to be rendered inline with the text\n//   - TextItemTextElement - a string of text to be rendered as \\text{...} command(s)\n//   - TextItemRawElement - a string of text to be rendered directly (mostly a special\n//     case to support combining math and text with infix operators)\nclass TextItemElement {\n    static from_json(json) {\n        if(json.expr)\n            return new TextItemExprElement(Expr.from_json(json.expr));\n        else if(json.text)\n            return new TextItemTextElement(json.text, !!json.is_bold, !!json.is_italic);\n        else\n            return new TextItemRawElement(json.raw);\n    }\n\n    is_text() { return false; }\n    is_expr() { return false; }\n    is_raw() { return false; }\n}\n\n\nclass TextItemTextElement extends TextItemElement {\n    // Bold/italic fonts are handled specially for text items.\n    // Within a \\text{...}, bold and italic are switched on and off\n    // via \\bf{}, \\it{}, and \\rm{} commands.\n    // Currently bold and italic at once is not supported.\n    constructor(text, is_bold, is_italic) {\n        super();\n        this.text = text;\n        this.is_bold = !!is_bold;\n        this.is_italic = !!is_italic;\n    }\n\n    is_text() { return true; }\n    as_bold() { return new TextItemTextElement(this.text, true); }\n\n    to_json() {\n        let json = { 'text': this.text };\n        if(this.is_bold) json.is_bold = true;\n        if(this.is_italic) json.is_italic = true;\n        return json;\n    }\n\n    to_text() {\n        if(this.is_bold)\n            return ['**', this.text, '**'].join('');\n        else if(this.is_italic)\n            return ['//', this.text, '//'].join('');\n        else\n            return this.text;\n    }\n\n    to_latex() {\n        // This is a little messy because of how KaTeX handles line breaks.\n        // Normally, breaks are only allowed after operators like +, but when\n        // rendering TextItems, we want to allow breaks after each word.\n        // As a workaround, a separate \\text{...} command is created for each\n        // word followed by \\allowbreak commands.  \\allowbreak does not work\n        // inside the actual \\text{...}, otherwise we could presumably just output\n        // \\text{word1\\allowbreak word2\\allowbreak}.\n        const tokens = this.text.split(/ +/);\n        let pieces = [];\n        for(let i = 0; i < tokens.length; i++) {\n            pieces.push(\"\\\\text{\");\n            if(this.is_bold)\n                pieces.push(\"\\\\bf{}\");\n            else if(this.is_italic)\n                pieces.push(\"\\\\it{}\");\n            pieces.push(this._latex_escape(tokens[i]));\n            if(i < tokens.length-1)\n                pieces.push(' ');  // preserve spacing between words\n            pieces.push(\"}\\\\allowbreak \");\n        }\n        return pieces.join('');\n    }\n\n    // Special escape sequences are needed within \\text{...} commands.\n    // This is a quirk of TeX/LaTeX.\n    _latex_escape(text) {\n        // TODO: make this table a global (or switch statement) so it doesn't constantly get remade\n        const replacements = {\n            '_': \"\\\\_\",\n            '^': \"\\\\textasciicircum\",\n            '%': \"\\\\%\",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\textasciitilde\",\n            \"\\\\\": \"\\\\textbackslash \"\n        };\n        return text.replaceAll(/[_^%$&#}{~\\\\]/g, match => replacements[match]);\n    }\n}\n\nclass TextItemExprElement extends TextItemElement {\n    constructor(expr) { super(); this.expr = expr; }\n    is_expr() { return true; }\n    as_bold() { return new TextItemExprElement(this.expr.as_bold()); }\n    to_json() { return { 'expr': this.expr.to_json() }; }\n    to_text() { return '$' + this.expr.to_latex() + '$'; }\n    to_latex() { return this.expr.to_latex(); }\n}\n\n\n// Represents a \"raw\" piece of LaTeX text (similar to TextExpr) within a TextItem.\n// This is used for things like combining a TextItem and ExprItem with an infix operator.\n// TextItemTextElement can't be used for the infix itself because we don't want to wrap it\n// in a \\text{...} and we don't want to escape the operator's actual LaTeX command.\nclass TextItemRawElement extends TextItemElement {\n    constructor(string) { super(); this.string = string; }\n    is_raw() { return true; }\n    as_bold() { return this; }\n    to_json() { return { 'raw': this.string }; }\n    to_text() { return this.string; }\n    to_latex() { return this.string; }\n    is_explicit_space() { return this.string === \"\\\\,\"; }\n}\n\n\nclass TextItem extends Item {\n    static from_expr(expr) { return new TextItem([new TextItemExprElement(expr)]); }\n    static from_string(string) { return new TextItem([new TextItemTextElement(string)]); }\n    static empty_item() { return new TextItem([], true); }\n\n    // \"Parse\" a string which may or may not contain certain escape sequences:\n    //    [] - converts into a TextItemExprElement wrapping a PlaceholderExpr\n    //    **bold text** - converts into a bolded TextItemTextElement\n    //    //italic text// - converts into an italic TextItemTextElement\n    // The result is returned as an array of TextItemElement subclass instances.\n    static parse_string(s) {\n        // First handle [] placeholders.\n        // Note that we don't allow bold/italic to straddle []'s, for example\n        // \"text **text [] text** text\" will drop the bolding.\n        const pieces = s.split('[]');\n        let elements = [];\n        // Handle **bold** within each piece between []'s.\n        for(let i = 0; i < pieces.length; i++) {\n            const pieces2 = pieces[i].split('**');\n            for(let j = 0; j < pieces2.length; j++) {\n                // Every odd-index piece2 is to be bolded; but if the total number of pieces\n                // is even that means there is an unpaired **, so that last odd piece stays unbolded.\n                const is_bold = (j % 2 === 1) && (j < pieces2.length-1);\n                if(pieces2[j].length > 0) {\n                    // Handle //italic// within each of these sub-pieces using similar logic,\n                    // but only if the sub-piece is not already bolded (can't be both at once).\n                    if(is_bold)\n                        elements.push(new TextItemTextElement(pieces2[j], is_bold));\n                    else {\n                        const pieces3 = pieces2[j].split('//');\n                        for(let k = 0; k < pieces3.length; k++) {\n                            const is_italic = (k % 2 === 1) && (k < pieces3.length-1);\n                            if(pieces3[k].length > 0)\n                                elements.push(new TextItemTextElement(pieces3[k], false, is_italic));\n                        }\n                    }\n                }\n            }\n            if(i < pieces.length-1)\n                elements.push(new TextItemExprElement(new PlaceholderExpr()));\n        }\n        return new TextItem(elements);\n    }\n    \n    // item1/2 can each be TextItems or ExprItems.\n    static concatenate_items(item1, item2, separator_text) {\n        if(item1.item_type() === 'expr') item1 = TextItem.from_expr(item1.expr);\n        if(item2.item_type() === 'expr') item2 = TextItem.from_expr(item2.expr);\n        const elements = item1.elements.concat(\n            separator_text ? [new TextItemRawElement(separator_text)] : [],\n            item2.elements);\n        // Coalesce adjacent elements.  Rules are:\n        //   - Adjacent TextElements are concatenated directly as long as their\n        //     is_bold and is_italic flags match.\n        //   - A RawElement representing an explicit space character (\\,) is absorbed into an\n        //     adjacent TextElement as a normal space character (this is to make the spacing\n        //     less weird when attaching a text and expression via an infix space).\n        let merged_elements = [elements[0]];\n        for(let i = 1; i < elements.length; i++) {\n            const last_index = merged_elements.length-1;\n            const last_merged_element = merged_elements[last_index];\n            if(last_merged_element.is_text() && elements[i].is_text() &&\n               last_merged_element.is_bold === elements[i].is_bold &&\n               last_merged_element.is_italic === elements[i].is_italic) {\n                // Two adjacent TextElements with the same is_bold/is_italic flags.\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + elements[i].text,\n                    elements[i].is_bold, elements[i].is_italic);\n            }\n            else if(last_merged_element.is_raw() && last_merged_element.is_explicit_space() &&\n                    elements[i].is_text()) {\n                // raw space + TextElement\n                merged_elements[last_index] = new TextItemTextElement(\n                    ' ' + elements[i].text,\n                    elements[i].is_bold, elements[i].is_italic);\n            }\n            else if(last_merged_element.is_text() &&\n                    elements[i].is_raw() && elements[i].is_explicit_space()) {\n                // TextElement + raw space\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + ' ',\n                    last_merged_element.is_bold, last_merged_element.is_italic);\n            }\n            else {\n                // Any other combinations are left alone.\n                merged_elements.push(elements[i]);\n            }\n        }\n        return new TextItem(merged_elements, item1.is_heading || item2.is_heading);\n    }\n\n    constructor(elements, is_heading) {\n        super();\n        this.elements = elements;\n        this.is_heading = !!is_heading;\n    }\n\n    item_type() { return 'text'; }\n\n    to_json() {\n        let json = {\n            item_type: 'text',\n            elements: this.elements.map(element => element.to_json())\n        };\n        // avoid lots of useless is_heading: false in the JSON\n        if(this.is_heading) json.is_heading = true;\n        return json;\n    }\n\n    // Empty TextItems are displayed as \"separator lines\" (visually, the underlined part\n    // of an ordinary section header).  Currently empty TextItems can only be created by\n    // the ['][=] command, and they are always created with is_heading=true.\n    // There is a slight corner case here if is_header flag is turned off via [/][\"].\n    // That case \"should\" display as a truly empty item, but for now we avoid this by\n    // just disallowing turning off the is_header flag in [/][\"] (do_toggle_is_heading).\n    is_empty() { return this.elements.length === 0; }\n\n    to_text() {\n\tif(this.is_empty())\n\t    return \"\\\\rule\";\n\telse\n\t    return this.elements.map(element => element.to_text()).join('');\n    }\n    \n    to_latex() { return this.elements.map(element => element.to_latex()).join(''); }\n\n    clone() { return new TextItem(this.elements, this.is_heading); }\n\n    // If this TextItem is simple enough, return a string representation suitable\n    // for editing using the minieditor.  \"Simple enough\" currently means that there\n    // are no Exprs mixed into the text, with the exception of PlaceholderExprs which are\n    // rendered as [].  Bold flags are stripped from the text as well.\n    // If this TextItem is not simple, null is returned indicating that it's\n    // \"uneditable\" with the minieditor.\n    as_editable_string() {\n\tlet pieces = [];\n\tfor(let i = 0; i < this.elements.length; i++) {\n\t    const elt = this.elements[i];\n\t    if(elt.is_text())\n\t\tpieces.push(elt.to_text());\n\t    else if(elt.is_raw()) {\n\t\t// Only basic \"explicit spaces\" are allowed; otherwise it's\n\t\t// probably a LaTeX command.\n\t\tif(elt.is_explicit_space())\n\t\t    pieces.push(' ');\n\t\telse return null;\n\t    }\n\t    else if(elt.is_expr()) {\n\t\t// Only top-level PlaceholderExprs are allowed.\n\t\tif(elt.expr.expr_type() === 'placeholder')\n\t\t    pieces.push('[]');\n\t\telse return null;\n\t    }\n\t}\n\treturn pieces.join('');\n    }\n\n    // Return a clone of this with all elements bolded.\n    as_bold() {\n        return new TextItem(\n            this.elements.map(element => element.as_bold()),\n            this.is_heading);\n    }\n\n    // If there is any PlaceholderExpr among the elements in this TextItem, substitute\n    // the first one for substitution_expr and return the new TextItem.\n    // If there are no PlaceholderExprs available, return null.\n    try_substitute_placeholder(substitution_expr) {\n        let new_elements = [...this.elements];\n        for(let i = 0; i < new_elements.length; i++) {\n            if(new_elements[i].is_expr()) {\n                const placeholder_expr = new_elements[i].expr.find_placeholder();\n                if(placeholder_expr) {\n                    const new_expr = new_elements[i].expr.substitute_expr(placeholder_expr, substitution_expr);\n                    new_elements[i] = new TextItemExprElement(new_expr);\n                    return new TextItem(new_elements, this.is_heading);\n                }\n            }\n        }\n        return null;\n    }\n}\n\n\nclass CodeItem extends Item {\n    static from_latex_string(s) { return new CodeItem('latex', s); }\n\n    constructor(language, source) {\n\tsuper();\n\tthis.language = language;\n\tthis.source = source;\n    }\n\n    item_type() { return 'code'; }\n\n    to_json() {\n\treturn {\n\t    item_type: 'code',\n\t    language: this.language,\n\t    source: this.source\n\t};\n    }\n\n    to_latex() { return '???'; }\n\n    clone() { return new CodeItem(this.language, this.source); }\n\n    as_bold() { return this.clone(); }\n}\n\n\n// NOTE: All stack operations return a new Stack with the modified\n// items, leaving the original untouched.\nclass Stack {\n    static from_json(json) {\n        return new Stack(\n            json.items.map(item_json => Item.from_json(item_json)));\n    }\n    \n    constructor(items) { this.items = items; }\n\n    depth() { return this.items.length; }\n    check(n) { return this.depth() >= n; }\n\n    // Check that at least n items are available and that they are all ExprItems\n    check_exprs(n) {\n        if(!this.check(n)) return false;\n        for(let i = 0; i < n; i++)\n            if(this.items[this.items.length-1-i].item_type() !== 'expr')\n                return false;\n        return true;\n    }\n\n    // Fetch item at position n (stack top = 1, next = 2, etc)\n    peek(n) {\n        if(!this.check(1)) this.underflow();\n        return this.items[this.items.length - n];\n    }\n\n    // Returns [new_stack, item1, item2, ...]\n    pop(n) {\n        if(n === undefined) n = 1;\n        if(!this.check(n)) this.underflow();\n        return this._unchecked_pop(n);\n    }\n\n    // Like pop(n) but all the items have to be ExprItems, and the wrapped Expr\n    // instances are returned, not the ExprItems.\n    pop_exprs(n) {\n        if(!this.check(n)) this.underflow();\n        if(!this.check_exprs(n)) this.type_error();\n        const [new_stack, ...items] = this._unchecked_pop(n);\n        return [new_stack, ...items.map(item => item.expr)];\n    }\n\n    pop_arrays(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array'))\n            return [new_stack, ...exprs];\n        else this.type_error();\n    }\n\n    pop_matrices(n) {\n        const [new_stack, ...array_exprs] = this.pop_arrays(n);\n        if(array_exprs.every(expr => expr.is_matrix()))\n            return [new_stack, ...array_exprs];\n        else this.type_error();\n    }\n\n    _unchecked_pop(n) {\n        return [new Stack(this.items.slice(0, -n))].concat(this.items.slice(-n));\n    }\n    \n    push_all(items) {\n        if(!items.every(item => item instanceof Item))\n            throw new Error('pushing invalid item onto stack');\n        return new Stack(this.items.concat(items));\n    }\n    \n    push_all_exprs(exprs) { return this.push_all(exprs.map(expr => new ExprItem(expr))); }\n    push(item) { return this.push_all([item]); }\n    push_expr(expr) { return this.push_all_exprs([expr]); }\n\n    // Return a new Stack with cloned copies of all the items.\n    // The cloned items will have new React IDs, which will force a re-render of the items.\n    // This is used for things like changing between display and inline math mode, where\n    // the item content doesn't change but the way it's rendered does.\n    clone_all_items() { return new Stack(this.items.map(item => item.clone())); }\n\n    underflow() { throw new Error('stack_underflow'); }\n    type_error() { throw new Error('stack_type_error'); }\n\n    to_json() {\n        return {\n            object_type: 'stack',\n            items: this.items.map(item => item.to_json())\n        };\n    }\n}\n\n\n// NOTE: Like Stack, all Document operations are non-destructive and return a new\n// Document reflecting the changes.\nclass Document {\n    static from_json(json) {\n        return new Document(\n            json.items.map(item_json => Item.from_json(item_json)),\n            json.selection_index || 0);\n    }\n\n    // NOTE: selection_index can be in the range 0..items.length (inclusive).\n    constructor(items, selection_index) {\n        this.items = items || [];\n        this.selection_index = selection_index;\n    }\n\n    selected_item() {\n        if(this.selection_index > 0)\n            return this.items[this.selection_index-1];\n        else\n            return null;\n    }\n\n    // Insert a new item below the current selection, and select the inserted item.\n    // Returns a modified Document; does not alter this one.\n    insert_item(new_item) {\n        const index = this.selection_index;\n        const new_items = this.items.slice(0, index).concat([new_item], this.items.slice(index));\n        return new Document(new_items, index+1);\n    }\n\n    // Return the new Document if the selection was deleted successfully.\n    // Selects the item that was before this one (or select the 'document top' if this was the first).\n    // Return null if the selection is \"invalid\" (e.g., empty document).\n    delete_selection() {\n        const index = this.selection_index;\n        if(index > 0) {\n            const new_items = this.items.slice(0, index-1).concat(this.items.slice(index));\n            return new Document(new_items, index-1);\n        }\n        else\n            return null;\n    }\n\n    move_selection_by(offset) {\n        let new_index = this.selection_index + offset;\n        if(new_index < 0) new_index = 0;\n        if(new_index > this.items.length) new_index = this.items.length;\n        return new Document(this.items, new_index);\n    }\n\n    // If there is a current selection, move it by the given offset.\n    // Returns the changed document if anything was done.\n    shift_selection_by(offset) {\n        const item = this.selected_item();\n        if(!item ||\n           this.selection_index + offset <= 0 ||\n           this.selection_index + offset > this.items.length)\n            return null;\n        else\n            return this.delete_selection().move_selection_by(offset).insert_item(item);\n    }\n\n    // See Stack.clone_all_items()\n    clone_all_items() {\n        return new Document(this.items.map(item => item.clone()), this.selection_index);\n    }\n\n    to_json() {\n        return {\n            object_type: 'document',\n            items: this.items.map(item => item.to_json()),\n            selection_index: this.selection_index\n        };\n    }\n\n    to_text() {\n        return this.items.map(item => item.to_text()).join(\"\\n\\n\");\n    }\n}\n\n\nexport {\n    Keymap, Settings, AppState, UndoStack, DissectUndoStack,\n    DocumentStorage, ImportExportState, FileManagerState,\n    ExprPath, Expr, CommandExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    Item, ExprItem, TextItem, CodeItem,\n    Stack, Document\n};\n\n","\nimport {\n    AppState, Document, Stack, DissectUndoStack,\n    ExprPath, Expr, CommandExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    ExprItem, TextItem, CodeItem\n} from './Models';\n\n\n// Holds context for the text entry mode line editor (InputContext.text_entry).\n// Fields:\n// 'mode': Type of text entry currently being performed.\n//         (these strings also correspond to the InputContext mode).\n//     'text_entry': [\"] - text entry will become a TextItem (a section heading if Shift+Enter is used)\n//     'math_text_entry': [\\] - text entry will become a ExprItem with either normal italic math text\n//         (if Enter is used) or \\mathrm roman math text (if Shift+Enter)\n//     'latex_entry': [\\][\\] - text entry will become a ExprItem with an arbitrary LaTeX command\n// 'text': The string to be edited (editing is done non-destructively).\n// 'edited_item': If this is set, this is the Item that is currently being edited.\n//      While it's being edited, it doesn't exist on the stack and is temporarily held here.\n//      If the editor is cancelled, this item will be placed back on the stack.\n// 'cursor_position':\n//     0: for beginning of string,\n//     text.length: after end of string (the usual case)\nclass TextEntryState {\n    constructor(mode, text, edited_item) {\n        this.mode = mode;\n        this.current_text = text || '';\n        this.cursor_position = this.current_text.length;\n        this.edited_item = edited_item;\n    }\n\n    is_empty() {\n        return this.current_text.length === 0;\n    }\n\n    insert(s) {\n        this.current_text = [\n            this.current_text.slice(0, this.cursor_position),\n            s,\n            this.current_text.slice(this.cursor_position)].join('');\n        this.cursor_position++;\n    }\n\n    backspace() {\n        if(this.cursor_position > 0) {\n            this.cursor_position--;\n            this.current_text = [\n                this.current_text.slice(0, this.cursor_position),\n                this.current_text.slice(this.cursor_position+1)].join('');\n        }\n    }\n\n    left() {\n        if(this.cursor_position > 0)\n            this.cursor_position--;\n    }\n\n    right() {\n        if(this.cursor_position < this.current_text.length)\n            this.cursor_position++;\n    }\n}\n\n\n// This acts as a sort of extension to the main App component.\n// TODO: rename -> EditorActions or something\nclass InputContext {\n    constructor(app_component, settings) {\n        this.app_component = app_component;\n        this.settings = settings;\n\n        // Current keymap mode.\n        this.mode = 'base';\n\n        // do_* actions can set this to switch into a new mode after the action (see switch_to_mode()).\n        this.new_mode = null;\n\n        // do_* actions can set this to update the document state.\n        this.new_document = null;\n        \n        this.files_changed = false;\n        this.file_saved = false;\n\n        // If set, this will be displayed as a transient notification in\n        // the stack area.  Cleared after every keypress.\n        this.notification_text = null;\n\n        // Special indicator to help control the undo stack:\n        //    null - save state to undo stack after this action as normal\n        //    'undo' - request an undo\n        //    'redo' - request a redo of saved undo states\n        //    'suppress' - perform action as normal, but don't save state to the undo state\n        //                 (used for 'minor' actions that don't warrant undo tracking)\n        //    'clear' - undo stack will be reset (e.g. when loading a new document)\n        this.perform_undo_or_redo = null;\n\n        // Current prefix argument for commands like Swap; can be one of:\n        //   null - no current prefix argument\n        //   >= 1 - normal prefix argument\n        //   -1   - \"all\" prefix argument (apply to all available items)\n        // Prefix arguments are cleared after any normal command is executed\n        // or if there's an error.  \"Normal\" command means anything that's not\n        // another prefix argument key.\n        this.prefix_argument = null;\n\n        // do_* actions can set this to true to keep the prefix_argument from being reset after the action.\n        this.preserve_prefix_argument = false;\n\n        // If non-null, text-entry mode is active and the entry line will appear at the\n        // bottom of the stack panel.  this.text_entry will be a TextEntryState object.\n        this.text_entry = null;\n\n        // Tracks multi-part custom_delimiters commands.\n        this.custom_delimiters = {};\n\n        // When in \"dissect\" mode, this is a specialized DissectUndoStack\n        // that only tracks modifications to the stack top item being edited.\n        this.dissect_undo_stack = null;\n    }\n\n    // Returns [was_handled, new_app_state]\n    // NOTE: was_handled just indicates that a keybinding was found; it doesn't necessarily mean\n    // that the command succeeded without error.\n    handle_key(app_state, key) {\n        if(key === 'Shift' || key === 'Alt' || key === 'Control')\n            return [false, app_state];\n\n        // If the popup panel is active, always use its dedicated keymap.\n        const effective_mode = this.settings.popup_mode || this.mode;\n        const command = this.settings.current_keymap.lookup_binding(effective_mode, key);\n        if(command) {\n            this.last_keypress = key;\n            const new_app_state = this.process_command(command, app_state);\n            return [true, new_app_state || app_state];\n        }\n        else\n            return [false, app_state];\n    }\n\n    // Returns the new AppState, or null if anything failed.\n    process_command(command, app_state) {\n        // Command strings are of the form:\n        //   'piece1;piece2;piece3'\n        // where the pieces are subcommands to be executed as a batch.\n        // Each piece in turn is a space-separated list where the first item\n        // is the command name and the remainder are arguments to the command.\n        // To put a literal semicolon into a command, write out 'semicolon'.\n        const commands = command.split(';').map(\n            piece => piece.split(' ').map(\n                token => token.replaceAll('semicolon', ';')));\n        return this.process_command_batch(commands, app_state);\n    }\n\n    // Process a batch of commands as a unit, returning the new AppState (or null if any of them failed).\n    // Each command is of the form [command_name, param1, param2, ...]\n    process_command_batch(commands, app_state) {\n        this.perform_undo_or_redo = null;\n        for(let i = 0; i < commands.length; i++) {\n            const [command_name, ...parameters] = commands[i];\n            const handler_function = this['do_' + command_name];\n            if(!handler_function)\n                return null;\n            try {\n                // Set up context variables for the handler functions to use:\n                this.app_state = app_state;\n\n                // TODO: maybe have this.changed.mode, this.changed.document etc.\n\n                // Watch to see if the handler sets new_mode.  If it does, switch to that\n                // mode after the command is finished, but otherwise switch back to base mode.\n                this.new_mode = null;\n\n                // The handler function will set this if the document changes.\n                // (Stack changes are expected to be returned by the handler function.)\n                this.new_document = null;\n\n                // Likewise this will be set to true if anything changed about the file list / file selection.\n                this.files_changed = false;  // TODO: rename -> selected_file_changed\n\n                // This will be set to true if the current file was saved by this action.\n                // This indicates that the app state's dirty flag should be cleared.\n                this.file_saved = false;\n\n                // If this is set to true, the prefix_argument will be kept as it as (otherwise it's reset to\n                // null after each action).\n                this.preserve_prefix_argument = false;\n\n                this.notification_text = null;\n\n                // Execute the handler and assemble the new state.\n                const new_stack = (handler_function.bind(this))(app_state.stack, ...parameters);\n                let new_app_state = new AppState(\n                    new_stack || app_state.stack,\n                    this.new_document || app_state.document\n                );\n                new_app_state.is_dirty = app_state.is_dirty || !new_app_state.same_as(app_state);\n                if(this.file_saved)  // Current file was saved; explicitly clear the dirty flag.\n                    new_app_state.is_dirty = false;\n                app_state = new_app_state;\n\n                // Switch back into base mode if the mode was not explicitly set by the handler.\n                this.mode = this.new_mode || 'base';\n\n                // Clear the prefix argument if the last command was not explicitly 'prefix_argument'.\n                if(!this.preserve_prefix_argument)\n                    this.prefix_argument = null;\n            } catch(e) {\n                if(e.message === 'stack_underflow' || e.message === 'stack_type_error' ||\n                   e.message === 'prefix_argument_required') {\n                    this.error_flash_stack();\n                    this.perform_undo_or_redo = null;\n                    this.mode = 'base';\n                    this.prefix_argument = null;\n                    return null;\n                }\n                else throw e;\n            }\n            finally {\n                // Avoid holding references longer than needed.\n                this.app_state = null;\n                this.new_document = null;\n            }\n        }\n        return app_state;\n    }\n\n    switch_to_mode(new_mode) {\n        this.new_mode = new_mode;\n    }\n\n    error_flash_element(dom_element) {\n        dom_element.classList.remove('errorflash');\n        // eslint-disable-next-line no-unused-expressions\n        dom_element.offsetWidth;  // force reflow\n        dom_element.classList.add('errorflash');\n    }\n\n    error_flash_stack() {\n        if(this.settings.layout.stack_split === 0)\n            return this.error_flash_document();\n        else\n            return this.error_flash_element(document.getElementById('stack_panel'));\n    }\n\n    error_flash_document() {\n        if(this.settings.layout.stack_split === 100)\n            return this.error_flash_stack();\n        else\n            return this.error_flash_element(document.getElementById('document_panel'));\n    }\n\n    clear_all_flashes() {\n\t['stack_panel', 'document_panel'].forEach(elt_id =>\n\t    document.getElementById(elt_id).classList.remove('errorflash'));\n    }\n\n    notify(text) { this.notification_text = text; }\n\n    // If the base already has a subscript, and is_superscript is true, the superscript\n    // is placed into the existing base.  Otherwise, a new subscript/superscript node\n    // is created.  A similar rule applies if is_superscript is false.\n    _build_subscript_superscript(base_expr, child_expr, is_superscript) {\n        // Check to see if we can slot the child into an empty sub/superscript \"slot\".\n        if(base_expr.expr_type() === 'subscriptsuperscript' &&\n           ((base_expr.subscript_expr === null && !is_superscript) ||\n            (base_expr.superscript_expr === null && is_superscript))) {\n            // There's \"room\" for it in this expr.\n            return new SubscriptSuperscriptExpr(\n                base_expr.base_expr,\n                (is_superscript ? base_expr.subscript_expr : child_expr),\n                (is_superscript ? child_expr : base_expr.superscript_expr));\n        }\n        else {\n            // Create a new expr instead.  The base will be parenthesized if\n            // it's a low-precedence infix expression.\n            base_expr = DelimiterExpr.autoparenthesize(base_expr);\n            // This will automatically parenthesize fractions like x/y -> (x/y)^2.\n            // This line can be removed if this becomes undesired behavior.\n            base_expr = DelimiterExpr.autoparenthesize_frac(base_expr);\n            return new SubscriptSuperscriptExpr(\n                base_expr,\n                (is_superscript ? null : child_expr),\n                (is_superscript ? child_expr : null));\n        }\n    }\n\n    // Second-to-top stack item becomes the base, while the stack top becomes the\n    // subscript or superscript depending on 'is_superscript'.\n    make_subscript_superscript(stack, is_superscript) {\n        const [new_stack, base_expr, child_expr] = stack.pop_exprs(2);\n        const new_expr = this._build_subscript_superscript(\n            base_expr, child_expr, is_superscript);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_subscript(stack) { return this.make_subscript_superscript(stack, false); }\n    do_superscript(stack) { return this.make_subscript_superscript(stack, true); }\n\n    // Add a \\prime to the stack top; this is almost like do_superscript with \\prime\n    // but needs some special handling to coalesce multiple \\prime into a single superscript.\n    do_prime(stack) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        const new_prime_expr = new CommandExpr('prime', []);\n        // Check whether the base expr is already of the form x^{\\prime}, x^{\\prime\\prime}, etc.\n        // If so, add an extra \\prime into the superscript.\n        if(base_expr.expr_type() === 'subscriptsuperscript' && base_expr.superscript_expr) {\n            const s = base_expr.superscript_expr;\n            const is_prime_command = expr =>\n                  expr.expr_type() === 'command' &&\n                  expr.operand_count() === 0 && expr.command_name === 'prime';\n            let new_superscript_expr;\n            if(is_prime_command(s))\n                new_superscript_expr = new SequenceExpr([s, new_prime_expr]);\n            else if(s.expr_type() === 'sequence' && s.exprs.every(is_prime_command))\n                new_superscript_expr = new SequenceExpr(s.exprs.concat([new_prime_expr]));\n            else\n                new_superscript_expr = null;\n            if(new_superscript_expr) {\n                const new_expr = new SubscriptSuperscriptExpr(\n                    base_expr.base_expr, base_expr.subscript_expr, new_superscript_expr);\n                return new_stack.push_expr(new_expr);\n            }\n        }\n        // Otherwise, adding a prime works just like adding a \\prime superscript.\n        const new_expr = this._build_subscript_superscript(base_expr, new_prime_expr, true);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_mode(stack, new_mode) { this.switch_to_mode(new_mode); }\n\n    do_undo() { this.perform_undo_or_redo = 'undo'; }\n    do_redo() { this.perform_undo_or_redo = 'redo'; }\n\n    do_prefix_argument() {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        this.preserve_prefix_argument = true;\n        let new_prefix_argument = null;\n        if(/^[0-9]$/.test(key)) {\n            const value = parseInt(key);\n            if(this.prefix_argument !== null && this.prefix_argument > 0) {\n                // Multi-digit prefix argument\n                new_prefix_argument = 10*this.prefix_argument + value;\n            }\n            else new_prefix_argument = value;\n        }\n        else if(key === '*')\n            new_prefix_argument = -1;\n        this.prefix_argument = new_prefix_argument;\n    }\n\n    // Convenience function for interpreting the prefix_argument in commands that support it.\n    _get_prefix_argument(default_value, all_value) {\n        if(this.prefix_argument === null)\n            return default_value;\n        else if(this.prefix_argument < 0)\n            return all_value;\n        else\n            return this.prefix_argument;\n    }\n\n    // A nonzero prefix argument is required.\n    // star_ok means that a prefix argument of * is acceptable (defaults to false).\n    _require_prefix_argument(star_ok) {\n        if(this.prefix_argument === null ||\n\t   (star_ok && this.prefix_argument === 0) ||\n\t   (!star_ok && this.prefix_argument <= 0))\n            throw new Error('prefix_argument_required');\n        else\n            return this.prefix_argument;\n    }\n\n    // Duplicate the top N stack items (default=1).\n    do_dup(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.map(item => item.clone());  // keep item serial_numbers unique\n        return new_stack.push_all(items.concat(new_items));\n    }\n\n    // Drop the top N stack items (default=1).\n    do_pop(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack;\n    }\n\n    // Drop the Nth stack item (default=2, i.e.: a b -> b)\n    do_nip(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.slice(1));\n    }\n\n    // Reverse top N stack items (default=2)\n    do_swap(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        items.reverse();\n        return new_stack.push_all(items);\n    }\n\n    // Copy stack top above the current Nth stack item.\n    // Default argument of 2 is: a b -> b a b\n    // Argument of 1 acts as \"dup\".\n    do_tuck(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const last_item = items[items.length-1];\n        return new_stack.push_all([last_item.clone()].concat(items));\n    }\n\n    // Pick the Nth item from the stack and copy it to the stack top.\n    // Default argument of 2 is: a b -> a b a\n    do_over(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.concat([items[0].clone()]));\n    }\n\n    // Rotate N top stack items (default=3: a b c -> b c a)\n    do_rot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(1).concat([items[0]]);\n        return new_stack.push_all(new_items);\n    }\n\n    // Rotate N top stack items backwards (default=3: a b c -> c a b)\n    do_unrot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(-1).concat(items.slice(0, -1));\n        return new_stack.push_all(new_items);\n    }\n\n    do_change_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        this.new_document = this.app_state.document.move_selection_by(amount);\n        // this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_shift_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        const new_document = this.app_state.document.shift_selection_by(amount);\n        if(new_document)\n            this.new_document = new_document;\n        else\n            this.error_flash_document();\n    }\n\n    do_save_file(stack) {\n        const file_manager_state = this.app_component.state.file_manager_state;\n        const filename = file_manager_state.current_filename;\n        if(!filename)\n            return this.do_save_file_as(stack);\n        this.app_component.state.document_storage.save_state(\n            this.app_state, filename,\n            () => {\n                this.notify('Saved: ' + filename);\n                this.settings.last_opened_filename = filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving:' + filename)\n        );\n        this.file_saved = true;\n    }\n\n    // TODO: factor with do_save_file\n    do_save_file_as(stack) {\n        let new_filename = window.prompt('Enter the filename to save as', this.settings.current_filename);\n        if(!new_filename)\n            return;\n        let document_storage = this.app_component.state.document_storage;\n        new_filename = document_storage.sanitize_filename(new_filename);\n        document_storage.save_state(\n            this.app_state, new_filename,\n            () => {\n                this.notify('Saved as: ' + new_filename);\n                let file_manager_state = this.app_component.state.file_manager_state;\n                file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving: ' + new_filename)\n        );\n        this.file_saved = true;\n    }\n\n    do_load_selected_file(stack) {\n        const selected_filename = this.app_component.state.file_manager_state.selected_filename;\n        if(!selected_filename)\n            return this.error_flash_document();\n        if(this.app_state.is_dirty) {\n            if(window.confirm(\"The current document has been modified.  Save it now?\")) {\n                // Abort actually loading the new file; otherwise a\n                // race condition between save and load is created due\n                // to document_storage calls being asynchronous.  This\n                // could be worked around by chaining the load after\n                // the save but this is the only place it's a problem.\n                return this.do_save_file(stack);\n            }\n        }\n        this.app_component.start_loading_filename(selected_filename);\n    }\n\n    do_start_new_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        let new_filename = file_manager_state.generate_unused_filename(file_manager_state.current_filename || 'untitled');\n        new_filename = window.prompt('Enter a filename for the new document', new_filename);\n        if(!new_filename) return;\n        new_filename = document_storage.sanitize_filename(new_filename || '');\n        if(!new_filename) {\n            alert('Invalid filename (must only contain letters, numbers and underscores)');\n            return;\n        }\n\n        // Save the current document if needed first.\n        if(file_manager_state.current_filename) {\n            // NOTE: don't put up the notification flash here, unlike with an explicit save_document.\n            document_storage.save_state(this.app_state, file_manager_state.current_filename);\n        }\n\n        // This basically works like loading from a blank file.\n        let new_state = new AppState();\n        this.new_document = new_state.document;\n        file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n        this.settings.last_opened_filename = new_filename;\n        this.settings.save();\n        this.perform_undo_or_redo = 'clear';\n        this.notify('Started new file: ' + new_filename);\n        this.files_changed = true;\n        this.file_saved = true;\n        this.do_toggle_popup(new_state.stack, 'files');  // close file manager\n        return new_state.stack;\n    }\n\n    do_select_adjacent_file(stack, offset_string) {\n        const offset = parseInt(offset_string);\n        let file_manager_state = this.app_component.state.file_manager_state;\n        const new_filename = file_manager_state.find_adjacent_filename(file_manager_state.selected_filename, offset);\n        if(new_filename) {\n            file_manager_state.selected_filename = new_filename;\n            this.files_changed = true;\n        }\n    }\n\n    do_delete_selected_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        const filename = file_manager_state.selected_filename;\n        if(!filename) return this.error_flash_document();\n        if(!window.confirm(\"Really delete \\\"\" + filename + \"\\\"?\")) return;\n        document_storage.delete_state(\n            filename,\n            () => {\n                this.notify('Deleted: ' + filename);\n                const new_filename = file_manager_state.find_adjacent_filename(filename, 1);\n                // TODO: might need this.files_changed = true\n                file_manager_state.selected_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error deleting: ' + filename)\n        );\n    }\n\n    // If 'preserve' is set, items are kept on the stack after copying them\n    // into the document.  Otherwise, the items are removed from the stack.\n    do_pop_to_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        let new_document = this.app_state.document;\n        for(let n = 0; n < items.length; n++)\n            new_document = new_document.insert_item(items[n].clone());\n        this.new_document = new_document;\n        return preserve ? new_stack.push_all(items) : new_stack;\n    }\n\n    do_extract_from_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, this.app_state.document.items.length);\n        if(arg <= 0) return stack;\n        let new_document = this.app_state.document;\n        // Make sure there are enough items above the current document selection to extract.\n        if(new_document.selection_index < arg)\n            return this.error_flash_document();\n        let new_items = [];\n        for(let n = 0; n < arg; n++) {\n            const item = new_document.selected_item();\n            new_document = new_document.delete_selection();\n            new_items.push(item.clone());\n        }\n        new_items.reverse();\n        if(!preserve)\n            this.new_document = new_document;\n        return stack.push_all(new_items);\n    }\n\n    // Clear stack and document.\n    do_reset_all(stack) {\n        this.notify(\"Stack and document cleared\");\n        this.new_document = new Document([], 0);\n        return new Stack([]);\n    }\n\n    do_push_separator(stack) {\n\t// See TextItem.is_empty() comment\n\treturn stack.push(TextItem.empty_item());\n    }\n\n    do_push(stack, text) {\n        text = text || '';  // handle 'push nothing' case\n        return stack.push_expr(Expr.text_or_command(text));\n    }\n\n    do_self_push(stack) {\n        return this.do_push(stack, this.last_keypress);\n    }\n\n    do_push_placeholder(stack) {\n        return stack.push_expr(new PlaceholderExpr());\n    }\n\n    // Used for \\mathscr / \\mathcal, which only have uppercase glyphs.\n    // case_type: 'uppercase', 'lowercase'\n    // Stack top should be an ExprItem with a simple TextExpr.\n    do_to_case(stack, case_type) {\n        const convert_fn = string => {\n            switch(case_type) {\n            case 'uppercase': return string.toUpperCase();\n            case 'lowercase': return string.toLowerCase();\n            default: return string;\n            }\n        };\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'text')\n            new_expr = new TextExpr(convert_fn(expr.text));\n        else\n            new_expr = expr;\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Pop arity_string items (default 1) and turn them into an Command expr.\n    do_operator(stack, opname, arity_string = '1') {\n        const arity = parseInt(arity_string);\n        const [new_stack, ...popped_exprs] = stack.pop_exprs(arity);\n        const result_expr = new CommandExpr(opname, popped_exprs)\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Like do_operator, but if the stack item is already wrapped in a \\boldsymbol or \\pmb,\n    // unwrap it and re-wrap the font face command inside \\pmb.\n    // e.g. \\boldsymbol{A} -> \\pmb{A}\n    // See also do_make_roman(), which is a special case because \\bold{} creates Roman\n    // bold text without needing \\pmb.\n    do_font_operator(stack, facename) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n           (expr.command_name === 'boldsymbol' || expr.command_name === 'pmb'))\n            new_expr = new CommandExpr(\n                'pmb', [new CommandExpr(facename, [expr.operand_exprs[0]])]);\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                expr.command_name === facename) {\n            // Special case: don't wrap in the same typeface twice consecutively\n            // (don't create \\mathtt{\\mathtt{A}}).  This check should probably be\n            // generalized to strip existing typeface commands but there's not a good\n            // way to do this cleanly yet.\n            new_expr = expr;\n        }\n        else\n            new_expr = new CommandExpr(facename, [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // \\sin{x} etc.  Works similarly to do_operator except the argument is autoparenthesized.\n    // If superscript_text is given, the text is applied as a superscript to the function\n    // itself (not to the argument).\n    // NOTE: if superscript_text starts with '_', it's treated as a subscript instead.\n    do_named_function(stack, funcname, superscript_text) {\n        let [new_stack, arg_expr] = stack.pop_exprs(1);\n        const orig_funcname = funcname;\n        if(superscript_text !== undefined) {\n            // \\sin^2{arg} etc.  This is a little awkward because the \"head\" of the command (\\sin^2) is\n            // no longer a simple LaTeX command like other CommandExprs.  Fortunately, things work out fine\n            // treating it as such by just textually concatenating the superscript (putting in explicit braces\n            // if necessary).  For example: \"sin^2\" or \"sin^{-1}\".\n            let sup_or_sub = '^';\n            if(superscript_text.startsWith('_')) {\n                sup_or_sub = '_';\n                superscript_text = superscript_text.slice(1);\n            }\n            if(superscript_text.length > 1)\n                superscript_text = ['{', superscript_text, '}'].join('');\n            funcname = [funcname, sup_or_sub, superscript_text].join('');\n        }\n        arg_expr = DelimiterExpr.autoparenthesize(arg_expr);\n\n        // \\sech and \\csch are are missing in LaTeX for some reason so they need to be special cased here.\n        let expr;\n        if(orig_funcname === 'sech' || orig_funcname === 'csch')\n            expr = new CommandExpr('operatorname', [new TextExpr(funcname), arg_expr]);\n        else\n            expr = new CommandExpr(funcname, [arg_expr]);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // opname == 'argmax': y x -> \\argmax\\limits_{x} y\n    // If make_operatorname is true, opname is not a built-in LaTeX operator\n    // but is instead wrapped in an \\operatorname{} to simulate it.\n    do_underset_operator(stack, opname, make_operatorname) {\n        const [new_stack, argument_expr, sub_expr] = stack.pop_exprs(2);\n        let command_expr;\n        if(make_operatorname)\n            command_expr = new CommandExpr('operatorname', [new TextExpr(opname)]);\n        else\n            command_expr = new CommandExpr(opname);\n        const limits_expr = new SubscriptSuperscriptExpr(\n            new CommandExpr('limits'), sub_expr);\n        const new_expr = Expr.combine_pair(\n            Expr.combine_pair(command_expr, limits_expr),\n            argument_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Same as do_operator, except if the object the hat is being added to is a literal 'i' or 'j',\n    // or bolded i/j, it's first converted into a \\imath or \\jmath to remove the dot.\n    do_apply_hat(stack, hat_op) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'text' &&\n           (expr.text === 'i' || expr.text === 'j'))\n            expr = new CommandExpr(expr.text === 'i' ? 'imath' : 'jmath');\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                (expr.command_name === 'boldsymbol' || expr.command_name === 'mathbf')) {\n            // Check for bolded literal i/j\n            const inner_expr = expr.operand_exprs[0];\n            if(inner_expr.expr_type() === 'text' &&\n               (inner_expr.text === 'i' || inner_expr.text === 'j'))\n                expr = new CommandExpr(\n                    expr.command_name,\n                    [new CommandExpr(inner_expr.text === 'i' ? 'imath' : 'jmath')]);\n        }\n        const result_expr = new CommandExpr(hat_op, [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Wrap expr in \\htmlClass{...}\n    // If it's already wrapped in the given class, unwrap it instead.\n    // If class_name_2 is also provided, this cycles between:\n    //    nothing -> class_name -> class_name_2 -> nothing\n    do_html_class(stack, class_name, class_name_2) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        let new_class_name = null;\n        if(expr.expr_type() === 'command' &&\n           expr.command_name === 'htmlClass' &&\n           expr.operand_count() === 2 &&\n           expr.operand_exprs[0].expr_type() === 'text') {\n            // It's already wrapped in \\htmlClass\n            if(expr.operand_exprs[0].text === class_name)\n                new_class_name = class_name_2;  // might be null\n            expr = expr.operand_exprs[1];  // Strip existing \\htmlClass\n        }\n        else\n            new_class_name = class_name;\n        if(new_class_name)\n            expr = new CommandExpr('htmlClass', [new TextExpr(new_class_name), expr]);\n        return new_stack.push_expr(expr);\n    }\n\n    // For ExprItems, this just wraps the expression in \\boldsymbol (if it's not already wrapped).\n    // For TextItems, the individual components of the text are bolded.\n    do_make_bold(stack) {\n        const [new_stack, item] = stack.pop(1);\n        return new_stack.push(item.as_bold());\n    }\n\n    // This is equivalent to 'operator mathrm' except that if the target is already wrapped in a \\boldsymbol{}\n    // (presumably created by do_make_bold()), this converts it into a \\bold{} which yields a bold Roman glyph.\n    do_make_roman(stack) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.command_name === 'boldsymbol' && expr.operand_count() === 1)\n            new_expr = new CommandExpr('bold', expr.operand_exprs);\n        else if(expr.expr_type() === 'command' && expr.command_name === 'mathrm')\n            new_expr = expr;\n        else\n            new_expr = new CommandExpr('mathrm', [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_custom_delimiter(stack, delimiter_type) {\n        this.switch_to_mode('custom_delimiters');\n        if(!delimiter_type) {\n            // Start new sequence\n            this.custom_delimiters = {};\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.left) {\n            // First delimiter (left side)\n            this.custom_delimiters.left = delimiter_type;\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.right) {\n            // Second delimiter (right side)\n            this.custom_delimiters.right = delimiter_type;\n            if(this.prefix_argument === null || this.prefix_argument <= 1)\n                return this._finish_custom_delimiters(stack);\n            else {\n                // Prefix argument of 2 or more has been entered; wait for 3rd delimiter.\n                this.preserve_prefix_argument = true;\n                return;\n            }\n        }\n        // Third delimiter (middle)\n        this.custom_delimiters.middle = delimiter_type;\n        return this._finish_custom_delimiters(stack);\n    }\n\n    _finish_custom_delimiters(stack) {\n        this.switch_to_mode('base');\n        const d = this.custom_delimiters;\n        let arity = this.prefix_argument || 1;\n        if(arity < 1) arity = 1;\n        const [new_stack, ...exprs] = stack.pop_exprs(arity);\n        const new_expr = new DelimiterExpr(d.left, d.right, d.middle, exprs);\n        this.custom_delimiters = {};\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_toggle_fixed_size_delimiters(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tif(expr.expr_type() === 'delimiter')\n\t    return new_stack.push_expr(expr.as_fixed_size(!expr.fixed_size));\n\telse\n\t    stack.type_error();\n    }\n\n    do_remove_delimiters(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tif(expr.expr_type() === 'delimiter')\n            return new_stack.push_expr(expr.without_delimiters());\n        else\n            return stack;  // not considered an error\n    }\n\n    // opname can be either a \\latex_command or a regular string like '+'\n    // The cases of Expr+Expr and Expr+Text (or Text+Text) are handled separately.\n    do_infix(stack, opname) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr (the usual case).\n            let operator_expr = Expr.text_or_command(opname);\n            const new_expr = InfixExpr.combine_infix(\n                left_item.expr, right_item.expr, operator_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text.\n            const new_item = TextItem.concatenate_items(left_item, right_item, opname);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but joins two expressions with an English phrase\n    // with Roman font and extra spacing (\\quad).\n    do_conjunction(stack, phrase) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr\n            const operator_expr = new SequenceExpr([\n                new CommandExpr('quad'),\n                new CommandExpr('text', [new TextExpr(phrase.replaceAll('_', ' '))]),\n                new CommandExpr('quad')]);\n            return new_stack.push_expr(\n                InfixExpr.combine_infix(\n                    left_item.expr, right_item.expr, operator_expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const conjunction_item = TextItem.from_string(' ' + phrase + ' ');\n            const new_item = TextItem.concatenate_items(\n                left_item, TextItem.concatenate_items(conjunction_item, right_item));\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    do_split_infix(stack) {\n        const [new_stack, infix_expr] = stack.pop_exprs(1);\n        if(infix_expr.expr_type() !== 'infix') {\n            this.error_flash_stack();\n            return;\n        }\n        const split_type = infix_expr.split_type;\n        let new_split_type = null;\n        if(split_type === 'after') new_split_type = 'before';\n        else if(split_type === 'before') new_split_type = null;\n        else new_split_type = 'after';\n        const new_infix_expr = infix_expr.with_split_at(\n            infix_expr.split_at_index,\n\t    new_split_type);\n        return new_stack.push_expr(new_infix_expr);\n    }\n\n    // Swap left and right sides of an \"infix\" expression, which can be an\n    // actual InfixExpr or else a DelimiterExpr that has 2 inner expressions,\n    // e.g. <x | y> or \\left. x \\middle/ y \\right.\n    // For InfixExpr, the \"pivot\" operator for the swap is taken from split_at_index,\n    // which is generally the most recently-used operator in the creation of the\n    // infix expression.\n    do_swap_infix(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tlet new_expr = null;\n\tif(expr.expr_type() === 'infix')\n            new_expr = expr.swap_sides_at(expr.split_at_index);\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    new_expr = new DelimiterExpr(\n\t\texpr.left_type, expr.right_type, expr.middle_type,\n\t\t[expr.inner_exprs[1], expr.inner_exprs[0]],\n\t\texpr.fixed_size);\n\tif(new_expr)\n\t    return new_stack.push_expr(new_expr);\n\telse\n\t    return this.error_flash_stack();\n    }\n\n    do_cancel() {}\n\n    do_concat(stack) {\n        let [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            let left_expr = left_item.expr, right_expr = right_item.expr;\n            const new_expr = Expr.combine_pair(left_expr, right_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            const new_item = TextItem.concatenate_items(left_item, right_item);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // \"Fuse\" two expressions into a uncombinable SequenceExpr.\n    // This is used to create things like f(x) where it is to be treated\n    // as a unit and not merged into adjacent SequenceExprs.\n    // (This matters for purposes of selecting subexpressions in 'dissect' mode).\n    do_fuse(stack) {\n\tconst [new_stack, left_expr, right_expr] = stack.pop_exprs(2);\n\tconst new_expr = new SequenceExpr([left_expr, right_expr], true);\n\treturn new_stack.push_expr(new_expr);\n    }\n\n    // Substitute the stack top expression into the first available placeholder marker in the\n    // item second from top.  That item can be either an ExprItem or TextItem.\n    do_substitute_placeholder(stack) {\n        const [new_stack, substitution_expr] = stack.pop_exprs(1);\n        const [new_stack_2, item] = new_stack.pop(1);\n        if(item.item_type() === 'expr') {\n            const original_expr = item.expr;\n            const placeholder_expr = original_expr.find_placeholder();\n            if(placeholder_expr) {\n                const new_expr = original_expr.substitute_expr(placeholder_expr, substitution_expr);\n                return new_stack_2.push_expr(new_expr);\n            }\n        }\n        else if(item.item_type() === 'text') {\n            const new_text_item = item.try_substitute_placeholder(substitution_expr);\n            if(new_text_item)\n                return new_stack_2.push(new_text_item);\n        }\n        return stack.type_error();\n    }\n\n    // Extract either the left or right side of an InfixExpr\n    // (or a DelimiterExpr with 2 inner expressions; cf. do_swap_infix).\n    do_extract_infix_side(stack, which_side) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n\tlet extracted_expr = null;\n\tif(expr.expr_type() === 'infix')\n\t    extracted_expr = expr.extract_side_at(expr.split_at_index, which_side);\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    extracted_expr = (which_side === 'right') ? expr.inner_exprs[1] : expr.inner_exprs[0];\n        else\n            return stack.type_error();\n        return new_stack.push_expr(extracted_expr);\n    }\n\n    do_start_text_entry(stack, text_entry_mode, initial_text) {\n        this.text_entry = new TextEntryState(text_entry_mode, initial_text);\n        this.switch_to_mode(text_entry_mode);\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    do_cancel_text_entry(stack) {\n        this.perform_undo_or_redo = 'suppress';\n        return this.cancel_text_entry(stack);\n    }\n\n    cancel_text_entry(stack) {\n        const edited_item = this.text_entry.edited_item;\n        this.text_entry = null;\n        if(edited_item)\n            return stack.push(edited_item);\n        else\n            return stack;\n    }\n\n    do_text_entry_move_cursor(stack, move_type) {\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        if(move_type === 'left')\n            this.text_entry.left();\n        else if(move_type === 'right')\n            this.text_entry.right();\n        return stack;\n    }\n\n    do_append_text_entry(stack) {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        if(key.length === 1) {\n            if(this.text_entry.mode === 'latex_entry') {\n                // Disallow characters that are invalid as part of a LaTeX command.\n                // Technically, commands like \\$ should be allowed here, but those are all\n                // accessible by their own keybindings already.  So only alphabetic characters\n                // are allowed in latex entry mode.\n                if(!/^[a-zA-Z]$/.test(key))\n                    return this.error_flash_stack();\n            }\n            this.text_entry.insert(key);\n        }\n        return stack;\n    }\n\n    // If new_mode_when_empty is provided, switch to that mode if this\n    // backspace was done while the text field is empty.  This is currently\n    // used to switch back from latex entry mode to normal math entry mode.\n    do_backspace_text_entry(stack, new_mode_when_empty) {\n        if(this.text_entry.is_empty()) {\n            // Everything has been deleted; cancel text entry.\n\t    // Note that when cancelling via backspace this way, even if\n\t    // there was a text_entry_edited_item, it's discarded.\n            this.cancel_text_entry(stack);\n            if(new_mode_when_empty) {\n                this.text_entry = new TextEntryState(new_mode_when_empty, '');\n                this.switch_to_mode(new_mode_when_empty);\n            }\n\t    return stack;\n        }\n        else {\n            this.text_entry.backspace();\n            this.switch_to_mode(this.mode);\n        }\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // textstyle determines what the entered text becomes:\n    //   'math' - ExprItem with plain italic math text\n    //   'roman_math' - ExprItem with \\mathrm{...} text\n    //   'latex' - ExprItem with arbitrary latex command\n    //   'text' - TextItem\n    //   'heading' - TextItem with is_heading flag set\n    do_finish_text_entry(stack, textstyle) {\n        if(!this.text_entry)\n            return stack;  // shouldn't happen\n        if(this.text_entry.is_empty())\n            return this.cancel_text_entry(stack);\n        if(textstyle === 'text' || textstyle === 'heading') {\n            let item = TextItem.parse_string(this.text_entry.current_text);\n            if(textstyle === 'heading') item.is_heading = true;\n            this.cancel_text_entry(stack);\n            return stack.push(item);\n        }\n        // math or roman_math or latex\n        let new_expr;\n        if(textstyle === 'roman_math') {\n            new_expr = new CommandExpr('mathrm', [\n                new TextExpr(this._latex_escape(this.text_entry.current_text))]);\n        }\n        else if(textstyle === 'latex') {\n            // NOTE: do_append_text_entry should only allow alphabetic characters through,\n            // so no real need to do sanitization here any more.\n            \n            // const sanitized = this.text_entry.replaceAll(/[^a-zA-Z]/g, '');\n            // if(sanitized.length === 0) {\n            //     this.text_entry = null;\n            //     this.text_entry_mode = null;\n            //     return stack;\n            // }\n            // new_expr = new CommandExpr(sanitized);\n\n            new_expr = new CommandExpr(this.text_entry.current_text);\n        }\n        else\n            new_expr = new TextExpr(\n                this._latex_escape(this.text_entry.current_text));\n        this.cancel_text_entry(stack);\n        return stack.push_expr(new_expr);\n    }\n\n    // Start text entry mode using the item on the stack top.\n    // Because the minieditor is so limited, only these cases are allowed:\n    //   - TextItems without anything too \"complicated\" (see TextItem.as_editable_string);\n    //     these will start with the minieditor in text-entry mode.\n    //   - ExprItems that are only a simple CommandExpr with a no-argument LaTeX command;\n    //     in this case the minieditor will start directly in LaTeX-entry mode.\n    //   - ExprItems that represent a simple text string like '123' or 'xyz'.\n    //   - ExprItems that represent \\mathrm{x} where x is a simple string like '123' or 'xyz'\n    //     (this is to allow expressions created via Shift+Enter in the minieditor to be editable).\n    do_edit_item(stack) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() === 'text') {\n\t    const s = item.as_editable_string();\n\t    if(s) {\n\t\tthis.do_start_text_entry(new_stack, 'text_entry', s);\n                this.text_entry.edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\telse if(item.item_type() === 'expr') {\n\t    let expr = item.expr;\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 0) {\n\t\t// LaTeX command with no arguments, e.g. \\circledast\n\t\tthis.do_start_text_entry(new_stack, 'latex_entry', expr.command_name);\n                this.text_entry.edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t    // Try stripping off a single level of \\mathrm{...} if there is one.\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n\t       expr.command_name === 'mathrm')\n\t\texpr = expr.operand_exprs[0];\n\t    // It's editable only if it's a basic TextExpr that doesn't start with a\n\t    // backslash (so generally, only something that was directly created by\n\t    // the minieditor to begin with).\n\t    if(expr.expr_type() === 'text' && !expr.text.startsWith(\"\\\\\")) {\n\t\tthis.do_start_text_entry(\n\t\t    new_stack,\n\t\t    'math_text_entry',\n\t\t    this._latex_unescape(expr.text));\n                this.text_entry.edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\treturn this.error_flash_stack();\n    }\n\n    // Dissect mode commands:\n    //\n    // When in 'dissect' mode, subexpressions of the stack top can be selected and\n    // operated upon.  Changing the selection does not modify the actual Expr; instead\n    // it generates new ExprItems with the updated 'selected_expr_path'.  This is a\n    // property of the ExprItem, not the Expr, so dissect mode commands have to explicitly\n    // manipulate the ExprItem instances (rather than using push_expr()).  This is\n    // mostly abstracted into _do_dissect_operation() below.\n\n    do_start_dissect_mode(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\t// The expression to be 'dissected' must have subexpressions or it's an error.\n\tif(expr.has_subexpressions()) {\n\t    this.switch_to_mode('dissect');\n            this.perform_undo_or_redo = 'suppress';\n            this.dissect_undo_stack = new DissectUndoStack(expr);\n\t    // Build a new ExprItem with a default initial selection.\n\t    return new_stack.push(new ExprItem(expr, null, new ExprPath(expr, [0])));\n\t}\n\telse\n\t    return this.error_flash_stack();\n    }\n\n    // Cancel any changes that have been done while in dissect mode\n    // (i.e., undo as far as possible) and exit the mode.\n    do_cancel_dissect_mode(stack) {\n        // eslint-disable-next-line no-unused-vars\n\tconst [new_stack, expr] = stack.pop_exprs(1);  // expr will be discarded\n\tthis.perform_undo_or_redo = 'suppress';\n        const original_expr = this.dissect_undo_stack.initial_expr;\n        this.dissect_undo_stack = null;\n\treturn new_stack.push(new ExprItem(original_expr, null, null));\n    }\n\n    // Accept any changes that have been done while in dissect mode\n    // and exit the mode.\n    // NOTE: Can't currently modify the active expression, so this is not needed yet.\n    // If this is implemented, make sure that if the expression has not actually been\n    // modified, undo is suppressed for this action.  Only log an undo if there has been\n    // a change.\n/*    do_finish_dissect_mode(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n        this.dissect_undo_stack = null;\n        // A new ExprItem needs to be constructed in order to remove\n        // the existing ExprPath selection.\n\treturn new_stack.push(new ExprItem(expr, null, null));\n      }     */\n\n    // Undo last action while in dissect mode, if possible.\n    // Cancel dissect mode if there are no undo states.\n    do_dissect_undo(stack) {\n        this.perform_undo_or_redo = 'suppress';\n        let undo_stack = this.dissect_undo_stack;\n        const new_expr_path = undo_stack.pop();\n        if(new_expr_path) {\n            // eslint-disable-next-line no-unused-vars\n            const [new_stack, old_expr] = stack.pop_exprs(1);\n            this.switch_to_mode('dissect');\n            return new_stack.push(\n                new ExprItem(new_expr_path.expr, null, new_expr_path));\n        }\n        else\n            return this.do_cancel_dissect_mode(stack);\n    }\n\n    // Descend into a subexpression, if possible.\n    // The new selection will point at the first (index=0) subexpression\n    // of the current selection.\n    do_dissect_descend(stack) {\n\treturn this._do_dissect_operation(stack, expr_path => {\n\t    const subexpr = expr_path.selected_expr();\n\t    if(subexpr.has_subexpressions())\n\t\treturn expr_path.descend(0);\n\t    else\n\t\treturn expr_path;\n\t});\n    }\n\n    // Ascend to the parent of the current selection(s), if possible.\n    do_dissect_ascend(stack) {\n\treturn this._do_dissect_operation(stack, expr_path => {\n\t    // For consistency, do not allow ascending to the \"top level\" Expr\n\t    // (the one actually on the stack).  This would be technically OK, but\n\t    // of limited use and inconsistent with the usual UI (where we immediately\n\t    // select the first subexpression of the stack top upon starting dissect mode).\n\t    if(expr_path.depth() <= 1)\n\t\treturn expr_path;\n\t    else\n\t\treturn expr_path.ascend();\n\t});\n    }\n\n    // Move the selection left or right within its parent Expr.\n    // If there is currently a multi-selection, it is cancelled and\n    // \"left\" or \"right\" is taken relative to the original multi-selection.\n    do_dissect_move_selection(stack, direction) {\n\treturn this._do_dissect_operation(stack, expr_path =>\n\t    expr_path.move(direction));\n    }\n\n    // Replace the stack top with an \"extracted\" version where the selected\n    // subexpression is replaced with a placeholder.  The extracted subexpression\n    // is then put on the stack top, unless 'trim' is given, in which case only\n    // the original expression with placeholder is left on the stack.\n    // This command also exits dissect mode.\n    do_dissect_extract_selection(stack, trim) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() !== 'expr')\n            stack.type_error();\n\tconst expr_path = item.selected_expr_path;\n\tconst expr_with_placeholder = expr_path.extract_selection();\n\tconst extracted_expr = expr_path.selected_expr();\n        this.dissect_undo_stack = null;  // exiting dissect mode\n        if(trim === 'trim')\n            return new_stack.push_expr(expr_with_placeholder);\n        else\n\t    return new_stack.push_all_exprs([expr_with_placeholder, extracted_expr]);\n    }\n\n    // Same as do_dissect_extract_selection, but the original expression\n    // is left unmodified (no placeholder replacement).\n    // If 'trim' is given, the original expression is removed from the stack,\n    // leaving only the selected subexpression.\n    do_dissect_copy_selection(stack, trim) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() !== 'expr')\n            stack.type_error();\n\tconst expr_path = item.selected_expr_path;\n\tconst extracted_expr = expr_path.selected_expr();\n        this.dissect_undo_stack = null;  // exiting dissect mode\n        if(trim === 'trim')\n            return new_stack.push_expr(extracted_expr);\n        else\n\t    return new_stack.push_all_exprs([expr_path.expr, extracted_expr]);\n    }\n\n    // This abstracts out dissect mode operations.  The given function fn()\n    // takes the existing ExprPath, and should return the new ExprPath,\n    // or null if the operation is considered an error.\n    _do_dissect_operation(stack, fn) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() !== 'expr')\n            stack.type_error();\n\tthis.switch_to_mode(this.mode);\n\tconst expr_path = item.selected_expr_path;\n\tconst new_expr_path = fn(expr_path);\n\tif(new_expr_path) {\n            // This mode has its own undo stack; normal undo is suppressed.\n\t    this.perform_undo_or_redo = 'suppress';\n            this.dissect_undo_stack.push(expr_path);\n\t    const new_expr_item = new ExprItem(new_expr_path.expr, null, new_expr_path);\n\t    return new_stack.push(new_expr_item);\n\t}\n\telse\n\t    return this.error_flash_stack();\n    }\n\n    // TODO: may want to make this a general utility method, but it's only used here so far.\n    _latex_escape(text) {\n        const replacements = {\n            ' ': \"\\\\,\",\n            '_': \"\\\\_\",\n            '^': \"\\\\wedge \",\n            '%': \"\\\\%\",\n            \"'\": \"\\\\rq \",\n            \"`\": \"\\\\lq \",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\sim \",\n            \"\\\\\": \"\\\\backslash \"\n        };\n        return text.replaceAll(/[ _^%'`$&#}{~\\\\]/g, match => replacements[match]);\n    }\n\n    // Inverse of _latex_escape.  This is used by do_edit_item to allow simple TextExprs\n    // to be editable again in the minieditor.\n    _latex_unescape(text) {\n\t// TODO: figure out a better way of handling this so it doesn't repeat\n\t// what's in _latex_escape\n        const replacements = {\n            \"\\\\,\": ' ',\n            \"\\\\_\": '_',\n            \"\\\\wedge \": '^',\n            \"\\\\%\": '%',\n            \"\\\\rq \": \"'\",\n            \"\\\\lq \": \"`\",\n            \"\\\\$\": '$',\n            \"\\\\&\": '&',\n            \"\\\\#\": '#',\n            \"\\\\}\": '}',\n            \"\\\\{\": '{',\n            \"\\\\sim \": '~',\n            \"\\\\backslash \": \"\\\\\"\n        };\n        return text.replaceAll(\n\t    /\\\\,|\\\\_|\\\\wedge |\\\\%|\\\\rq |\\\\lq |\\\\\\$|\\\\&|\\\\#|\\\\\\}|\\\\\\{|\\\\sim |\\\\backslash /g,\n\t    match => replacements[match]);\n    }\n\n    do_toggle_is_heading(stack) {\n        let [new_stack, item] = stack.pop(1);\n        if(item.item_type() === 'expr') {\n            // Implicitly turn ExprItems into TextItems.\n            item = TextItem.from_expr(item.expr);\n        }\n        if(item.item_type() === 'text') {\n\t    // Special case: don't allow empty TextItems to be changed this way.\n\t    // See the comment in TextItem.is_empty().\n\t    if(item.is_empty())\n\t\treturn this.error_flash_stack();\n            item = item.clone();\n            item.is_heading = !item.is_heading;\n            return new_stack.push(item);\n        }\n        else\n            this.error_flash_stack();\n    }\n\n    do_extract_latex_source(stack) {\n        // eslint-disable-next-line no-unused-vars\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tconst latex_source = expr.to_text();\n\tconst code_item = new CodeItem('latex', latex_source);\n\treturn stack.push(code_item);\n    }\n\n    // expr_count is the number of items to pop from the stack to put inside the delimiters.\n    // It defaults to 1, but if it's 2 or more, 'middle' is used to separate each item within\n    // the delimiters.\n    do_delimiters(stack, left, right, middle, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...inner_exprs] = stack.pop_exprs(expr_count);\n        let new_expr = null;\n        // Special case: if the stack top is already a DelimiterExpr with \"blank\" delimiters\n        // we can just rebuild a new DelimiterExpr with the specified delimiters instead,\n        // without wrapping it in another DelimiterExpr.\n        if(expr_count === 1 && inner_exprs[0].expr_type() === 'delimiter' &&\n           inner_exprs[0].left_type === '.' && inner_exprs[0].right_type === '.') {\n            new_expr = new DelimiterExpr(\n                left, right, inner_exprs[0].middle_type,\n                inner_exprs[0].inner_exprs);\n        }\n        else {\n            // The usual case.\n            new_expr = new DelimiterExpr(\n                left, right, middle, inner_exprs);\n        }\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Wrap stack top in parentheses if it's not already in delimiters.\n    do_parenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        // Special case: \\left. X \\middle| \\right. style delimiters\n        // are treated as a kind of pseudo-infix expression here.\n        // This is to make things like Pr(x | y) work better when | is a\n        // flex-size delimiter.\n        if(expr.expr_type() === 'delimiter' && expr.left_type === '.' &&\n           expr.right_type === '.' && expr.inner_exprs.length > 1)\n            expr = new DelimiterExpr('(', ')', expr.middle_type, expr.inner_exprs);\n        else if(expr.expr_type() !== 'delimiter')\n            expr = DelimiterExpr.parenthesize(expr);\n        return new_stack.push_expr(expr);\n    }\n\n    // If expr_count_string is provided, exactly that many expressions from the stack\n    // are autoparenthesized.  If any of them is not actually an ExprItem, nothing is done.\n    do_autoparenthesize(stack, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...items] = stack.pop(expr_count);\n        if(items.every(item => item.item_type() === 'expr'))\n            return new_stack.push_all_exprs(\n                items.map(item => DelimiterExpr.autoparenthesize(item.expr)));\n        else\n            return stack;\n    }\n\n    // Combine command name and arguments from the stack into a CommandExpr.\n    // \\frac x y -> \\frac{x}{y}\n    do_apply_operator(stack, arg_count_string) {\n        const arg_count = parseInt(arg_count_string);\n        const [new_stack, command_expr, ...operand_exprs] = stack.pop_exprs(arg_count+1);\n        if(command_expr.expr_type() === 'command' && command_expr.operand_count() === 0)\n            return new_stack.push_expr(\n                new CommandExpr(command_expr.command_name, operand_exprs));\n        else\n            this.error_flash_stack();\n    }\n\n    // Take (left, right, operator) from the stack and create an InfixExpr.\n    // Special case: if 'operator' is \\mathrm{...}, it's surrounded with \\quad\n    // spacers as in do_conjunction().\n    do_apply_infix(stack) {\n        let [new_stack, left_expr, right_expr, operator_expr] = stack.pop_exprs(3);\n        if(operator_expr.expr_type() === 'command' &&\n           operator_expr.command_name === 'mathrm' &&\n           operator_expr.operand_count() === 1)\n            operator_expr = new SequenceExpr([\n                new CommandExpr('quad'), operator_expr, new CommandExpr('quad')]);\n        const new_expr = InfixExpr.combine_infix(left_expr, right_expr, operator_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_toggle_popup(stack, mode_string) {\n        // Hack: Save help panel scroll position so we can restore it next\n        // time the help is displayed.  This isn't very good because browser\n        // window/font resizings will throw it off.  Needs revisiting.\n        // Maybe the help should be its own iframe.\n        if(this.settings.popup_mode === 'help') {\n            const elt = document.getElementById('popup_panel');\n            if(elt && elt.scrollTop)\n                this.settings.help_scroll_top = elt.scrollTop;\n        }\n        this.settings.popup_mode =\n            (this.settings.popup_mode === mode_string) ? null : mode_string;\n        this.settings.save();\n        this.app_component.apply_layout_to_dom();\n    }\n\n    // Set various configuration options.\n    do_config(stack, config_option, value) {\n        let settings = this.settings;\n        let layout = settings.layout;\n        let full_refresh_needed = false;  // set to true if everything needs to be re-rendered afterwards\n        let scratch;\n        switch(config_option) {\n        case 'zoom_factor':\n            scratch = this._get_prefix_argument(1, -1);\n            if(scratch < 0)\n                layout.zoom_factor = 0;\n            else if(value === 'decrease')\n                layout.zoom_factor -= scratch;\n            else\n                layout.zoom_factor += scratch;\n\t    this.notify(\"Zoom level: \" + (layout.zoom_factor > 0 ? \"+\" : \"\") + layout.zoom_factor);\n            break;\n        case 'math_align':\n            if(value === 'toggle_document')\n                layout.document_rightalign_math = !layout.document_rightalign_math;\n            else if(value === 'toggle_stack')\n                layout.stack_rightalign_math = !layout.stack_rightalign_math;\n            break;\n        case 'toggle_inline_math':\n            layout.inline_math = !layout.inline_math;\n            full_refresh_needed = true;\n            break;\n\tcase 'toggle_mode_indicator':\n\t    settings.show_mode_indicator = !settings.show_mode_indicator;\n\t    this.notify(\"Mode indicator \" + (settings.show_mode_indicator ? \"enabled\" : \"disabled\"));\n\t    break;\n        case 'stack_side':\n            layout.stack_side = value;\n            break;\n        case 'stack_split':\n            // prefix argument:\n            //   none:    50% (undocumented)\n            //   0..9:    0% to 90%\n            //   *:       100%\n            //   11..99:  11% to 99% (undocumented)\n            scratch = this._get_prefix_argument(5, 10);\n            if(scratch <= 10) scratch *= 10;\n            if(scratch > 100) scratch = 100;\n            layout.stack_split = scratch;\n            break;\n        case 'inverse_video':\n            settings.inverse_video = !settings.inverse_video;\n            break;\n        case 'reset_layout':\n            settings.layout = settings.default_layout();\n            settings.inverse_video = false;\n            settings.show_mode_indicator = true;\n            full_refresh_needed = true;\n            break;\n        case 'reload_page':\n            window.location.reload();\n            break;\n        default:\n            break;\n        }\n        settings.save();\n        this.perform_undo_or_redo = 'suppress';\n        this.app_component.apply_layout_to_dom();\n        this.clear_all_flashes();\n        if(full_refresh_needed) {\n            // All displayed ItemComponents need to be re-rendered.\n            this.new_document = this.app_state.document.clone_all_items();\n            return stack.clone_all_items();\n        }\n    }\n\n    do_fullscreen(stack, on_or_off) {\n        if(on_or_off === 'off')\n            document.exitFullscreen();\n        else\n            document.getElementsByTagName('html')[0].requestFullscreen();\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // item1, item2, ... => [item1, item2, ...]\n    // column_count is optional; if omitted, the prefix argument is used.\n    do_build_matrix_row(stack, matrix_type, column_count) {\n        const expr_count = column_count ?\n\t      parseInt(column_count) :\n\t      this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const matrix_expr = new ArrayExpr(\n            (matrix_type || 'bmatrix'),\n            1, expr_count, [exprs]);\n        return new_stack.push_expr(matrix_expr);\n    }\n\n    // Stack two ArrayExprs on top of each other.\n    // The type of the array on the stack-top takes precedence if there's a conflict.\n    // The two arrays/matrices have to have the same number of columns.\n    do_stack_arrays(stack) {\n        const [new_stack, m1, m2] = stack.pop_arrays(2);\n        const new_array = ArrayExpr.stack_arrays(m1, m2);\n        if(new_array)\n            return new_stack.push_expr(new_array);\n        else\n            return new_stack.type_error();\n    }\n\n    // Split an ArrayExpr into its component rows and put them on the stack.\n    do_split_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        return new_stack.push_all_exprs(array_expr.split_rows());\n    }\n\n    // Take apart an ArrayExpr and put all its elements on the stack (in row-major order).\n    do_dissolve_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        let dissolved_exprs = [].concat(...array_expr.element_exprs);\n        return new_stack.push_all_exprs(dissolved_exprs);\n    }\n\n    do_insert_matrix_ellipses(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_ellipses());\n    }\n\n    do_transpose_matrix(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.transposed());\n    }\n\n    // Change a matrix bracket type, e.g. to 'pmatrix'.\n    do_change_matrix_type(stack, new_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_array_type(new_type));\n    }\n\n    // is_row_or_column: 'row', 'column'\n    // separator_type: 'solid' or 'dashed'\n    do_array_separator(stack, is_row_or_column, separator_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        const is_column = is_row_or_column === 'column';\n        // NOTE: prefix argument of * indicates the final row or column of the matrix\n        const size = is_column ? matrix_expr.column_count : matrix_expr.row_count;\n        const index = this._get_prefix_argument(1, null);\n        if(index !== null && (index < 1 || index > size-1))\n            return this.error_flash_stack();\n        else\n            return new_stack.push_expr(\n                matrix_expr.with_separator(\n                    is_column,\n                    index === null ? null : index-1,\n                    separator_type, true));\n    }\n\n    do_build_align(stack, align_type) {\n        // NOTE: if align_type = 'cases' or 'rcases', align on ':' infix if there is one, and then remove the infix\n        const expr_count = this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let split_mode;\n        switch(align_type) {\n        case 'gathered': case 'gather': split_mode = 'none'; break;\n        case 'cases': case 'rcases': split_mode = 'colon'; break;\n        case 'cases_if': split_mode = 'colon_if'; align_type = 'cases'; break;\n        case 'rcases_if': split_mode = 'colon_if'; align_type = 'rcases'; break;\n        default: split_mode = 'infix'; break;\n        }\n        const element_exprs = ArrayExpr.split_elements(exprs, split_mode)\n        const array_expr = new ArrayExpr(\n            align_type, element_exprs.length, element_exprs[0].length, element_exprs);\n        return new_stack.push_expr(array_expr);\n    }\n\n    // Take [x_1,...,x_n] from the stack (where n is the prefix argument)\n    // and build an InfixExpr with the given text between each term as an infix operator.\n    // 'final_operand_text' is used as the next to last operand if provided.\n    do_build_infix_list(stack, infix_text, final_operand_text) {\n\tthis._require_prefix_argument(true);\n        const expr_count = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const infix_operator_expr = Expr.text_or_command(infix_text);\n        let operand_exprs = exprs;\n\tif(final_operand_text) {\n            // Splice in the final_operand if specified.\n\t    const final_operand = Expr.text_or_command(final_operand_text);\n            operand_exprs = operand_exprs.slice(0, expr_count-1).concat(\n                [final_operand]).concat(operand_exprs.slice(expr_count-1));\n        }\n        // Build up the resulting InfixExpr one term at a time.\n        let new_expr = operand_exprs[0];\n        for(let i = 1; i < operand_exprs.length; i++)\n            new_expr = InfixExpr.combine_infix(\n                new_expr, operand_exprs[i], infix_operator_expr);\n\treturn new_stack.push_expr(new_expr);\n    }\n\n    // Take [x_1, ..., x_n] from the stack and build a \\substack{...} command.\n    // This is treated internally as a special kind of ArrayExpr.\n    do_build_substack(stack) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const rows = exprs.map(expr => [expr]);  // Nx1 array\n        return new_stack.push_expr(\n            new ArrayExpr('substack', expr_count, 1, rows));\n    }\n\n    do_apply_tag(stack) {\n        let [new_stack, tagged_item, tag_item] = stack.pop(2);\n        if(tagged_item.item_type() !== 'expr')\n            return stack.type_error();\n        let tag_expr;\n        // if(tag_item.item_type() === 'text')\n        //     tag_expr = new CommandExpr('text', [new TextExpr(tag_item.source_text.trim())]);\n        /*else*/ if(tag_item.item_type() === 'expr')\n            tag_expr = tag_item.expr;\n        else\n            return stack.type_error();\n        return new_stack.push(new ExprItem(tagged_item.expr, tag_expr));\n    }\n\n    // Copy stack top to an internal clipboard slot.\n    // A prefix argument may be given to access other slots but this is currently undocumented\n    // because prefix arguments with stack commands highlight items on the stack which is bad UI.\n    do_copy_to_clipboard(stack) {\n        const [new_stack, item] = stack.pop(1);\n        const slot = this._get_prefix_argument(1, '*');\n        this.app_component.state.clipboard_items[slot] = item;\n        if(slot === 1)\n            this.notify(\"Copied to clipboard\");\n        else\n            this.notify(\"Copied to clipboard slot \" + slot);\n        this.perform_undo_or_redo = 'suppress';\n        return new_stack.push(item);\n    }\n\n    do_paste_from_clipboard(stack) {\n        const slot = this._get_prefix_argument(1, '*');\n        const item = this.app_component.state.clipboard_items[slot];\n        if(item)\n            return stack.push(item.clone());\n        else\n            this.error_flash_stack();\n    }\n\n    // screen_percentage=0 means try to scroll so that the top of the selection is flush with the top of the document panel.\n    // screen_percentage=100 tries to make the bottom of the selection flush with the bottom of the panel.\n    // Anything in between is a linear interpolation between the two.\n    do_recenter_document(stack, screen_percentage_string) {\n        const screen_percentage = parseInt(screen_percentage_string);\n        this.perform_undo_or_redo = 'suppress';\n        \n        // TODO: Accessing the DOM elements directly like this is a hack but there's not an easy\n        // way to get it properly from React here.  May want to restructure things to make this cleaner.\n        let container = document.getElementById('document_container');\n        if(!container) return;\n        const selected_elts = container.getElementsByClassName('selected')\n        if(selected_elts.length === 0) return;\n        const selected_elt = selected_elts[0];\n        const top_scrolltop = selected_elt.offsetTop;\n        const bottom_scrolltop = selected_elt.offsetTop + selected_elt.offsetHeight - container.clientHeight;\n        const ratio = screen_percentage/100;\n        const new_scrolltop = Math.round(top_scrolltop*(1-ratio) + bottom_scrolltop*ratio);\n        container.scrollTop = new_scrolltop;\n    }\n\n    do_scroll(stack, panel_name, direction_string, percentage_string) {\n        let panel_elt = document.getElementById(panel_name);\n        if(!panel_elt) return;\n        const percentage = parseInt(percentage_string || '50') / 100.0;\n        if(direction_string === 'horizontal')\n            panel_elt.scrollLeft += Math.round(panel_elt.clientWidth * percentage)\n        else\n            panel_elt.scrollTop += Math.round(panel_elt.clientHeight * percentage);\n    }\n\n    do_export_document_as_text(stack) {\n        const exported_text = this.app_state.document.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied document to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_export_stack_items_as_text(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        const exported_text = items.map(item => item.to_text()).join(\"\\n\\n\");\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied \" + arg + \" item\" + (arg === 1 ? \"\" : \"s\") + \" to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n}\n\n\nexport default InputContext;\n\n","\n\nimport './katex.css';  // Must be imported before App.css\nimport './App.css';\n\nimport React from 'react';\nimport katex from 'katex';\nimport {\n    Settings, AppState, UndoStack, DocumentStorage,\n    ImportExportState, FileManagerState\n} from './Models';\nimport InputContext from './Actions';\n\n\nconst $e = React.createElement;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // NOTE: settings are stored in the localStorage, but documents use indexedDB.\n        // This is mainly because we need the settings before the indexedDB may be ready.\n        let settings = Settings.load_from_local_storage();\n\n        this.state = {\n            app_state: new AppState(),\n            settings: settings,\n            file_manager_state: new FileManagerState(),\n            import_export_state: new ImportExportState(),\n            document_storage: new DocumentStorage(),\n            input_context: new InputContext(this, settings),\n            undo_stack: new UndoStack(),\n            clipboard_items: {}\n        };\n        this.state.undo_stack.clear(this.state.app_state);\n        this.state.import_export_state.document_storage = this.state.document_storage;\n        this.state.import_export_state.onstatechange = () => this.import_export_state_changed();\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n\n        this.state.document_storage.open_database(this.on_open_database.bind(this));\n    }\n\n    // Database has been opened; request the list of documents, and try to load the last-opened file.\n    on_open_database() {\n        this.request_file_list();\n        if(this.state.settings.last_opened_filename)\n            this.start_loading_filename(this.state.settings.last_opened_filename);\n        else {\n            let file_manager_state = this.state.file_manager_state;\n            let settings = this.state.settings;\n            const filename = 'untitled';\n            file_manager_state.current_filename = file_manager_state.selected_filename = filename;\n            settings.last_opened_filename = filename;\n            settings.save();\n        }\n    }\n\n    file_manager_state_changed() {\n        this.setState({file_manager_state: this.state.file_manager_state});\n    }\n\n    import_export_state_changed() {\n        const import_export_state = this.state.import_export_state;\n        this.setState({import_export_state: import_export_state});\n        if(import_export_state.file_list_needs_update) {\n            import_export_state.file_list_needs_update = false;\n            this.request_file_list();\n        }\n    }\n\n    // Start loading the current list of documents from the IndexedDB database.\n    request_file_list() {\n        this.state.document_storage.fetch_file_list(\n            this.file_list_request_finished.bind(this),\n            this.file_list_request_error.bind(this));\n    }\n\n    file_list_request_finished(file_list) {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = false;\n        file_manager_state.file_list = file_list;\n        file_manager_state.sort_file_list('filename', true);\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    file_list_request_error() {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = true;\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    start_loading_filename(filename) {\n        this.state.document_storage.load_state(\n            filename,\n            this.file_load_finished.bind(this),\n            this.file_load_error.bind(this));\n    }\n\n    file_load_finished(filename, new_app_state) {\n        const file_manager_state = this.state.file_manager_state;\n        const settings = this.state.settings;\n        file_manager_state.selected_filename = file_manager_state.current_filename = filename;\n        settings.last_opened_filename = filename;\n        settings.save();\n        this.setState({app_state: new_app_state, file_manager_state: file_manager_state});\n        this.state.undo_stack.clear(new_app_state);\n        this.state.input_context.notify('Loaded: ' + filename);\n    }\n\n    // TODO: It's not necessarily an error if the file doesn't exist,\n    // but we should make sure to clear stack/document in that case\n    // (same as do_start_new_file).\n    file_load_error(filename, error) {\n        //alert(\"Unable to load file \\\"\" + filename + \"\\\".\");\n    }\n\n    componentDidMount() {\n        this.apply_layout_to_dom();\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        window.addEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.addEventListener('pageshow', this.handleVisibilityChange);\n//      window.addEventListener('focus', this.handleVisibilityChange);\n        this.request_file_list();\n    }\n\n    apply_layout_to_dom() {\n        let body = document.getElementById('body');\n        if(this.state.settings.inverse_video)\n            body.classList.add('inverse_video');\n        else\n            body.classList.remove('inverse_video');\n        if(this.stack_panel_ref.current && this.document_panel_ref.current &&\n           this.popup_panel_ref.current) {\n            this.state.settings.apply_layout_to_dom(\n                this.stack_panel_ref.current, this.document_panel_ref.current,\n                this.popup_panel_ref.current);\n        }\n    }\n\n    componentDidUpdate() {\n        // Show the currently opened file in the browser's document title.\n        const filename = this.state.file_manager_state.current_filename;\n        const new_title = '[' + (filename || 'rpnlatex') + ']';\n        if(new_title !== document.title)\n            document.title = new_title;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.removeEventListener('pageshow', this.handleVisibilityChange);\n//      window.removeEventListener('focus', this.handleVisibilityChange);\n    }\n\n    render() {\n\tconst app_state = this.state.app_state;\n\tconst settings = this.state.settings;\n\tconst input_context = this.state.input_context;\n\n        this.stack_panel_ref = React.createRef();\n        this.document_panel_ref = React.createRef();\n        this.popup_panel_ref = React.createRef();\n\n\tlet stack_panel_components = [\n\t    $e(StackItemsComponent, {\n                settings: settings,\n                stack: app_state.stack,\n                input_context: input_context\n            })];\n\tif(settings.show_mode_indicator || input_context.notification_text)\n\t    stack_panel_components.push(\n\t\t$e(ModeIndicatorComponent, {\n\t\t    app_state: app_state,\n\t\t    input_context: input_context\n\t\t}));\n\n        return $e(\n            'div', {id: 'panel_layout'},\n            $e('div', {className: 'panel stack_panel', id: 'stack_panel', ref: this.stack_panel_ref},\n\t       ...stack_panel_components),\n            $e('div', {className: 'panel document_panel', id: 'document_panel', ref: this.document_panel_ref},\n               $e('div', {id: 'document_container'},\n                  $e(DocumentComponent, {\n                      settings: settings,\n                      document: app_state.document,\n                      filename: this.state.file_manager_state.current_filename,\n                      is_dirty: app_state.is_dirty  /* TODO: revisit, maybe remove this */\n                  }))),\n            $e(PopupPanelComponent, {\n                settings: settings,\n                popup_panel_ref: this.popup_panel_ref,\n                import_export_state: this.state.import_export_state,\n                document_storage: this.state.document_storage,\n                file_manager_state: this.state.file_manager_state\n            }));\n    }\n\n    handleKeyDown(event) {\n        // No Alt/Meta key combinations are handled.\n        if(event.altKey || event.metaKey)\n            return;\n        const key = this._keyname_from_event(event);\n        if(key === 'Meta' || key === 'Ctrl+Control')\n            return;\n        \n        let app_state = this.state.app_state;\n        let [was_handled, new_app_state] = this.state.input_context.handle_key(app_state, key);\n        if(was_handled) {\n            event.preventDefault();\n            // TODO: event.stopPropagation();\n            const scratch = this.manage_undo_state(new_app_state);\n            if(scratch)\n                new_app_state = scratch;\n            else   // undo/redo \"failed\"\n                this.state.input_context.error_flash_stack();\n\n            let state_updates = {app_state: new_app_state};\n            if(this.state.input_context.files_changed) {\n                this.request_file_list();\n                state_updates.file_manager_state = this.state.file_manager_state;  // TODO: revisit\n            }\n            this.setState(state_updates);\n        }\n    }\n\n    _keyname_from_event(event) {\n        let key = event.key;\n\n        if((key.startsWith('Arrow') || key === 'Enter' || key === 'Backspace') && event.shiftKey)\n            key = 'Shift+' + key;\n        if(event.ctrlKey)\n            key = 'Ctrl+' + key;\n\n        // NOTE: none of the Alt stuff works on Firefox for some reason.  Chromium seems ok.\n        // if(event.metaKey || event.altKey || event.getModifierState('Alt') || event.getModifierState('Meta'))\n        //     key = 'Alt+' + key;\n\n        return key;\n    }\n\n    // Auto-save when window is being closed.\n    handleBeforeUnload(event) {\n        const filename = this.state.file_manager_state.current_filename;\n        if(filename)\n            this.state.document_storage.save_state(this.state.app_state, filename);\n        return null;\n    }\n\n    // On iOS Safari, this event is triggered when resuming the tab.\n    // When this happens, the scroll positions are reset, but a re-render takes care of that\n    // via DocumentComponent.ensure_selection_visible().\n    handleVisibilityChange(event) {\n        this.setState({});  // force React to re-render\n    }\n\n    // Returns 'new' new_app_state.\n    manage_undo_state(new_app_state) {\n        let undo_stack = this.state.undo_stack;\n        switch(this.state.input_context.perform_undo_or_redo) {\n        case 'undo': return undo_stack.undo_state();\n        case 'redo': return undo_stack.redo_state();\n        case 'suppress': return new_app_state;  // Normal action, but don't remember undo state.\n        case 'clear':\n            undo_stack.clear(new_app_state);\n            return new_app_state;\n        default:\n            // Normal action; save undo state\n            undo_stack.push_state(new_app_state);\n            return new_app_state;\n        }\n    }\n}\n\n\n// Shows current input mode in top-right corner of stack display\nclass ModeIndicatorComponent extends React.Component {\n    render() {\n        const input_context = this.props.input_context;\n        let indicator_item = undefined;\n        const notification_text = input_context.notification_text;\n        let input_mode = input_context.mode;\n        if(input_context.prefix_argument !== null) {\n            // Show current prefix argument in mode indicator\n            input_mode = [\n                input_mode, '(',\n                (input_context.prefix_argument < 0 ? '*' : input_context.prefix_argument.toString()),\n                ')'\n            ].join('');\n        }\n        // if(input_context.text_entry)\n        //     input_mode = 'text_entry';\n        if(notification_text) {\n            // Auto-highlight anything after the colon in the notification message.\n            const colon = notification_text.indexOf(':');\n            if(colon >= 0)\n                indicator_item = $e(\n                    'span', {className: 'notification'},\n                    $e('span', {}, notification_text.slice(0, colon+1)),\n                    $e('span', {className: 'highlighted'}, notification_text.slice(colon+1)));\n            else\n                indicator_item = $e('span', {className: 'notification'}, notification_text);\n        }\n        else if(input_mode !== 'base')\n            indicator_item = $e(\n                'span', {className: 'mode'},\n                input_mode.replaceAll('_', ' '));\n        return $e('div', {className: 'indicator'}, indicator_item);\n    }\n}\n\n\nclass StackItemsComponent extends React.Component {\n    render() {\n        let input_context = this.props.input_context;\n        const item_components = this.props.stack.items.map((item, index) => {\n            // If there's an active prefix argument for stack commands, highlight the stack items that\n            // will be affected.\n            const selected = (\n                input_context.mode === 'stack' &&\n                    (input_context.prefix_argument < 0 ||\n                     this.props.stack.items.length-index <= input_context.prefix_argument));\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: React.createRef(),\n                    key: item.react_key(index)\n                });\n        });\n        if(input_context.text_entry) {\n            const component = $e(\n                TextEntryComponent, {\n                    text: input_context.text_entry.current_text,\n                    cursor_position: input_context.text_entry.cursor_position,\n                    entry_type: input_context.text_entry.mode,\n                    key: 'textentry'\n                });\n            item_components.push(component);\n        }\n        let class_names = ['stack_items'];\n        if(this.props.settings.layout.stack_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')}, item_components);\n    }\n}\n\n\nclass DocumentComponent extends React.Component {\n    render() {\n        const document = this.props.document;\n        const subcomponents = document.items.map((item, index) => {\n            let item_ref = React.createRef();\n            const is_selected = document.selection_index === index+1;\n            if(is_selected) this.selected_item_ref = item_ref;\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: is_selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: item_ref,\n                    key: item.react_key(index)\n                });\n        });\n\n        // \"Spacer\" after the last document item.  This enables the document view to scroll\n        // a little past the end so that we don't force the last document item to be flush\n        // against the bottom of the screen.\n        subcomponents.push(\n            $e('div', {className: 'bottom_spacer', key: 'bottom_spacer'}));\n\n        // Top of document \"spacer\", which is used to indicate that items are to be\n        // inserted at the top of the document.  Unlike the bottom spacer, the top\n        // spacer can be the current document selection.\n        const top_is_selected = document.selection_index === 0;\n        if(top_is_selected)\n            this.selected_item_ref = React.createRef();\n        const top_spacer = $e(\n            'div', {\n                className: 'top_spacer' + (top_is_selected ? ' selected' : ''),\n                key: 'top_spacer',\n                ref: top_is_selected ? this.selected_item_ref : null\n            });\n        \n        let class_names = ['document_items'];\n        if(this.props.settings.layout.document_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')},\n                  [top_spacer].concat(subcomponents));\n    }\n\n    componentDidUpdate() {\n        this.ensure_selection_visible();\n    }\n\n    ensure_selection_visible() {\n        if(!this.selected_item_ref) return;\n        const item = this.selected_item_ref.current;\n        if(!item) return;\n        let container = document.getElementById('document_container');\n        const extra_space = item.offsetHeight/2;\n        if(item.offsetTop < container.scrollTop)\n            container.scrollTop = item.offsetTop - extra_space;\n        if(item.offsetTop + item.offsetHeight > container.scrollTop + container.offsetHeight)\n            container.scrollTop = item.offsetTop + item.offsetHeight - container.offsetHeight + extra_space;\n    }\n}\n\n\n// Accumulate a single line of text for literal or Latex command entry.\nclass TextEntryComponent extends React.Component {\n    render() {\n        const class_name = 'text_entry ' + this.props.entry_type + '_mode';\n        const cursor_pos = this.props.cursor_position;\n        let s = this.props.text;\n        if(this.props.cursor_position === s.length)\n            s += ' ';  // so that we can show the cursor when it's at the end of the text\n        return $e(\n            'div', {className: class_name},\n            $e('span', {className: 'normal_characters'}, s.slice(0, cursor_pos)),\n            $e('span', {className: 'cursored_character'}, s.slice(cursor_pos, cursor_pos+1)),\n            $e('span', {className: 'normal_characters'}, s.slice(cursor_pos+1)));\n    }\n}\n\n\nclass FileManagerComponent extends React.Component {\n    render() {\n        const show_import_export = !this.props.file_manager_state.unavailable;\n        this.file_input_ref = React.createRef();\n        return $e(\n            'div', {className: 'file_header', id: 'files_panel'},\n            $e('h2', {}, 'File Manager'),\n            this.render_current_filename(),\n            this.render_file_table(),\n            this.render_shortcuts(),\n            show_import_export && $e('h2', {}, 'Export/Import'),\n            show_import_export && this.render_export_import_section()\n        );\n    }\n\n    render_export_import_section() {\n        const import_export_state = this.props.import_export_state;\n        let subcomponents = [];\n\n        subcomponents.push(\n            $e('p', {}, 'This section lets you download the internal browser document storage as a .zip file, or restore the internal storage from a previously downloaded export.'));\n\n        subcomponents.push(\n            $e('p', {},\n               $e('strong', {}, import_export_state.textual_state())));\n\n        if(import_export_state.state === 'idle')\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {\n                       href: '#',\n                       onClick: this.start_exporting.bind(this)\n                   }, 'Prepare Export')));\n        if(import_export_state.download_available()) {\n            const export_filename = import_export_state.generate_download_filename();\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {href: import_export_state.download_url, download: export_filename},\n                      'Download: ' + export_filename)));\n        }\n\n        // Show file upload element if ready to accept uploads.\n        if(import_export_state.state === 'idle') {\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {}, 'Import Zip File: '),\n                   $e('input', {\n                       type: 'file',\n                       ref: this.file_input_ref\n                   }),\n                   $e('input', {\n                       type: 'button',\n                       value: 'Upload',\n                       onClick: this.handle_file_upload.bind(this)\n                   })));\n        }\n\n        // Show import results when import finished.\n        if(import_export_state.state === 'idle' && import_export_state.import_result_string)\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {style: {fontWeight: 'bold'}}, 'Import result: '),\n                   $e('span', {}, import_export_state.import_result_string)));\n        \n        return $e('div', {}, ...subcomponents);\n    }\n\n    render_current_filename() {\n        const current_filename = this.props.file_manager_state.current_filename;\n        if(!current_filename) return null;\n        return $e(\n            'div', {className: 'current_file'},\n            $e('label', {}, 'Current file:'),\n            $e('span', {className: 'filename'}, current_filename));\n    }\n\n    render_file_table() {\n        const file_manager_state = this.props.file_manager_state;\n        if(file_manager_state.unavailable)\n            return $e('p', {}, 'IndexedDB support unavailable in your browser.  You will be unable to save or load documents.  Note that Firefox disables IndexedDB when in Private Browsing mode.');\n        else if(file_manager_state.file_list && file_manager_state.file_list.length > 0) {\n            return $e(\n                'div', {},\n                $e('table', {className: 'file_table'},\n                   $e('thead', {},\n                      $e('tr', {},\n                         $e('th', {className: 'filename'}, 'Filename'),\n                         $e('th', {className: 'filesize', colSpan: '2'}, 'Size'),\n                         $e('th', {className: 'timestamp', colSpan: '2'}, 'Last Modified'))),\n                   $e('tbody', {},\n                      file_manager_state.file_list.map(\n                          (file, index) => this._render_file_list_row(file, index)))));\n        }\n        else if(file_manager_state.file_list)\n            return $e('p', {}, 'No files created yet.');\n        else\n            return $e('p', {}, 'Fetching file list...');\n    }\n\n    _render_file_list_row(file, index) {\n        const file_manager_state = this.props.file_manager_state;\n        let class_names = [];\n        if(file.filename === file_manager_state.selected_filename) class_names.push('selected_file');\n        if(file.filename === file_manager_state.current_filename) class_names.push('current_file');\n        const item_count = file.document_item_count + file.stack_item_count;\n        return $e(\n            'tr', {className: class_names.join(' '), key: 'file_' + file.filename},\n            $e('td', {className: 'filename'}, file.filename),\n            $e('td', {className: 'filesize'},\n               Math.floor((file.filesize+1023)/1024) + ' kb'),\n            $e('td', {className: 'filesize'},\n               item_count + ' object' + (item_count === 1 ? '' : 's')),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleDateString()),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleTimeString()));\n    }\n\n    render_shortcuts() {\n        const help_specs = [\n            ['Escape', 'Close file manager'],\n            ['Arrows', 'Select next/previous file'],\n            ['Enter', 'Open selected file'],\n            ['d', 'Delete selected file'],\n            ['n', 'Start a new empty file'],\n            ['s', 'Save current file'], // + (current_filename ? (' (' + current_filename + ')') : '')],\n            ['S', 'Save as...']\n        ];\n        const keyhelp_elements = help_specs.map(spec => {\n            const [keyname, helptext] = spec;\n            return $e(\n                'li', {},\n                $e('span', {className: 'keybinding'}, keyname),\n                $e('span', {}, ' ' + helptext));\n        });\n        return $e('ul', {className: 'keybindings'}, ...keyhelp_elements);\n    }\n\n    handle_file_upload(event) {\n        const file_input_elt = this.file_input_ref.current;\n        if(!file_input_elt) return;\n        const file_list = file_input_elt.files;\n        if(file_list.length === 1)\n            this.start_importing(file_list[0]);\n        else if(file_list.length > 1)\n            alert('Please select a single .zip file to import.');\n        else\n            alert('Please select a .zip file to import.');\n    }\n\n    start_importing(file) {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_importing(file);\n    }\n\n    start_exporting() {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_exporting();\n    }\n}\n\n\n// Displays an Item instance in any context (stack/document).\n// Props: {item: Item, selected: Bool}\nclass ItemComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        let ref = this.props.item_ref;\n        let className = this.props.selected ? 'selected ' : '';\n        if(item.item_type() === 'text' && item.is_heading)\n            className = 'heading_style ' + className;\n        switch(item.item_type()) {\n        case 'expr':\n            if(item.tag_expr) {\n                this.tag_ref = React.createRef();\n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: 'tag_expr', ref: this.tag_ref}, ''),\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n            }\n            else \n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n        case 'text':\n\t    if(item.is_empty()) {\n\t\t// Empty TextItems are rendered as separator lines as a special case.\n\t\treturn $e(\n                    'div', {className: className + 'separator_item'},\n                    $e('hr'));\n\t    }\n\t    else {\n\t\t// TODO: The CSS/markup for heading texts is a little hacky\n\t\treturn $e(\n                    'div', {className: 'text_item'},\n                    $e('div', {className: className + 'latex_fragment'},\n                       $e('div', {className: 'latex_fragment_inner', ref: ref}, '')));\n\t    }\n\tcase 'code':\n\t    // NOTE: only LaTeX source code snippets currently implemented.\n\t    return $e(\n\t\t'div', {className: 'latex_source_item'},\n\t\t$e('div', {className: 'latex_source'}, item.source));\n        default:\n            return $e('div', {}, '????');\n        }\n    }\n\n    componentDidMount() {\n        const item = this.props.item;\n        const node = this.props.item_ref.current;\n        if(!node) return;  // shouldn't happen\n        if(item.item_type() === 'expr') {\n            // Render math with KaTeX\n            this._render_with_katex(item.to_latex(), node, !this.props.inline_math);\n            if(item.tag_expr && this.tag_ref.current)\n                this._render_with_katex(item.tag_expr.to_latex(), this.tag_ref.current, false);\n        }\n        else if(item.item_type() === 'text') {\n            // TextItems are always rendered in inline mode.\n            // Note that this means that text items will always be left-aligned regardless\n            // of the rightalign_math layout settings.\n            this._render_with_katex(item.to_latex(), node, false);\n        }\n    }\n\n    _render_with_katex(latex_code, node, display_mode) {\n        if(latex_code === '' || latex_code === \"\\\\,\") {\n            // Empty/blank latex expression - fake it with something so that it's visible.\n            latex_code = \"\\\\text{(blank)}\";\n        }\n        try {\n            // NOTE: trust: true here allows the use of \\htmlClass etc.\n            katex.render(latex_code, node, {\n\t\tthrowOnError: false,\n\t\tdisplayMode: display_mode,\n\t\tfleqn: true,\n\t\ttrust: true,\n                strict: false,\n\t\tminRuleThickness: 0.06  // 0.04 default is too thin (but unfortunately this makes the sqrt bars too thick too)\n\t    });\n        }\n        catch(e) {\n            // KaTeX throws actual errors for some inputs, even if throwOnError is false.\n            // Example: \\texttt{\\textbf{test}}\n            const msg = e.toString();\n            node.innerHTML = '<div style=\"color:red;\">' + msg + '</div>';\n        }\n    }\n}\n\n\nclass PopupPanelComponent extends React.Component {\n    render() {\n        this.refs = {\n            help: React.createRef(),\n            help_content: React.createRef()\n        };\n        const popup_mode = this.props.settings.popup_mode;\n        let subcomponent = null;\n        if(popup_mode === 'files') {\n            subcomponent = $e(\n                'div', {id: 'files_container'},\n                $e(FileManagerComponent, {\n                    import_export_state: this.props.import_export_state,\n                    document_storage: this.props.document_storage,\n                    file_manager_state: this.props.file_manager_state\n                }));\n        }\n        return $e(\n            'div', {id: 'popup_panel', ref: this.props.popup_panel_ref},\n            subcomponent,\n            $e('div', {id: 'help_container', ref: this.refs.help},\n               $e('div', {className: 'help', ref: this.refs.help_content})));\n    }\n\n    componentDidMount() {\n        const help_source_elt = document.getElementById('helptext');\n        const help_dest_elt = this.refs.help_content.current;\n        if(help_source_elt) {\n            help_source_elt.style.display = 'block';\n            this._render_help_latex(help_source_elt);\n            help_source_elt.parentNode.removeChild(help_source_elt);\n            help_dest_elt.appendChild(help_source_elt);\n        }\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.settings.popup_mode;\n        if(this.refs.help.current)\n            this.refs.help.current.style.display = (mode === 'help' ? 'block' : 'none');\n        if(mode === 'help' &&\n           this.props.settings.help_scroll_top !== undefined &&\n           this.props.popup_panel_ref.current) {\n            // Restore helptext scroll position previously saved by 'do_toggle_popup'.\n            this.props.popup_panel_ref.current.scrollTop = this.props.settings.help_scroll_top;\n            this.props.settings.help_scroll_top = undefined;\n        }\n    }\n\n    // Render any <code>...</code> spans in the help text with KaTeX.\n    _render_help_latex(help_elt) {\n        const children = help_elt.getElementsByTagName('code');\n        for(let i = 0; i < children.length; i++) {\n            let code_elt = children[i];\n            const latex_code = code_elt.textContent;\n            if(latex_code)\n                katex.render(latex_code, code_elt, {\n                    throwOnError: false,\n                    displayMode: false,\n                    trust: true,\n                    strict: false\n                });\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}