{"version":3,"sources":["Keymap.js","Models.js","Actions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditorKeymap","base","files","help","stack","config","text_entry","math_text_entry","latex_entry","delimiters","custom_delimiters","operator","named_operator","named_underset_operator","hyperbolic","inverse","inverse_hyperbolic","squared","squared_hyperbolic","integral_limits","derivative","infix","relational","symbol","decoration","array","change_matrix_type","script","calligraphic","lowercase_greek","uppercase_greek","variant_greek","Keymap","this","bindings","KeybindingTable","mode","key","mode_map","test","Settings","current_keymap","selected_theme","last_opened_filename","popup_mode","show_mode_indicator","layout","default_layout","zoom_factor","stack_rightalign_math","document_rightalign_math","inline_math","stack_side","stack_split","stack_panel_elt","document_panel_elt","popup_panel_elt","style","display","root_elt","document","getElementById","percentage","Math","round","pow","fontSize","_split_rectangle","x","y","w","h","stack_bounds","document_bounds","_apply_bounds","bounds","side","split_percent","w1","w2","h1","h2","elt","left","top","width","height","serialized_string","JSON","stringify","to_json","localStorage","setItem","json","saved_keys","forEach","getItem","from_json","parse","s","LatexEmitter","tokens","last_token_type","text","token_type","length","push","expr","emit_latex","force_braces","grouped","fn","old_tokens","old_last_token_type","join","emit_token","last_token","_is_latex_identifier_char","charAt","ch","command_name","command_options","startsWith","command","slice","envname","environment_argument","AppState","_default_stack","Document","is_dirty","item","TextItem","TextItemTextElement","Stack","app_state","format","UndoStack","state_stack","max_stack_depth","undo_count","initial_app_state","state","same_as","DocumentStorage","open_request","database","onsuccess","indexedDB","on_open_success","open","onupgradeneeded","handle_upgrade_database","bind","handle_open_success","onerror","handle_open_error","event","result","oldVersion","build_initial_schema","createObjectStore","keyPath","onversionchange","close","alert","readwrite","transaction","filename","replaceAll","trim","request","create_transaction","objectStore","get","serialized_json","metadata_json","filesize","description","stack_item_count","depth","document_item_count","items","timestamp","Date","put","oncomplete","onabort","delete","getAll","row","ts_value","onrowfetched","onfinished","cursor","openCursor","c","target","value","continue","ImportExportState","document_storage","import_count","failed_count","error_message","download_url","import_result_string","file_list_needs_update","onstatechange","date","getFullYear","toString","toLocaleString","month","toLowerCase","getDate","padStart","new_state","zip","JSZip","fetch_all_documents","add_document_json_to_zip","start_compressing","change_state","file","generateAsync","type","then","content_blob","finished_compressing","URL","revokeObjectURL","clear_download_url","createObjectURL","zipfile","reader","FileReader","addEventListener","process_uploaded_data","readAsArrayBuffer","data","loadAsync","promises","endsWith","async","content","import_file","name","Promise","all","parsed","e","save_state","FileManagerState","file_list","selected_filename","current_filename","unavailable","field","ascending","sort","a","b","a_value","b_value","basename","replace","candidate","n","some","offset","new_filename","f","index","new_index","Expr","emitter","finished_string","expr_type","json_keys","json_key","obj","undefined","map","to_latex","found","visit","old_expr","new_expr","CommandExpr","_list","operand_exprs","options","PrefixExpr","_expr","base_expr","prefix_expr","InfixExpr","operator_expr","left_expr","right_expr","split","PlaceholderExpr","TextExpr","SequenceExpr","exprs","DelimiterExpr","left_type","right_type","middle_type","inner_exprs","fixed_size","SubscriptSuperscriptExpr","subscript_expr","superscript_expr","ArrayExpr","array_type","row_count","column_count","_list2d","element_exprs","row_separators","column_separators","json_array","expr_json","row_exprs","right","concat","combine_command_pair","left_name","right_name","operand_count","as_bold","new_command_name","indexOf","operand_expr","grouped_expr","substitute_expr","op_expr","op","operator_text","new_split_mode","problematic_large_operators","last_was_large_op","is_command_with_name","emit_latex_fixed_size","emit_latex_flex_size","text_or_command","needs_autoparenthesization","parenthesize","Array","fill","t","new_array_type","every","new_element_exprs","make_cell","new_row_count","new_column_count","inserted_row_exprs","i","splice","_transpose_cell","cell_expr","is_column","toggle","separators","size","left_delim","right_delim","pieces","column_layout_string","has_row_separators","begin_environment","row_index","row_separator","separator","col_index","align_separator","end_environment","is_matrix","_emit_array_with_separators","expr1","expr2","split_mode","_split_expr","combine_pair","Item","serial","next_serial","prefix","serial_number","item_type","ExprItem","tag_expr","elements","element_json","TextItemElement","is_heading","CodeItem","language","source","from_string","to_text","TextItemExprElement","is_bold","TextItemRawElement","raw","_latex_escape","replacements","match","string","element","is_empty","is_text","is_raw","is_explicit_space","is_expr","substitution_expr","new_elements","placeholder_expr","find_placeholder","item1","item2","separator_text","from_expr","merged_elements","last_index","last_merged_element","clone","check","underflow","_unchecked_pop","check_exprs","type_error","new_stack","pop_exprs","pop_arrays","array_exprs","Error","push_all","push_all_exprs","object_type","item_json","selection_index","new_item","selected_item","delete_selection","move_selection_by","insert_item","InputContext","app_component","settings","new_mode","new_document","files_changed","file_saved","notification_text","perform_undo_or_redo","prefix_argument","preserve_prefix_argument","text_entry_mode","text_entry_edited_item","effective_mode","lookup_binding","last_keypress","process_command","commands","piece","token","process_command_batch","parameters","handler_function","new_app_state","message","error_flash_stack","dom_element","classList","remove","offsetWidth","add","error_flash_document","error_flash_element","elt_id","child_expr","is_superscript","autoparenthesize","autoparenthesize_frac","_build_subscript_superscript","push_expr","make_subscript_superscript","new_prime_expr","new_superscript_expr","is_prime_command","switch_to_mode","new_prefix_argument","parseInt","default_value","all_value","star_ok","arg","_get_prefix_argument","pop","new_items","reverse","last_item","amount_string","amount","shift_selection_by","file_manager_state","do_save_file_as","notify","save","request_file_list","window","prompt","sanitize_filename","confirm","do_save_file","start_loading_filename","generate_unused_filename","do_toggle_popup","offset_string","find_adjacent_filename","delete_state","preserve","empty_item","do_insert","case_type","toUpperCase","convert_fn","opname","arity_string","arity","popped_exprs","result_expr","facename","funcname","superscript_text","arg_expr","orig_funcname","sup_or_sub","make_operatorname","underset_expr","hat_op","inner_expr","class_name","class_name_2","new_class_name","delimiter_type","middle","_finish_custom_delimiters","d","as_fixed_size","left_item","right_item","concatenate_items","phrase","conjunction_item","infix_expr","new_infix_expr","with_split_mode","overset_op","stacked_expr","new_stack_2","original_expr","new_text_item","try_substitute_placeholder","which_side","extracted_expr","initial_text","cancel_text_entry","new_mode_when_empty","textstyle","from_string_with_placeholders","as_editable_string","do_start_text_entry","_latex_unescape","latex_source","code_item","expr_count_string","expr_count","arg_count_string","arg_count","command_expr","mode_string","help_location","scrollTop","help_scroll_top","apply_layout_to_dom","config_option","scratch","full_refresh_needed","clear_all_flashes","clone_all_items","on_or_off","exitFullscreen","getElementsByTagName","requestFullscreen","matrix_type","matrix_expr","m1","m2","new_array","stack_arrays","array_expr","split_rows","dissolved_exprs","pop_matrices","with_ellipses","transposed","new_type","with_array_type","is_row_or_column","separator_type","with_separator","align_type","split_elements","final_separator_text","_require_prefix_argument","infix_text","infix_operator_expr","tagged_item","tag_item","slot","clipboard_items","screen_percentage_string","screen_percentage","container","selected_elts","getElementsByClassName","selected_elt","top_scrolltop","offsetTop","bottom_scrolltop","offsetHeight","clientHeight","ratio","new_scrolltop","panel_name","direction_string","percentage_string","panel_elt","scrollLeft","clientWidth","exported_text","navigator","clipboard","writeText","$e","React","createElement","App","props","load_from_local_storage","import_export_state","input_context","undo_stack","clear","import_export_state_changed","handleKeyDown","handleBeforeUnload","handleVisibilityChange","open_database","on_open_database","setState","fetch_file_list","file_list_request_finished","file_list_request_error","sort_file_list","load_state","file_load_finished","file_load_error","error","stack_panel_ref","current","document_panel_ref","popup_panel_ref","program_name","new_title","title","removeEventListener","createRef","stack_panel_components","StackItemsComponent","ModeIndicatorComponent","id","className","ref","DocumentComponent","PopupPanelComponent","altKey","metaKey","_keyname_from_event","handle_key","was_handled","preventDefault","manage_undo_state","state_updates","shiftKey","ctrlKey","undo_state","redo_state","push_state","Component","indicator_item","input_mode","colon","item_components","selected","ItemComponent","item_ref","react_key","component","TextEntryComponent","entry_type","class_names","subcomponents","is_selected","selected_item_ref","top_is_selected","top_spacer","ensure_selection_visible","extra_space","FileManagerComponent","show_import_export","file_input_ref","render_current_filename","render_file_table","render_shortcuts","render_export_import_section","textual_state","href","onClick","start_exporting","download_available","export_filename","generate_download_filename","download","handle_file_upload","fontWeight","colSpan","_render_file_list_row","item_count","floor","toLocaleDateString","toLocaleTimeString","keyhelp_elements","spec","keyname","helptext","file_input_elt","start_importing","tag_ref","node","_render_with_katex","latex_code","display_mode","katex","render","throwOnError","displayMode","fleqn","trust","minRuleThickness","msg","innerHTML","refs","help_content","subcomponent","help_source_elt","help_dest_elt","_render_help_latex","parentNode","removeChild","appendChild","location","hash","help_elt","children","code_elt","textContent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","console","log","onUpdate","onSuccess","catch","ReactDOMClient","createRoot","process","origin","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.696a44c6.chunk.js","sourcesContent":["\nconst EditorKeymap = {\n    base: {\n        // Self-insert keys\n        '[alnum]': \"self_insert\",\n        '#': \"insert \\\\#\",\n        '@': \"insert @\",\n        '*': \"insert *\",\n        '~': \"insert \\\\sim\",\n\n        // Immediate action special keys\n        '!': \"autoparenthesize;insert !;concat\",\n        'Enter': \"subscript\",\n\t'Shift+Enter': \"edit_item\",\n        '_': \"subscript\",\n        '^': \"superscript\",\n        'Backspace': \"pop\",\n        \"`\": \"superscript\",\n        ' ': \"autoparenthesize 2;concat\",\n        '=': \"mode relational\",\n        '<': \"infix <\",\n        '>': \"infix >\",\n        '+': \"infix +\",\n        '-': \"infix -\",\n        ']': \"make_bold\",\n        '[': \"delimiters [ ]\",\n        '(': \"delimiters ( )\",\n        '{': \"delimiters \\\\{ \\\\}\",\n\n        // Document commands\n        'ArrowUp': \"change_document_selection -1\",\n        'Shift+ArrowUp': \"shift_document_selection -1\",\n        'ArrowDown': \"change_document_selection +1\",\n        'Shift+ArrowDown': \"shift_document_selection +1\",\n        'PageUp': \"change_document_selection -5\",  // TODO: scroll based on viewport height instead\n        'PageDown': \"change_document_selection +5\",\n        'Home': \"change_document_selection -10000\",\n        'End': \"change_document_selection +10000\",\n\n        // Stack scrolling commands\n        'ArrowRight': \"scroll stack_panel horizontal 75\",\n        'ArrowLeft': \"scroll stack_panel horizontal -75\",\n\n        // Prefix keys\n        'Tab': \"mode stack\",\n        \"'\": \"mode symbol\",\n        '.': \"mode decoration\",\n        ',': \"mode infix\",\n        ')': \"mode delimiters\",\n        '}': \"custom_delimiter\",\n        ';': \"mode lowercase_greek\",\n        ':': \"mode uppercase_greek\",\n        '%': \"mode calligraphic\",\n        '&': \"mode script\",\n        '/': \"mode operator\",\n        \"\\\\\": \"start_text_entry math_text_entry\",\n        \"\\\"\": \"start_text_entry text_entry\",\n        '|': \"mode array\",\n        '$': \"mode config\",\n        '?': \"toggle_popup help\",\n\n        // Other Ctrl-based shortcuts\n        'Ctrl+0': \"insert 0;subscript\",\n        'Ctrl+1': \"insert -1;superscript\",\n        'Ctrl+2': \"insert 2;superscript\",\n        'Ctrl+3': \"insert 3;superscript\",\n        'Ctrl+4': \"insert 4;superscript\",\n        'Ctrl+a': \"swap\",\n        'Ctrl+b': \"make_bold\",\n        'Ctrl+c': \"copy_to_clipboard\",\n        'Ctrl+e': \"insert e;operator mathrm;swap;superscript\",  // exp(x) - same as [/][e]\n        'Ctrl+i': \"pop_to_document\",\n        'Ctrl+j': \"extract_from_document\",\n        'Ctrl+k': \"infix \\\\,\",\n        'Ctrl+l': \"recenter_document 50\",\n        'Ctrl+m': \"prefix -\",\n        'Ctrl+o': \"parenthesize;swap;operator mathopen;swap;concat\",  // -> f(x): same as [/][o]\n        'Ctrl+p': \"delimiters ( )\",\n        'Ctrl+r': \"infix ,;parenthesize;swap;operator mathopen;swap;concat\",  // -> f(x,y): same as [/][r]\n        'Ctrl+s': \"save_file\",\n        'Ctrl+u': \"superscript\",\n        'Ctrl+v': \"paste_from_clipboard\",\n        'Ctrl+y': \"redo\",\n        'Ctrl+z': \"undo\",\n        'Ctrl+ ': \"infix \\\\,\",\n        'Ctrl+,': \"infix ,\",\n        'Ctrl+ArrowRight': \"scroll document_container horizontal 75\",\n        'Ctrl+ArrowLeft': \"scroll document_container horizontal -75\",\n        'Ctrl+/': \"operator frac 2\"\n    },\n\n    // File Manager mode\n    files: {\n        'default': \"toggle_popup files\",\n        'd': \"delete_selected_file\",\n        'n': \"start_new_file\",\n        'Enter': \"load_selected_file\",\n        's': \"save_file\",\n        'S': \"save_file_as\",\n        'ArrowUp': \"select_adjacent_file -1\",\n        'ArrowDown': \"select_adjacent_file 1\"\n    },\n\n    // User Manual mode\n    help: {\n        'ArrowDown': 'scroll popup_panel vertical 25',\n        'ArrowUp': 'scroll popup_panel vertical -25',\n        'j': 'scroll popup_panel vertical 25',\n        'k': 'scroll popup_panel vertical -25',\n        'ArrowLeft': 'cancel',\n        'ArrowRight': 'cancel',\n        'PageUp': 'scroll popup_panel vertical -95',\n        'PageDown': 'scroll popup_panel vertical 95',\n        'default': \"toggle_popup help\"\n    },\n\n    // Tab prefix: stack/misc operations\n    stack: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"swap\",\n        'c': \"copy_to_clipboard\",\n        'd': \"pop\",\n        'i': \"pop_to_document\",\n        'I': \"pop_to_document preserve\",\n        'f': \"toggle_popup files\",\n        'j': \"extract_from_document\",\n        'J': \"extract_from_document preserve\",\n        'l': \"recenter_document 50\",\n        'n': \"nip\",\n        'o': \"over\",\n        'r': \"rot\",\n        's': \"save_file\",\n        't': \"tuck\",\n        'u': \"unrot\",\n        'v': \"paste_from_clipboard\",\n        'Enter': \"dup\",\n        'Backspace': \"pop\",\n        'Tab': \"undo\",\n        '.': \"redo\",\n        '!': \"export_document_as_text\",\n        '@': \"export_stack_items_as_text\",\n        '$': \"extract_latex_source\",\n        'ArrowRight': \"scroll document_container horizontal 75\",\n        'ArrowLeft': \"scroll document_container horizontal -75\",\n        '?': \"toggle_popup help stack\"\n    },\n\n    // $ prefix: configuration\n    config: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'ArrowLeft': \"config stack_side left\",\n        'ArrowRight': \"config stack_side right\",\n        'ArrowUp': \"config stack_side top\",\n        'ArrowDown': \"config stack_side bottom\",\n        'f': \"fullscreen on\",\n        'F': \"fullscreen off\",\n        'i': \"config toggle_inline_math\",\n\t'I': \"config toggle_mode_indicator\",\n        'm': \"config math_align toggle_document\",\n        'M': \"config math_align toggle_stack\",\n        'r': \"config reset_layout\",\n        's': \"config stack_split\",\n        't': \"config theme\",\n        'z': \"config zoom_factor increase\",\n        'Z': \"config zoom_factor decrease\",\n        '$': \"insert \\\\$\",\n        '!': \"insert \\\\alpha\\\\boldsymbol{\\\\alpha}\\\\mathcal{A}\\\\mathfrak{A}A\\\\bold{A}\\\\boldsymbol{A}\\\\mathtt{A}\\\\mathrm{A}\\\\mathsf{A}\\\\textup{A}\\\\Bbb{A}\\\\mathscr{A}[\\\\big[\\\\Big[\\\\bigg[\\\\Bigg[\\\\int\",\n        '?': \"toggle_popup help configuration\"\n    },\n\n    // \" prefix (TextItem text)\n    text_entry: {\n        'Enter': \"finish_text_entry text\",\n        'Shift+Enter': \"finish_text_entry heading\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // \\ prefix (math text)\n    math_text_entry: {\n        'Enter': \"finish_text_entry math\",\n        'Shift+Enter': \"finish_text_entry roman_math\",\n        \"\\\\\": \"start_text_entry latex_entry\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // double \\ prefix (latex command)\n    latex_entry: {\n        'Enter': \"finish_text_entry latex\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry math_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // right-parenthesis prefix: special delimiters\n    delimiters: {\n        'b': \"delimiters \\\\langle \\\\vert\",  //  <x| Dirac bra\n        'c': \"delimiters \\\\lceil \\\\rceil\",\n        'f': \"delimiters \\\\lfloor \\\\rfloor\",\n        'g': \"delimiters \\\\lgroup \\\\rgroup\",\n        'i': \"delimiters \\\\langle \\\\rangle \\\\vert 2\",  // <x|y>; mnemonic: [i]nner product\n        'I': \"delimiters \\\\langle \\\\rangle \\\\vert 3\",  // <x|y|z>\n        'k': \"delimiters \\\\vert \\\\rangle\",  // |x> Dirac ket\n        'm': \"delimiters \\\\lmoustache \\\\rmoustache\",\n        'n': \"delimiters \\\\lVert \\\\rVert\",  // n = Norm\n        'N': \"delimiters \\\\lVert \\\\rVert\",  // alias for n\n        'w': \"delimiters . \\\\vert\",  // \"where\"\n        'W': \"delimiters . \\\\vert\",  // alias for w\n        '|': \"delimiters \\\\vert \\\\vert\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '(': \"delimiters ( )\",\n\t')': \"toggle_fixed_size_delimiters\",\n        '[': \"delimiters [ ]\",\n        ']': \"insert \\\\llbracket;swap;concat;insert \\\\rrbracket;concat\",\n        '{': \"delimiters \\\\{ \\\\}\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // right-curly-brace prefix: custom delimiter builder mode\n    custom_delimiters: {\n        '[digit]': \"prefix_argument\",\n        'c': \"custom_delimiter \\\\lceil\",\n        'C': \"custom_delimiter \\\\rceil\",\n        'f': \"custom_delimiter \\\\lfloor\",\n        'F': \"custom_delimiter \\\\rfloor\",\n        'g': \"custom_delimiter \\\\lgroup\",\n        'G': \"custom_delimiter \\\\rgroup\",\n        'm': \"custom_delimiter \\\\lmoustache\",\n        'M': \"custom_delimiter \\\\rmoustache\",\n        'v': \"custom_delimiter \\\\Vert\",\n        '<': \"custom_delimiter \\\\langle\",\n        '>': \"custom_delimiter \\\\rangle\",\n        '(': \"custom_delimiter (\",\n        ')': \"custom_delimiter )\",\n        '[': \"custom_delimiter [\",\n        ']': \"custom_delimiter ]\",\n        '{': \"custom_delimiter \\\\{\",\n        '}': \"custom_delimiter \\\\}\",\n        '.': \"custom_delimiter .\",\n        ' ': \"custom_delimiter .\",\n        '/': \"custom_delimiter /\",\n        \"\\\\\": \"custom_delimiter \\\\backslash\",\n        '|': \"custom_delimiter |\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // forward-slash prefix: assorted functions/operators\n    operator: {\n        '1': \"insert 1;swap;operator frac 2\",\n        '2': \"mode squared\",\n        'a': \"apply_operator 1\",\n        'A': \"apply_operator 2\",\n        'b': \"operator binom 2\",\n        'c': \"named_function cos\",\n        'C': \"named_function csc\",\n        'd': \"mode derivative\",\n        'D': \"named_function det\",\n        'e': \"insert e;operator mathrm;swap;superscript\",  // exp(x)\n        'E': \"named_function exp\",\n        'f': \"mode named_operator\",\n        'F': \"mode named_underset_operator\",\n        'h': \"mode hyperbolic\",\n        'i': \"mode integral_limits\",\n        'I': \"insert \\\\int;swap;superscript;swap;subscript\",\n        'k': \"delimiters . . \\\\vert 2;parenthesize;swap;operator mathopen;swap;concat\",  // f x y -> f(x|y)\n        'l': \"insert \\\\limits;swap;subscript;insert \\\\lim;swap;concat\",  // lim_{x}\n        'L': \"infix \\\\to;insert \\\\limits;swap;subscript;insert \\\\lim;swap;concat\",  // lim_{y \\to x}\n        'n': \"named_function ln\",\n        'N': \"named_function log\",\n        'o': \"parenthesize;swap;operator mathopen;swap;concat\",   // f x -> f(x)  \"of\"; \\mathopen closes up the spacing after 'f'\n        'O': \"overunderset overset\",\n        'p': \"parenthesize;operator Pr\",  // Pr(x) (probability)\n        'P': \"insert \\\\,;swap;concat;swap;insert \\\\,;concat;swap;delimiters . . \\\\vert 2;parenthesize;operator Pr\",  // Pr(y|x)\n        'q': \"operator sqrt\",\n        'Q': \"operator sqrt[3]\",\n        'r': \"infix ,;parenthesize;swap;operator mathopen;swap;concat\",  // f x y -> f(x,y)\n        's': \"named_function sin\",\n        'S': \"named_function sec\",\n        't': \"named_function tan\",\n        'T': \"named_function cot\",\n        'U': \"overunderset underset\",\n        'v': \"parenthesize;insert Var;operator operatorname;swap;concat\",\n        'V': \"swap;insert ,;concat;swap;concat;parenthesize;insert Cov;operator operatorname;swap;concat\",\n\t'w': \"swap_infix\",\n        'x': \"insert E;operator mathbb;operator mathopen;swap;delimiters [ ];concat\",  // E[x] (expectation)\n        'X': \"insert E;operator mathbb;swap;subscript;operator mathopen;swap;delimiters [ ];concat\",  // E_x[y] (with subscript)\n        ';': \"apply_tag\",\n        ',': \"split_infix\",\n        '/': \"operator frac 2\",\n        '[': \"delimiters [ ];swap;operator mathopen;swap;concat\",  // f x -> f[x]\n        ']': \"delimiters \\\\{ \\\\};swap;operator mathopen;swap;concat\",  // f x -> f{x}\n        '}': \"swap;operator underbrace;swap;subscript\",\n        '{': \"swap;operator overbrace;swap;superscript\",\n        '<': \"extract_infix_side left\",\n        '>': \"extract_infix_side right\",\n        '-': \"mode inverse\",\n        '=': \"unrot;infix =;insert \\\\sum;swap;subscript;swap;superscript\",\n        '+': \"infix \\\\ge;insert \\\\sum;swap;subscript\",\n        \"'\": \"substitute_placeholder\",\n        \"\\\"\": \"toggle_is_heading\",\n        'Enter': \"unrot;subscript;swap;superscript\",  // apply superscript and subscript at once\n        '?': \"toggle_popup help operators\"\n    },\n\n    named_operator: {\n        'a': \"insert \\\\arg\",\n        'c': \"insert \\\\gcd\",\n        'd': \"insert \\\\dim\",\n        'e': \"insert \\\\deg\",\n        'f': \"insert \\\\liminf\",\n        'g': \"insert \\\\argmax\",\n        'h': \"insert \\\\hom\",\n        'i': \"insert \\\\inf\",\n        'j': \"insert \\\\injlim\",\n        'k': \"insert \\\\ker\",\n        'l': \"insert \\\\lim\",\n        'm': \"insert \\\\min\",\n        'n': \"insert \\\\argmin\",\n        'o': \"insert Cov;operator operatorname\",\n        'p': \"insert \\\\Pr\",\n        'r': \"insert \\\\projlim\",\n        's': \"insert \\\\sup\",\n        't': \"insert \\\\det\",\n        'u': \"insert \\\\limsup\",\n        'v': \"insert Var;operator operatorname\",\n        'x': \"insert \\\\max\"\n    },\n\n    named_underset_operator: {\n        'a': \"underset_operator arg\",\n        'c': \"underset_operator gcd\",\n        'd': \"underset_operator dim\",\n        'e': \"underset_operator deg\",\n        'f': \"underset_operator liminf\",\n        'g': \"underset_operator argmax\",\n        'h': \"underset_operator hom\",\n        'i': \"underset_operator inf\",\n        'j': \"underset_operator injlim\",\n        'k': \"underset_operator ker\",\n        'l': \"underset_operator lim\",\n        'm': \"underset_operator min\",\n        'n': \"underset_operator argmin\",\n        'o': \"underset_operator Cov true\",\n        'p': \"underset_operator Pr\",\n        'r': \"underset_operator projlim\",\n        's': \"underset_operator sup\",\n        't': \"underset_operator det\",\n        'u': \"underset_operator limsup\",\n        'v': \"underset_operator Var true\",\n        'x': \"underset_operator max\"\n    },\n\n    // TODO: maybe make a more general way of doing these\n    hyperbolic: {\n        's': \"named_function sinh\",\n        'S': \"named_function sech\",\n        'c': \"named_function cosh\",\n        'C': \"named_function csch\",\n        't': \"named_function tanh\",\n        'T': \"named_function coth\",\n        '2': \"mode squared_hyperbolic\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n    inverse: {\n        's': \"named_function sin -1\",\n        'S': \"named_function sec -1\",\n        'c': \"named_function cos -1\",\n        'C': \"named_function csc -1\",\n        't': \"named_function tan -1\",\n        'T': \"named_function cot -1\",\n        'h': \"mode inverse_hyperbolic\",\n        '2': \"mode squared\"\n    },\n    inverse_hyperbolic: {\n        's': \"named_function sinh -1\",\n        'S': \"named_function sech -1\",\n        'c': \"named_function cosh -1\",\n        'C': \"named_function csch -1\",\n        't': \"named_function tanh -1\",\n        'T': \"named_function coth -1\",\n        '2': \"mode squared_hyperbolic\"\n    },\n    squared: {\n        's': \"named_function sin 2\",\n        'S': \"named_function sec 2\",\n        'c': \"named_function cos 2\",\n        'C': \"named_function csc 2\",\n        't': \"named_function tan 2\",\n        'T': \"named_function cot 2\",\n        'n': \"named_function lg\",  // [n][N] are special cases for base-2 log\n        'N': \"named_function log _2\",\n        'h': \"mode squared_hyperbolic\",\n        '-': \"mode inverse\"\n    },\n    squared_hyperbolic: {\n        's': \"named_function sinh 2\",\n        'S': \"named_function sech 2\",\n        'c': \"named_function cosh 2\",\n        'C': \"named_function csch 2\",\n        't': \"named_function tanh 2\",\n        'T': \"named_function coth 2\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n\n    // /i prefix\n    integral_limits: {\n        'r': \"insert -\\\\infty;subscript;insert \\\\infty;superscript\",  // -oo..oo : [r]eals\n        'n': \"insert -\\\\infty;subscript;insert 0;superscript\",  // -oo..0 : [n]egative \n        'p': \"insert 0;subscript;insert \\\\infty;superscript\",  // 0..oo : [p]ositive\n        'u': \"insert 0;subscript;insert 1;superscript\",  // 0..1 : [u]nit\n        'U': \"insert -1;subscript;insert 1;superscript\",  // -1..1 : symmetric [U]nit\n        't': \"insert 0;subscript;insert 2\\\\pi;superscript\",  // 0..2pi : [t]rigonometric\n        'T': \"insert -\\\\pi;subscript;insert \\\\pi;superscript\",  // -pi..pi : symmetric [T]rigonometric\n        '?': \"toggle_popup help integrals\"\n    },\n\n    // /d prefix: derivative operations\n    derivative: {\n        // \\partial y / \\partial x\n        'j': \"insert \\\\partial;swap;concat;swap;insert \\\\partial;swap;concat;swap;operator frac 2\",\n        // \\partial^2 y / \\partial x^2\n        'J': \"insert 2;superscript;insert \\\\partial;swap;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // dy/dx\n        'k': \"insert d;operator mathrm;swap;concat;swap;insert d;operator mathrm;swap;concat;swap;operator frac 2\",\n        // d^2(y) / dx^2\n        'K': \"insert 2;superscript;insert d;operator mathrm;swap;concat;swap;insert d;operator mathrm;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // \\partial / \\partial x\n        'q': \"insert \\\\partial;swap;concat;insert \\\\partial;swap;operator frac 2\",\n        // \\partial^2 / \\partial x^2\n        'Q': \"insert 2;superscript;insert \\\\partial;swap;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // d/dx\n        'x': \"insert d;operator mathrm;swap;concat;insert d;operator mathrm;swap;operator frac 2\",\n        // d^2 / dx^2\n        'X': \"insert 2;superscript;insert d;operator mathrm;swap;concat;insert d;operator mathrm;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 / \\partial x\\,\\partial y\n        'm': \"insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 z / \\partial x\\,\\partial y\n        'M': \"insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // gradient\n        'g': \"insert \\\\nabla;swap;concat\",\n        // gradient with respect to x\n        'G': \"insert \\\\nabla;swap;subscript;swap;concat\",\n        // divergence\n        '.': \"insert \\\\nabla;insert \\\\cdot;concat;swap;concat\",\n        // curl\n        'c': \"insert \\\\nabla;insert \\\\times;concat;swap;concat\",\n        // Laplacian\n        'l': \"insert \\\\nabla;insert 2;superscript;swap;concat\",\n        // d'Alembertian\n        'L': \"insert \\\\Box;insert 2;superscript;swap;concat\",\n        // x -> dx\n        'd': \"insert d;operator mathrm;swap;concat\",\n        // x -> d^2x\n        '2': \"insert d;operator mathrm;insert 2;superscript;swap;concat\",\n        '3': \"insert d;operator mathrm;insert 3;superscript;swap;concat\",\n        '4': \"insert d;operator mathrm;insert 4;superscript;swap;concat\",\n        // y x -> y dx\n        'i': \"swap;insert \\\\,;concat;swap;insert d;operator mathrm;swap;concat;concat\",\n        // y x -> ydx (with thinspace after the dx)\n        'I': \"insert d;operator mathrm;swap;concat;concat;insert \\\\,;concat\",\n        // y x -> ydx (no spacing around the dx)\n        ' ': \"insert d;operator mathrm;swap;concat;concat\",\n\n        '?': \"toggle_popup help derivatives\"\n    },\n\n    // comma prefix: combine two objects with an infix operation\n    infix: {\n        'a': \"apply_infix\",\n        'b': \"infix \\\\bullet\",\n        'c': \"infix \\\\cap\",\n        'd': \"infix \\\\setminus\",  // (set [d]ifference)\n        'e': \"infix ,\\\\dots,\",\n        'f': \"conjunction if\",\n        'F': \"conjunction iff\",\n        'g': \"infix \\\\gets\",\n        'k': \"insert \\\\,;swap;concat;swap;insert \\\\,;concat;swap;delimiters . . \\\\vert 2\",  // x | y  ([k]onditional)\n        'l': \"infix \\\\parallel\",\n        'M': \"infix \\\\mp\",\n        'n': \"conjunction when\",\n        'o': \"infix \\\\circ\",\n        'O': \"infix \\\\odot\",\n        'p': \"infix \\\\perp\",\n        'P': \"infix \\\\pm\",\n        'q': \"conjunction and\",\n        'Q': \"conjunction or\",\n        'r': \"conjunction for\",\n        's': \"infix \\\\,\",\n        't': \"infix \\\\to\",\n        'T': \"infix \\\\longrightarrow\",\n        'u': \"infix \\\\cup\",\n        'v': \"infix \\\\vee\",\n        'V': \"infix \\\\veebar\",\n        'w': \"infix \\\\wedge\",\n        'W': \"infix \\\\barwedge\",\n        'x': \"infix \\\\times\",\n        'X': \"infix \\\\otimes\",\n        '[': \"infix \\\\llcorner\",  // right-contraction\n        ']': \"infix \\\\lrcorner\",  // left-contraction\n        '|': \"delimiters . . \\\\vert 2\",  // \"infix |\",\n        '=': \"infix \\\\Rightarrow\",\n        '-': \"infix \\\\ominus\",\n        '+': \"infix \\\\oplus\",\n        '.': \"infix \\\\cdot\",\n        ',': \"infix ,\",  // comma without thinspace\n        ' ': \"infix ,\\\\,\",  // comma plus thinspace\n        ':': \"infix :\",\n        ';': \"infix semicolon\\\\:\",\n        '`': \"swap;insert T;superscript;swap;concat\",  // xTy\n        '%': \"operator pmod;concat\",  // y (mod x)\n        '*': \"infix *\",\n\t'(': \"infix ,;delimiters ( )\",  // (x,y)\n        '<': \"infix ,;delimiters \\\\langle \\\\rangle\",  // <x,y>\n        '>': \"infix \\\\cdots\",\n        '/': \"autoparenthesize;swap;autoparenthesize;swap;delimiters . . / 2\",  // flex x/y\n        \"\\\\\": \"autoparenthesize;swap;autoparenthesize;swap;infix /\",  // fixed x/y\n        '?': \"toggle_popup help infix\"\n    },\n\n    // = prefix: relational operators\n    relational: {\n\t'9': \"infix \\\\prec\",\n\t'0': \"infix \\\\succ\",\n        'a': \"infix \\\\approx\",\n        'c': \"infix \\\\cong\",  // =~  congruent\n        'e': \"infix \\\\equiv\",\n        'E': \"infix \\\\iff\",\n        'g': \"infix >\",\n\t'f': \"infix \\\\Leftarrow\", // \"[f]rom\"\n        'G': \"infix \\\\gg\",\n        'i': \"infix \\\\in\",\n        'I': \"infix \\\\notin\",\n\t'j': \"infix \\\\Join\",\n        'l': \"infix <\",\n        'L': \"infix \\\\ll\",\n        'm': \"infix \\\\mapsto\",\n        'n': \"infix \\\\ne\",\n        '!': \"infix \\\\ne\",\n\t'o': \"infix \\\\circeq\",\n        'p': \"infix \\\\propto\",\n        'q': \"infix =\",\n        's': \"infix \\\\subseteq\",\n        'S': \"infix \\\\subset\",\n        't': \"infix \\\\sim\",\n\t'u': \"infix \\\\supseteq\",\n\t'U': \"infix \\\\supset\",\n        '=': \"infix =\",\n\t'^': \"infix \\\\triangleq\",\n        '<': \"infix \\\\le\",\n        '>': \"infix \\\\ge\",\n        '[': \"infix \\\\le\",\n        ']': \"infix \\\\ge\",\n\t'{': \"infix \\\\sqsubset\",\n\t'}': \"infix \\\\sqsupset\",\n\t'(': \"infix \\\\preceq\",\n\t')': \"infix \\\\succeq\",\n\t'.': \"infix \\\\doteq\",\n        ':': \"infix \\\\coloneqq\",\n        ';': \"infix \\\\coloncolon\",\n        '~': \"infix \\\\sim\",\n\t'-': \"infix \\\\vdash\",\n        '|': \"infix \\\\vDash\",\n        '?': \"toggle_popup help relational\"\n    },\n\n    // apostrophe prefix: assorted standalone math symbols\n    symbol: {\n        '0': \"insert \\\\varnothing\",\n        '1': \"insert -1\",\n        '2': \"insert 1;insert 2;operator frac 2\",  // 1/2 (display)\n        '3': \"insert 1;insert 2;infix /\",  // 1/2 (inline)\n        '8': \"insert \\\\infty\",\n        'a': \"insert \\\\forall\",\n        'c': \"insert \\\\cdot\",\n        'C': \"insert \\\\bigcap\",\n        'd': \"insert \\\\partial\",\n        'e': \"insert \\\\exists\",\n\t'E': \"insert \\\\nexists\",\n        'h': \"insert \\\\hslash\",\n        'i': \"insert \\\\int\",\n        'I': \"insert \\\\iint\",\n        'l': \"insert \\\\ell\",\n        'M': \"insert \\\\mp\",\n        'o': \"insert \\\\circ\",\n        'p': \"insert \\\\prod\",\n        'P': \"insert \\\\pm\",\n        's': \"insert \\\\sum\",\n        't': \"insert \\\\therefore\",\n        'U': \"insert \\\\bigcup\",\n        'v': \"insert \\\\vee\",\n\t'V': \"insert \\\\bigvee\",\n        'w': \"insert \\\\wedge\",\n\t'W': \"insert \\\\bigwedge\",\n        'y': \"insert \\\\oint\",\n        'Y': \"insert \\\\oiint\",\n        '.': \"insert \\\\dots\",\n        '>': \"insert \\\\cdots\",\n        '-': \"insert -\",\n        '+': \"insert +\",\n        '*': \"insert \\\\star\",\n        '|': \"insert |\",\n        '=': \"insert_separator\",\n        '?': \"insert ?\",  // NOTE: no mode-sensitive help shortcut for symbols because of this\n        '!': \"insert !\",\n        ',': \"insert ,\",\n        ';': \"insert semicolon\",\n        ':': \"insert :\",\n        '`': \"insert `\",\n        '_': \"insert \\\\_\",\n        \"'\": \"insert_placeholder\",\n        ' ': \"insert \",  // \"nothing\", e.g. when you don't want something on one side of an infix\n        'ArrowUp': \"insert \\\\uparrow\",\n        'ArrowDown': \"insert \\\\downarrow\"\n    },\n\n    // . prefix: expression decorators (fonts, hats, etc)\n    decoration: {\n        '0': \"insert 0;subscript\",\n        '1': \"insert -1;superscript\",\n        '2': \"insert 2;superscript\",\n        '3': \"insert 3;superscript\",\n        '4': \"insert 4;superscript\",\n        '8': \"insert \\\\infty;infix \\\\to\",\n        'A': \"operator acute\",\n        'b': \"font_operator mathbb\",\n        'c': \"autoparenthesize;insert 1;swap;infix -\",\n        'C': \"html_class emphasized emphasized2\",\n        'd': \"insert \\\\dagger;superscript\",\n        'D': \"insert \\\\ddagger;superscript\",\n        'e': \"operator bold\",  // bold roman (sort of)\n        'g': \"operator mathring\",\n        'G': \"operator grave\",\n        'h': \"apply_hat hat\",\n        'H': \"apply_hat widehat\",\n        'i': \"insert -;superscript\",\n        'I': \"insert +;superscript\",\n        'k': \"font_operator mathfrak\",\n        'l': \"insert \\\\parallel;subscript\",\n        'm': \"font_operator mathtt\",\n        'M': \"prefix \\\\mp\",\n\t'n': \"prefix \\\\neg\",\n        'o': \"operator bar\",\n        'O': \"operator overline\",\n        'p': \"insert \\\\perp;subscript\",\n        'P': \"prefix \\\\pm\",\n        'r': \"make_roman\",\n        's': \"font_operator mathsf\",  // sans-serif\n        't': \"prefix \\\\to\",\n        'T': \"operator widetilde\",\n        'u': \"apply_hat breve\",\n        'U': \"operator utilde\",\n        'v': \"operator vec\",\n        'V': \"apply_hat check\",\n        'w': \"operator overline\",\n        'W': \"apply_hat widecheck\",\n        'x': \"operator boxed\",\n        'X': \"operator sout\",  // strikeout\n        'z': \"operator cancel\",\n        '.': \"apply_hat dot\",\n        \"\\\"\": \"apply_hat ddot\",\n        ' ': \"insert \\\\,;concat\",  // append thin space\n        \"'\": \"autoparenthesize;prime\",\n        '*': \"insert *;superscript\",\n        '~': \"apply_hat tilde\",\n        '=': \"prefix \\\\Rightarrow\",\n        '-': \"prefix -\",\n        '+': \"prefix +\",\n        '`': \"insert T;superscript\",  // transpose\n        '/': \"insert 1;swap;autoparenthesize;delimiters . . / 2\",  // flex 1/x\n        \"\\\\\": \"insert 1;swap;autoparenthesize;infix /\",  // fixed 1/x\n        '_': \"operator underline\",\n        '?': \"toggle_popup help decorations\"\n    },\n\n    // | prefix: array/matrix operations\n    array: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"build_align aligned\",\n        'c': \"build_align cases\",\n        'C': \"build_align rcases\",\n        'd': \"dissolve_array\",\n        'e': \"build_list ,\\\\,;insert ,\\\\,\\\\dots;concat\",\n        'E': \"insert_matrix_ellipses\",\n        'f': \"build_align cases_if\",\n        'F': \"build_align rcases_if\",\n        'g': \"build_align gathered\",\n        'h': \"transpose_matrix;swap;transpose_matrix;swap;stack_arrays;transpose_matrix\",  // i.e., stack horizontally\n        'k': \"build_substack\",\n        'm': \"build_matrix_row matrix\",\n        'p': \"build_list +;insert +\\\\cdots;concat\",\n        's': \"split_array\",\n        't': \"mode change_matrix_type\",\n        'T': \"transpose_matrix\",\n        'v': \"build_matrix_row vmatrix\",\n        'V': \"build_matrix_row Vmatrix\",\n        'x': \"build_list nothing \\\\cdots\",\n        ' ': \"build_list nothing\",\n        '|': \"stack_arrays\",\n        ',': \"build_list ,\\\\,\",\n        '.': \"build_list ,\\\\, ,\\\\,\\\\dots,\\\\,\",\n        ';': \"build_list semicolon\\\\,\",\n        '+': \"build_infix_list + \\\\cdots\",\n        '(': \"build_matrix_row pmatrix\",\n        '[': \"build_matrix_row bmatrix\",\n        '{': \"build_matrix_row Bmatrix\",\n        '@': \"build_matrix_row bmatrix 2;transpose_matrix\",\n        '#': \"build_matrix_row bmatrix 3;transpose_matrix\",\n        '$': \"build_matrix_row bmatrix 2;unrot;build_matrix_row bmatrix 2;swap;stack_arrays\",\n        ':': \"array_separator column dashed\",\n        '!': \"array_separator column solid\",\n        '-': \"array_separator row dashed\",\n        '_': \"array_separator row solid\",\n        '?': \"toggle_popup help arrays\",\n        'Enter': \"stack_arrays\"\n    },\n\n    change_matrix_type: {\n        'm': \"change_matrix_type matrix\",\n        'v': \"change_matrix_type vmatrix\",\n        'V': \"change_matrix_type Vmatrix\",\n        '(': \"change_matrix_type pmatrix\",\n        '[': \"change_matrix_type bmatrix\",\n        '{': \"change_matrix_type Bmatrix\"\n    },\n\n    // & prefix\n    script: {\n        '[alpha]': \"self_insert;to_case uppercase;font_operator mathscr\",\n        '&': \"insert \\\\&\"\n    },\n\n    // % prefix\n    calligraphic: {\n        '[alpha]': \"self_insert;to_case uppercase;font_operator mathcal\",\n        '%': \"insert \\\\%\"\n    },\n\n    // ; prefix: lowercase Greek letters\n    lowercase_greek: {\n        'a': \"insert \\\\alpha\",     'b': \"insert \\\\beta\",\n        'c': \"insert \\\\chi\",       'd': \"insert \\\\delta\",\n        'e': \"insert \\\\epsilon\",   'f': \"insert \\\\phi\",\n        'g': \"insert \\\\gamma\",     'h': \"insert \\\\eta\",\n        'i': \"insert \\\\iota\",      'j': \"insert \\\\varphi\",\n        'k': \"insert \\\\kappa\",     'l': \"insert \\\\lambda\",\n        'm': \"insert \\\\mu\",        'n': \"insert \\\\nu\",\n        'o': \"insert \\\\omega\",     'p': \"insert \\\\pi\",\n        'q': \"insert \\\\vartheta\",  'r': \"insert \\\\rho\",\n        's': \"insert \\\\sigma\",     't': \"insert \\\\tau\",\n        'u': \"insert \\\\upsilon\",   'v': \"insert \\\\theta\",\n        'w': \"insert \\\\omega\",     'x': \"insert \\\\xi\",\n        'y': \"insert \\\\psi\",       'z': \"insert \\\\zeta\",\n\n        ':': \"mode variant_greek\",\n        ';': \"infix semicolon\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // : prefix: uppercase Greek letters\n    uppercase_greek: {\n        'd': \"insert \\\\Delta\",     'e': \"insert \\\\varepsilon\",\n        'f': \"insert \\\\Phi\",       'g': \"insert \\\\Gamma\",\n        'k': \"insert \\\\varkappa\",  'l': \"insert \\\\Lambda\",\n        'm': \"insert \\\\varpi\",     'o': \"insert \\\\Omega\",\n        'p': \"insert \\\\Pi\",        'q': \"insert \\\\vartheta\",\n        'r': \"insert \\\\varrho\",    's': \"insert \\\\Sigma\",\n        't': \"insert \\\\varsigma\",  'u': \"insert \\\\Upsilon\",\n        'v': \"insert \\\\Theta\",     'w': \"insert \\\\Omega\",\n        'x': \"insert \\\\Xi\",        'y': \"insert \\\\Psi\",\n        '6': \"insert \\\\digamma\",   '^': \"insert \\\\digamma\",\n        'n': \"insert \\\\nabla\",  // special case\n\n        // TODO: support for case-insensitive keybindings in general\n        'D': \"insert \\\\Delta\",     'E': \"insert \\\\varepsilon\",\n        'F': \"insert \\\\Phi\",       'G': \"insert \\\\Gamma\",\n        'K': \"insert \\\\varkappa\",  'L': \"insert \\\\Lambda\",\n        'M': \"insert \\\\varpi\",     'O': \"insert \\\\Omega\",\n        'P': \"insert \\\\Pi\",        'Q': \"insert \\\\vartheta\",\n        'R': \"insert \\\\varrho\",    'S': \"insert \\\\Sigma\",\n        'T': \"insert \\\\varsigma\",  'U': \"insert \\\\Upsilon\",\n        'V': \"insert \\\\Theta\",     'W': \"insert \\\\Omega\",\n        'X': \"insert \\\\Xi\",        'Y': \"insert \\\\Psi\",\n        'N': \"insert \\\\nabla\",\n\n        ':': \"infix :\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // \"variant\" uppercase Greek letters - these are italic versions of the normal ones\n    variant_greek: {\n        'd': \"insert \\\\varDelta\",    'D': \"insert \\\\varDelta\",\n        'f': \"insert \\\\varPhi\",      'F': \"insert \\\\varPhi\",\n        'g': \"insert \\\\varGamma\",    'G': \"insert \\\\varGamma\",\n        'l': \"insert \\\\varLambda\",   'L': \"insert \\\\varLambda\",\n        'o': \"insert \\\\varOmega\",    'O': \"insert \\\\varOmega\",\n        'p': \"insert \\\\varPi\",       'P': \"insert \\\\varPi\",\n        'q': \"insert \\\\varTheta\",    'Q': \"insert \\\\varTheta\",\n        's': \"insert \\\\varSigma\",    'S': \"insert \\\\varSigma\",\n        'u': \"insert \\\\varUpsilon\",  'U': \"insert \\\\varUpsilon\",\n        'x': \"insert \\\\varXi\",       'X': \"insert \\\\varXi\",\n        'y': \"insert \\\\varPsi\",      'Y': \"insert \\\\varPsi\",\n\n        '?': \"toggle_popup help greek\"\n    }\n};\n\n\nexport default EditorKeymap;\n","\n\nimport KeybindingTable from './Keymap';\nimport JSZip from 'jszip';\n\n\nclass Keymap {\n    constructor() {\n        this.bindings = KeybindingTable;\n    }\n    \n    lookup_binding(mode, key) {\n        const mode_map = this.bindings[mode];\n        if(!mode_map) return null;\n        if(mode_map[key]) return mode_map[key];\n        if(mode_map['[alpha]'] && /^[a-zA-Z]$/.test(key)) return mode_map['[alpha]'];\n        if(mode_map['[digit]'] && /^[0-9]$/.test(key)) return mode_map['[digit]'];\n        if(mode_map['[alnum]'] && /^[a-zA-Z0-9]$/.test(key)) return mode_map['[alnum]'];\n        if(mode_map['default']) return mode_map['default'];\n        if(mode === 'base' || mode === 'editor')\n            return null;\n        else\n            return 'cancel';\n    }\n}\n\n\nclass Settings {\n    static load_from_local_storage() {\n        const serialized_string = localStorage.getItem('settings');\n        if(serialized_string)\n            return Settings.from_json(JSON.parse(serialized_string));\n        else\n            return new Settings();\n    }\n    \n    static from_json(json) {\n        let s = new Settings();\n        Settings.saved_keys.forEach(key => { s[key] = json[key]; });\n        return s;\n    }\n    \n    constructor() {\n        this.current_keymap = new Keymap();\n        this.selected_theme = 'default';\n        this.last_opened_filename = null;\n        this.popup_mode = null;  // null, 'help', 'files'\n\tthis.show_mode_indicator = true;\n        this.layout = this.default_layout();\n    }\n\n    default_layout() {\n        return {\n            zoom_factor: 0,\n            stack_rightalign_math: false,\n            document_rightalign_math: false,\n            inline_math: false,\n            stack_side: 'left',\n            stack_split: 50\n        };\n    }\n\n    apply_layout_to_dom(stack_panel_elt, document_panel_elt, popup_panel_elt) {\n        const layout = this.layout;\n\n        // Show or hide popup panel.\n        popup_panel_elt.style.display = this.popup_mode ? 'block' : 'none';\n\n        // Set overall scale factor.\n        const root_elt = document.getElementById('root');\n        const percentage = Math.round(100*Math.pow(1.05, layout.zoom_factor || 0));\n        root_elt.style.fontSize = percentage + '%';\n\n        // Set up panel layout.\n        let [stack_bounds, document_bounds] = this._split_rectangle(\n            {x: 0, y: 0, w: 100, h: 100}, layout.stack_side, layout.stack_split);\n\n        this._apply_bounds(stack_panel_elt, stack_bounds);\n        this._apply_bounds(document_panel_elt, document_bounds);\n    }\n\n    // Split a parent bounding rectangle into \"primary\" and \"secondary\"\n    // subrectangles according to the given 'side' and split %.\n    _split_rectangle(bounds, side, split_percent) {\n        const w1 = Math.round(split_percent*bounds.w/100);\n        const w2 = bounds.w - w1;\n        const h1 = Math.round(split_percent*bounds.h/100);\n        const h2 = bounds.h - h1;\n        switch(side) {\n        case 'left':\n            return [{x: bounds.x,    y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x+w1, y: bounds.y, w: w2, h: bounds.h}];\n        case 'right':\n            return [{x: bounds.x+w2, y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x,    y: bounds.y, w: w2, h: bounds.h}];\n        case 'top':\n            return [{x: bounds.x, y: bounds.y,    w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y+h1, w: bounds.w, h: h2}];\n        case 'bottom':\n            return [{x: bounds.x, y: bounds.y+h2, w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y,    w: bounds.w, h: h2}];\n        default:\n            return [bounds, bounds];\n        }\n    }\n\n    _apply_bounds(elt, bounds) {\n        elt.style.left = bounds.x + '%';\n        elt.style.top = bounds.y + '%';\n        elt.style.width = bounds.w + '%';\n        elt.style.height = bounds.h + '%';\n    }\n\n    save() {\n        const serialized_string = JSON.stringify(this.to_json());\n        localStorage.setItem('settings', serialized_string);\n    }\n\n    to_json() {\n        let json = {};\n        Settings.saved_keys.forEach(key => { json[key] = this[key]; });\n        return json;\n    }\n}\n\nSettings.saved_keys = [\n    'selected_theme', 'last_opened_filename', 'popup_mode', 'layout',\n    'show_mode_indicator'\n];\n\n\n// Helper for generating LaTeX strings from Expr objects.\nclass LatexEmitter {\n    constructor() {\n        this.tokens = [];\n        this.last_token_type = null;\n    }\n\n    emit_token(text, token_type) {\n        if(text.length > 0)\n            this.tokens.push(text);\n        this.last_token_type = token_type;\n    }\n\n    expr(expr) { expr.emit_latex(this); }\n\n    grouped_expr(expr, force_braces) { this.grouped(() => this.expr(expr), force_braces); }\n\n    grouped(fn, force_braces) {\n        let [old_tokens, old_last_token_type] = [this.tokens, this.last_token_type];\n        [this.tokens, this.last_token_type] = [[], null];\n\n        fn();\n\n        const [tokens, last_token_type] = [this.tokens, this.last_token_type];\n        this.tokens = old_tokens;\n        this.last_token_type = old_last_token_type;\n\n        // The only real 'special' case is a group with exactly 1 token.\n        // In that case we may be able to omit the surrounding braces if\n        // it's a 1-character string or a single \\latexcommand.  In all other\n        // cases the braces need to be included.\n        if(force_braces === 'force' || tokens.length === 0 || tokens.length > 1) {\n            this.text('{');\n            this.text(tokens.join(''));\n            this.text('}');\n        }\n        else {  // tokens.length === 1 && !force_braces\n            if(last_token_type === 'text') {\n                if(tokens[0].length === 1)\n                    this.text(tokens[0]);\n                else {\n                    this.text('{');\n                    this.text(tokens[0]);\n                    this.text('}');\n                }\n            }\n            else if(force_braces === 'force_commands') {\n                this.text('{');\n                this.emit_token(tokens[0], 'command');\n                this.text('}');\n            }\n            else\n                this.emit_token(tokens[0], 'command');\n        }\n    }\n\n    // Emit 'raw' LaTeX code.\n    text(text) {\n        if(this.last_token_type === 'command') {\n            // Determine if a space is needed after the last command; this depends\n            // on whether two non-special characters are adjacent.\n            const last_token = this.tokens[this.tokens.length-1];\n            if(this._is_latex_identifier_char(last_token.charAt(last_token.length-1)) &&\n               (this._is_latex_identifier_char(text.charAt(0)) /*|| text.charAt(0) === '{'*/))\n                this.emit_token(' ', 'text');\n        }\n        this.emit_token(text, 'text');\n    }\n\n    _is_latex_identifier_char(ch) {\n        return /^[a-zA-Z]$/.test(ch);\n    }\n\n    // \\latexcommand (something that isn't a single special-character command like \\,)\n    command(command_name, command_options) {\n        if(command_options)\n            command_name = command_name + '[' + command_options + ']';\n        this.emit_token(\"\\\\\" + command_name, 'command');\n    }\n\n    // Treated like text or a command depending on whether it starts with a backslash.\n    text_or_command(text) {\n        if(text.startsWith(\"\\\\\"))\n            this.command(text.slice(1));\n        else\n            this.text(text);\n    }\n\n    // environment_argument is an optional string to be placed directly after the \\begin{...}.\n    // This is used for array environments with a specified column layout, for example\n    // \\begin{matrix}{c:c:c}\n    begin_environment(envname, environment_argument) {\n        this.text(\"\\\\begin{\" + envname + \"}\");\n        if(environment_argument) this.text(environment_argument);\n        this.text(\"\\n\");\n    }\n\n    end_environment(envname) { this.text(\"\\n\\\\end{\" + envname + \"}\\n\"); }\n\n    align_separator() { this.text(' & '); }\n\n    // Table row separators for e.g. \\begin{matrix}\n    row_separator() {\n        // Give a little more space between rows, for fractions.\n        // See KaTeX \"common issues\" page.\n        this.text(\"\\\\\\\\[0.1em]\\n\");\n        // this.text(\"\\\\\\\\\\n\");\n    }\n\n    finished_string() { return this.tokens.join(''); }\n}\n\n\n// Overall app state, holding the stack and document.\nclass AppState {\n    static from_json(json) {\n        return new AppState(\n            Stack.from_json(json.stack),\n            Document.from_json(json.document)\n        );\n    }\n    \n    constructor(stack, document) {\n        this.stack = stack || this._default_stack();\n        this.document = document || new Document([], 0);\n        this.is_dirty = false;\n    }\n\n    _default_stack() {\n        const item = new TextItem([\n            new TextItemTextElement(\"Welcome to the editor. Press \"),\n            new TextItemTextElement(\"[?]\", true),\n            new TextItemTextElement(\" to view the User Guide.\")]);\n        return new Stack([item]);\n    }\n\n    same_as(app_state) {\n        // NOTE: AppState stuff is never modified in-place, so all that needs to be\n        // done here is check object identities.\n        return this.stack === app_state.stack && this.document === app_state.document;\n    }\n\n    to_json() {\n        return {\n            stack: this.stack.to_json(),\n            document: this.document.to_json(),\n            format: 1\n        };\n    }\n}\n\n\nclass UndoStack {\n    constructor() {\n        // Stack of saved AppState instances (most recent one at the end).\n        this.state_stack = [];\n\n        // Maximum size of this.state_stack\n        this.max_stack_depth = 100;\n        \n        // Number of consecutive undo operations that have been performed so far.\n        // If this is greater that zero, 'redo' operations can revert the undos.\n        this.undo_count = 0;\n    }\n\n    clear(initial_app_state) {\n        this.state_stack = [initial_app_state];\n        this.undo_count = 0;\n    }\n\n    push_state(state) {\n        // Only save state if it differs from the state we'd be undoing to.\n        if(this.state_stack.length > this.undo_count &&\n           this.state_stack[this.state_stack.length - this.undo_count - 1].same_as(state))\n            return null;\n\n        if(this.undo_count > 0) {\n            // Truncate already-undone saved states.  This means that 'redo' will no longer work\n            // until some more undos are performed.\n            this.state_stack = this.state_stack.slice(0, this.state_stack.length - this.undo_count);\n            this.undo_count = 0;\n        }\n\n        this.state_stack.push(state);\n\n        // Prevent the undo list from growing indefinitely.\n        if(this.state_stack.length > this.max_stack_depth)\n            this.state_stack = this.state_stack.slice(this.state_stack.length - this.max_stack_depth);\n\n        return state;\n    }\n\n    undo_state() {\n        if(this.state_stack.length-1 > this.undo_count) {\n            this.undo_count++;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n\n    redo_state() {\n        if(this.undo_count > 0) {\n            this.undo_count--;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n}\n\n\n// Interface to the browser's IndexedDB storage.\n// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\nclass DocumentStorage {\n    constructor() {\n        this.open_request = null;\n        this.database = null;\n    }\n\n    open_database(onsuccess) {\n        if(!indexedDB) return;\n        this.on_open_success = onsuccess;\n        this.open_request = indexedDB.open('rpnlatex', 1);\n        this.open_request.onupgradeneeded = this.handle_upgrade_database.bind(this);\n        this.open_request.onsuccess = this.handle_open_success.bind(this);\n        this.open_request.onerror = this.handle_open_error.bind(this);\n    }\n\n    handle_upgrade_database(event) {\n        this.database = this.open_request.result;\n        switch(event.oldVersion) {\n        case 0: this.build_initial_schema(); break;\n        default: break;\n        }\n    }\n\n    // 'documents' is a map of filename->json document content\n    // 'documents_metadata' is a map of filename->filesize, etc.\n    // The metadata is needed because otherwise the entire file contents have to be loaded and parsed\n    // just to show the filesize and object count in the file selector.\n    // IndexedDB indexes could probably be used for this instead (by having the index key be\n    // \"filename:filesize:object_counts:timestamp:etc\").\n    build_initial_schema() {\n        this.database.createObjectStore('documents', {keyPath: 'filename'});\n        this.database.createObjectStore('documents_metadata', {keyPath: 'filename'});\n    }\n\n    handle_open_error(event) {\n        //alert(\"Unable to open IndexedDB for document storage.  You will be unable to save or load documents.\\nThis may happen in Private Browsing mode on some browsers.\\nError message: \" + this.open_request.error);\n        this.open_request = null;\n    }\n\n    handle_open_success(event) {\n        this.database = this.open_request.result;\n        this.open_request = null;\n        this.database.onversionchange = () => {\n            this.database.close();\n            this.database = null;\n            alert('Warning: database is outdated, please reload the page.');\n        };\n        if(this.on_open_success) this.on_open_success();\n    }\n\n    create_transaction(readwrite) {\n        return this.database.transaction(\n            ['documents', 'documents_metadata'],\n            readwrite ? 'readwrite' : 'readonly');\n    }\n\n    sanitize_filename(filename) {\n        const fn = filename.replaceAll(/[^a-zA-Z0-9_ ]/g, '').trim();\n        return (fn.length === 0 || fn.length > 200) ? null : fn;\n    }\n\n    load_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let document_store = transaction.objectStore('documents');\n        let request = document_store.get(filename);\n        request.onsuccess = () => {\n            // NOTE: request.result will be undefined if the filename key wasn't\n            // found.  This still counts as a 'success'.\n            const json = request.result;\n            if(json) {\n                const app_state = AppState.from_json(request.result);\n                onsuccess(filename, app_state);\n            }\n            else\n                onerror(filename, '???');  // TODO\n        };\n        request.onerror = () => {\n            onerror(filename, '???');  // TODO\n        };\n    }\n\n    save_state(app_state, filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let serialized_json = app_state.to_json();\n        serialized_json.filename = filename;\n\n        // Estimate the file size by serializing JSON.\n        // IndexedDB also does this serialization itself, but there doesn't\n        // seem to be any way to reuse that result directly.\n        const filesize = JSON.stringify(serialized_json).length;\n\n        const metadata_json = {\n            filename: filename,\n            filesize: filesize,\n            description: '',  // TODO\n            stack_item_count: app_state.stack.depth(),\n            document_item_count: app_state.document.items.length,\n            timestamp: new Date()\n        };\n        \n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').put(serialized_json);\n        transaction.objectStore('documents_metadata').put(metadata_json);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    delete_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').delete(filename);\n        transaction.objectStore('documents_metadata').delete(filename);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    fetch_file_list(onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let request = transaction.objectStore('documents_metadata').getAll();\n        request.onsuccess = () => {\n            request.result.forEach(row => {\n                // Parse the timestamp\n                const ts_value = Date.parse(row.timestamp);\n                row.timestamp = ts_value ? new Date(ts_value) : null;\n            });\n            onsuccess(request.result);\n        };\n        request.onerror = onerror;\n    }\n\n    // Fetch all documents using a cursor.  'onrowfetched' is invoked once per document\n    // and then 'onfinished' is invoked at the end.\n    fetch_all_documents(onrowfetched, onfinished, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let cursor = transaction.objectStore('documents').openCursor();\n        cursor.onsuccess = (event) => {\n            const c = event.target.result;\n            if(c) {\n                onrowfetched(c.value);\n                c.continue();\n            }\n            else\n                onfinished();\n        };\n        cursor.onerror = onerror;\n    }\n}\n\n\n// Manage state of importing/exporting zip archives.\nclass ImportExportState {\n    constructor() {\n        // States:\n        //   'idle' - if this.download_url is populated, an export download is ready\n        //   'error' - export failed, this.error_message is populated\n        //   'loading' - in the process of loading from the database cursor\n        //   'zipping' - creation of zip file in progress\n        //   'uploading' - user is uploading an archive zipfile\n        //   'importing' - uploaded zipfile is being processed/imported\n        this.state = 'idle';\n\n        this.document_storage = null;  // will be initialized by AppState\n\n        // Number of imported documents handled so far.\n        this.import_count = 0;\n\n        // Number of failures noted this import (if >0, this.error_message will also be set).\n        this.failed_count = 0;\n        this.error_message = null;\n\n        // Holds the last-generated blob download URL, if any.\n        this.download_url = null;\n\n        // This will be set on a successful import.\n        this.import_result_string = null;\n\n        // This will be set to true if the main file list (FileManagerState) needs to be refreshed from the DB.\n        this.file_list_needs_update = false;\n\n        // This can be set to a function to monitor state changes.\n        this.onstatechange = null;\n    }\n\n    // TODO: -> state_description()\n    textual_state() {\n        switch(this.state) {\n        case 'idle': return this.download_url ? 'Download Ready' : 'Ready for export or import';\n        case 'error': return 'Error: ' + this.error_message;\n        case 'loading': return 'Extacting database...';\n        case 'zipping': return 'Compressing files...';\n        case 'uploading': return 'Uploading data...';\n        case 'importing': return 'Importing documents: ' + this.import_count + ' so far';\n        default: return '???';\n        }\n    }\n\n    download_available() {\n        return this.state === 'idle' && this.download_url;\n    }\n\n    generate_download_filename() {\n        const date = new Date();\n        return [\n            'rpnlatex_', date.getFullYear().toString(), '_',\n            date.toLocaleString('default', {month: 'short'}).toLowerCase(),\n            '_', date.getDate().toString().padStart(2, '0'), '.zip'\n        ].join('');\n    }\n\n    change_state(new_state) {\n        this.state = new_state;\n        if(this.onstatechange)\n            this.onstatechange(this);\n    }\n    \n    start_exporting() {\n        let document_storage = this.document_storage;\n        this.zip = new JSZip();\n        document_storage.fetch_all_documents(\n            (row) => this.add_document_json_to_zip(row),\n            () => this.start_compressing(),\n            () => {\n                this.error_message = 'Unable to export the document database.';\n                this.change_state('error');\n            });\n        this.change_state('loading');\n    }\n\n    add_document_json_to_zip(json) {\n        this.zip.file(json.filename + '.json', JSON.stringify(json));\n    }\n\n    start_compressing() {\n        this.change_state('zipping');\n        this.zip.generateAsync({type: 'blob'}).then(content_blob => {\n            this.finished_compressing(content_blob);\n        });\n    }\n\n    clear_download_url() {\n        if(this.download_url) {\n            URL.revokeObjectURL(this.download_url);\n            this.download_url = null;\n        }\n    }\n\n    finished_compressing(content_blob) {\n        this.clear_download_url();\n        this.download_url = URL.createObjectURL(content_blob);\n        this.zip = null;\n        this.change_state('idle');\n    }\n\n    // zipfile is a File object from a <input type=\"file\"> element.\n    start_importing(zipfile) {\n        this.clear_download_url();\n        this.import_result_string = null;\n        if(zipfile.type !== 'application/zip') {\n            alert('Import files must be zip archives.');\n            return;\n        }\n        this.change_state('uploading');\n        let reader = new FileReader();\n        reader.addEventListener(\n            'load',\n            event => this.process_uploaded_data(event.target.result));\n        reader.readAsArrayBuffer(zipfile);\n    }\n\n    process_uploaded_data(data) {\n        this.import_count = 0;\n        this.failed_count = 0;\n        this.error_message = null;\n        this.change_state('importing');\n        JSZip.loadAsync(data).then(zipfile => {\n            let promises = [];\n            for(let filename in zipfile.files) {\n                const file = zipfile.files[filename];\n                if(filename.endsWith('.json')) {\n                    promises.push(\n                        file.async('string').then(\n                            content => this.import_file(file.name.slice(0, file.name.length-5), content)));\n                }\n                else {\n                    this.error_message = 'Invalid filename in archive: ' + filename;\n                    this.failed_count++;\n                }\n            }\n            Promise.all(promises).then(\n                () => {\n                    if(this.failed_count > 0)\n                        this.import_result_string = 'Errors encountered: ' + this.error_message;\n                    else\n                        this.import_result_string = 'Successfully imported ' + this.import_count + ' document' + (this.import_count === 1 ? '' : 's');\n                    this.change_state('idle');\n                    this.file_list_needs_update = true;\n                });\n        });\n    }\n\n    import_file(filename, content) {\n        let document_storage = this.document_storage;\n        let parsed, app_state;\n        try {\n            parsed = JSON.parse(content);\n            app_state = AppState.from_json(parsed);\n        } catch(e) {\n            this.error_message = 'Invalid document found in zip file: ' + filename;\n            this.failed_count++;\n            return;\n        }\n        document_storage.save_state(app_state, filename);\n        this.import_count++;\n        this.change_state('importing');\n    }\n}\n\n\nclass FileManagerState {\n    constructor(file_list, selected_filename, current_filename) {\n        this.file_list = file_list;\n        this.selected_filename = selected_filename;\n        this.current_filename = current_filename;\n        this.unavailable = false;  // set to true if there's a database error\n    }\n\n    sort_file_list(field, ascending) {\n        this.file_list.sort((a, b) => {\n            const a_value = a[field], b_value = b[field];\n            return (ascending ? 1 : -1)*(a_value === b_value ? 0 : (a_value < b_value ? -1 : 1));\n        });\n    }\n\n    // basename -> basename_1\n    // basename_1 -> basename_2\n    // The first available name is used, so basename_50 -> basename_2\n    // if basename_2 is available but basename_1 is taken.\n    generate_unused_filename(basename) {\n        if(this.unavailable || !this.file_list)\n            return basename;\n        basename = basename.replace(/_\\d+$/, '')\n        for(let n = 1; n < 1000; n++) {\n            const candidate = basename + '_' + n;\n            if(!this.file_list.some(file => file.filename === candidate))\n                return candidate;\n        }\n        return basename + '_toomany';\n    }\n\n    // For moving up or down in the list of files.\n    find_adjacent_filename(filename, offset) {\n        if(this.unavailable || !this.file_list) return null;\n        let new_filename = null;\n        let file_list = this.file_list;\n        file_list.forEach((f, index) => {\n            if(f.filename === filename) {\n                let new_index = index+offset;\n                if(new_index < 0) new_index = 0;\n                if(new_index >= file_list.length) new_index = file_list.length-1;\n                new_filename = file_list[new_index].filename;\n            }\n        });\n        if(!new_filename && file_list.length > 0)\n            new_filename = file_list[0].filename;\n        return new_filename;\n    }\n}\n\n\n// Abstract superclass for expression trees.\nclass Expr {\n    static from_json(json) {\n        switch(json.expr_type) {\n        case 'command':\n            return new CommandExpr(json.command_name, this._list(json.operand_exprs), json.options);\n        case 'prefix':\n            return new PrefixExpr(this._expr(json.base_expr), this._expr(json.prefix_expr));\n        case 'infix':\n            return new InfixExpr(\n                this._expr(json.operator_expr), this._expr(json.left_expr),\n                this._expr(json.right_expr), json.split || null);\n        case 'placeholder':\n            return new PlaceholderExpr();\n        case 'text':\n            return new TextExpr(json.text);\n        case 'sequence':\n            return new SequenceExpr(this._list(json.exprs));\n        case 'delimiter':\n            return new DelimiterExpr(\n                json.left_type, json.right_type, json.middle_type,\n                this._list(json.inner_exprs), json.fixed_size);\n        case 'subscriptsuperscript':\n            return new SubscriptSuperscriptExpr(\n                this._expr(json.base_expr),\n                this._expr(json.subscript_expr),\n                this._expr(json.superscript_expr));\n        case 'array':\n            return new ArrayExpr(\n                json.array_type, json.row_count, json.column_count, this._list2d(json.element_exprs),\n                json.row_separators, json.column_separators);\n        default:\n            return new TextExpr('invalid expr type ' + json.expr_type);\n        }\n    }\n\n    // Helper routines for from_json\n    static _expr(json) { return json ? Expr.from_json(json) : null; }\n    static _list(json_array) { return json_array.map(expr_json => Expr.from_json(expr_json)); }\n    static _list2d(json_array) { return json_array.map(row_exprs => Expr._list(row_exprs)); }\n    \n    // Concatenate two Exprs into one.  This will merge Sequence and Text\n    // nodes when possible, instead of creating nested SequenceExprs.\n    static combine_pair(left, right) {\n        const left_type = left.expr_type(), right_type = right.expr_type();\n        if(left_type === 'sequence' && right_type === 'sequence')\n            return new SequenceExpr(left.exprs.concat(right.exprs));\n        else if(left_type === 'text' && right_type === 'text')\n            return new TextExpr(left.text + right.text);\n        else if(left_type === 'sequence' && right_type === 'text' &&\n                left.exprs[left.exprs.length-1].expr_type() === 'text') {\n            // Left sequence ends in a Text; merge it with the new Text.\n            return new SequenceExpr(\n                left.exprs.slice(0, -1).concat([\n                    new TextExpr(left.exprs[left.exprs.length-1].text + right.text)\n                ]));\n        }\n        else if(left_type === 'text' && right_type === 'text' &&\n                right.exprs[0].expr_type() === 'text') {\n            // Right sequence starts with a Text; merge it with the new Text.\n            return new SequenceExpr(\n                [new TextExpr(left.text + right.exprs[0].text)\n                ].concat(right.exprs.slice(1)));\n        }\n        else if(left_type === 'sequence') {\n            // Sequence + anything => longer Sequence\n            return new SequenceExpr(left.exprs.concat([right]));\n        }\n        else if(right_type === 'sequence') {\n            // Anything + Sequence => longer Sequence\n            return new SequenceExpr([left].concat(right.exprs));\n        }\n        else if(left_type === 'command' && right_type === 'command')\n            return Expr.combine_command_pair(left, right);\n        else if(right_type === 'prefix') {\n            // X + prefix(Y) -> infix(X, Y) (this should always be OK to do)\n            return new InfixExpr(right.prefix_expr, left, right.base_expr);\n        }\n        else\n            return new SequenceExpr([left, right]);\n    }\n\n    // Combine two CommandExprs with some special-casing for some particular command pairs.\n    static combine_command_pair(left, right) {\n        const left_name = left.command_name, right_name = right.command_name;\n\n\t// Try combining \\boldsymbol{X...} + \\boldsymbol{Y...} -> \\boldsymbol{X...Y...}\n\t// Combining in this way fixes (or at least improves) some edge-case spacing problems with KaTeX.\n\t// Compare: \\boldsymbol{W}\\boldsymbol{A} vs. \\boldsymbol{WA}\n\tif(left_name === 'boldsymbol' && right_name === 'boldsymbol' &&\n\t   left.operand_count() === 1 && right.operand_count() === 1)\n\t    return new SequenceExpr(\n\t\t[left.operand_exprs[0], right.operand_exprs[0]]\n\t    ).as_bold();\n\n\t// Try combining adjacent integral symbols into multiple-integral commands.\n        let new_command_name = null;\n        if(left_name === 'int' && right_name === 'int') new_command_name = 'iint';\n        if(left_name === 'iint' && right_name === 'int') new_command_name = 'iiint';\n        if(left_name === 'int' && right_name === 'iint') new_command_name = 'iiint';\n        if(left_name === 'oint' && right_name === 'oint') new_command_name = 'oiint';\n        if(left_name === 'oiint' && right_name === 'oint') new_command_name = 'oiiint';\n        if(left_name === 'oint' && right_name === 'oiint') new_command_name = 'oiiint';\n        if(new_command_name)\n            return new CommandExpr(new_command_name);\n\n\t// Everything else just becomes a SequenceExpr.\n        return new SequenceExpr([left, right]);\n    }\n    \n    expr_type() { return '???'; }\n\n    to_latex() {\n        let emitter = new LatexEmitter();\n        this.emit_latex(emitter);\n        return emitter.finished_string();\n    }\n\n    emit_latex(emitter) { emitter.text('INVALID'); }\n\n    // Return a list of property names on this object that should be serialized\n    json_keys() { return []; }\n\n    // Subclasses can extend this if they need special handling.\n    to_json() {\n        let json = { expr_type: this.expr_type() };\n        this.json_keys().forEach(json_key => {\n            const obj = this[json_key];\n            let value;\n            if(obj === null || obj === undefined)\n                value = null;\n            else if(typeof(obj) === 'object' && obj instanceof Expr)\n                value = obj.to_json();\n            else if(typeof(obj) === 'object') {\n                // Assume it's an Array.  It could also be a 2-dimensional array, in which case the subclasses\n                // need to extend to_json() instead of relying on this default.\n                value = obj.map(elt => elt.to_json());\n            }\n            else // Strings, numbers, etc.\n                value = obj;\n            json[json_key] = value;\n        });\n        return json;\n    }\n\n    to_text() { return \"$$\\n\" + this.to_latex() + \"\\n$$\"; }\n\n    // Invoke fn once for each subexpression in this expression tree (including 'this').\n    // The visiting is performed depth-first, left-to-right, so should correspond visually\n    // to the left-to-right rendering of the expression.\n    visit(fn) { fn(this); }\n\n    // Find the first PlaceholderExpr that exists in this expression.  Returns null if none.\n    find_placeholder() {\n        let found = null;\n        this.visit(expr => {\n            if(expr.expr_type() === 'placeholder' && !found)\n                found = expr;\n        });\n        return found;\n    }\n\n    // Return a (possibly) new Expr with old_expr substituted for new_expr, if old_expr is present.\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr)\n            return new_expr;\n        else\n            return this;\n    }\n\n    // NOTE: CommandExpr overrides this\n    as_bold() { return new CommandExpr('boldsymbol', [this]); }\n\n    is_command_with_name(command_name) { return false; }\n}\n\n\n// Represents a \"raw\" LaTeX command such as \\sqrt plus optional operand expressions.\nclass CommandExpr extends Expr {\n    // NOTES:\n    //   - 'command_name' does not include the initial \\ character\n    //   - 'options', if provided, is a plain string that becomes \"\\command_name[options]{...}\"\n    //   - 'command_name' itself can include the options in [brackets], in which case it is\n    //     automatically split off into 'options' (this is used for keybindings).\n    //     (e.g.: command_name='sqrt[3]' -> command_name='sqrt', options='3'\n    constructor(command_name, operand_exprs, options) {\n        super();\n        if(command_name.endsWith(']')) {\n            const index = command_name.indexOf('[');\n            this.command_name = command_name.slice(0, index);\n            this.options = command_name.slice(index+1, command_name.length-1);\n        }\n        else {\n            this.command_name = command_name;\n            this.options = options === undefined ? null : options;\n        }\n        this.operand_exprs = operand_exprs || [];\n    }\n\n    operand_count() { return this.operand_exprs.length; }\n    expr_type() { return 'command'; }\n    json_keys() { return ['command_name', 'operand_exprs', 'options']; }\n\n    emit_latex(emitter) {\n        emitter.command(this.command_name, this.options);\n        // Braces need to be forced around each operand, even single-letter operands.\n        this.operand_exprs.forEach(operand_expr => emitter.grouped_expr(operand_expr, 'force'));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.operand_exprs.forEach(operand_expr => operand_expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new CommandExpr(\n            this.command_name,\n            this.operand_exprs.map(operand_expr => operand_expr.substitute_expr(old_expr, new_expr)),\n            this.options);\n    }\n\n    // Wrap this expression in a \\boldsymbol{...} command if it's not already.\n    // LaTeX has different ways of expressing 'bold' so this is not quite trivial.\n    // TextItem implements as_bold() in yet another way.\n    as_bold() {\n        if(this.command_name === 'boldsymbol')\n            return this;\n        else if(this.command_name === 'mathrm') {\n            // Replace \\mathrm with \\bold (as if it were originally created with [.][e] (operator bold))\n            if(this.operand_count() === 1)\n                return new CommandExpr('bold', this.operand_exprs);\n            else\n                return this;\n        }\n        else if(this.command_name === 'mathtt' || this.command_name === 'mathsf' ||\n                this.command_name === 'mathbb' || this.command_name === 'mathfrak' ||\n                this.command_name === 'mathscr' || this.command_name === 'mathcal') {\n            // For font families without bold fonts, wrap it in \\pmb{} instead.\n            // Since KaTeX v.0.16.2, \\pmb is rendered better (via CSS shadows) which\n            // makes this feasible.\n            if(this.operand_count() === 1)\n                return new CommandExpr('pmb', [this]);\n            else\n                return this;\n        }\n        else\n            return super.as_bold();\n    }\n\n    is_command_with_name(command_name) {\n        return this.command_name === command_name;\n    }\n}\n\n\n// Represents one expression in front of another.  Similar to InfixExpr.\nclass PrefixExpr extends Expr {\n    constructor(base_expr, prefix_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.prefix_expr = prefix_expr;\n    }\n\n    expr_type() { return 'prefix'; }\n\n    json_keys() { return ['base_expr', 'prefix_expr']; }\n\n    emit_latex(emitter) {\n        emitter.expr(this.prefix_expr);\n        emitter.expr(this.base_expr);\n    }\n\n    visit(fn) {\n        this.prefix_expr.visit(fn);\n        fn(this);\n        this.base_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new PrefixExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.prefix_expr.substitute_expr(old_expr, new_expr));\n    }\n}\n\n\n// Represents two expressions joined by textual infix (something like + or \\wedge).\n// This is similar to concatenated TextNodes, but using InfixExpr lets things like ArrayExpr\n// automatically detect where to put alignments when the contents are InfixExprs.\nclass InfixExpr extends Expr {\n    // split can be null, 'before', or 'after'.\n    // If it's non-null, the equation is split via \\\\ and \\qquad, either before or after the infix.\n    constructor(operator_expr, left_expr, right_expr, split) {\n        super();\n        this.operator_expr = operator_expr;\n        this.left_expr = left_expr;\n        this.right_expr = right_expr;\n        this.split = split || null;  // to avoid 'undefined's in the JSON\n    }\n\n    expr_type() { return 'infix'; }\n\n    json_keys() { return ['operator_expr', 'left_expr', 'right_expr', 'split']; }\n\n    // If the infix operator is a simple command like '+' or '\\cap', return it\n    // (without the initial \\ if it has one).  If it's anything more complex, return null.\n    operator_text() {\n        const op_expr = this.operator_expr;\n        if(op_expr.expr_type() === 'command' && op_expr.operand_count() === 0)\n            return op_expr.command_name;\n        else if(op_expr.expr_type() === 'text')\n            return op_expr.text;\n        else\n            return null;\n    }\n\n    // Check if this is a low-precedence infix expression like x+y\n    // This is mostly for convenience so it doesn't need to be that precise.\n    needs_autoparenthesization() {\n        const op = this.operator_text();\n        return op && (op === '+' || op === '-');\n    }\n\n    emit_latex(emitter) {\n        emitter.expr(this.left_expr);\n        if(this.split === 'before') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.operator_expr);\n        if(this.split === 'after') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.right_expr);\n    }\n\n    visit(fn) {\n        this.left_expr.visit(fn);\n        this.operator_expr.visit(fn);\n        fn(this);\n        this.right_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new InfixExpr(\n            this.operator_expr.substitute_expr(old_expr, new_expr),\n            this.left_expr.substitute_expr(old_expr, new_expr),\n            this.right_expr.substitute_expr(old_expr, new_expr),\n            this.split);\n    }\n\n    // Returns an InfixExpr like this one, but with the specified split mode set.\n    with_split_mode(new_split_mode) {\n        return new InfixExpr(\n            this.operator_expr, this.left_expr, this.right_expr, new_split_mode);\n    }\n}\n\n\n// Represents a \"placeholder marker\" that can be used with the 'substitute_placeholder' command.\nclass PlaceholderExpr extends Expr {\n    expr_type() { return 'placeholder'; }\n    json_keys() { return []; }\n\n    emit_latex(emitter) {\n        const expr = new CommandExpr('htmlClass', [\n            new TextExpr('placeholder_expr'), new TextExpr(\"\\\\blacksquare\")]);\n        emitter.expr(expr);\n    }\n}\n\n\n// Represents a snippet of LaTeX code; these are the \"leaves\" of Expr-trees.\nclass TextExpr extends Expr {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n\n    expr_type() { return 'text'; }\n    json_keys() { return ['text']; }\n\n    emit_latex(emitter) { emitter.text(this.text); }\n}\n\n\n// Represents a sequence of expressions all concatenated together.\n// Adjacent SequenceExprs can be merged together; see Expr.combine_pair().\nclass SequenceExpr extends Expr {\n    constructor(exprs) {\n        super();\n        this.exprs = exprs;\n    }\n\n    expr_type() { return 'sequence'; }\n    json_keys() { return ['exprs']; }\n\n    emit_latex(emitter) {\n        // Emit each subexpression in order, with a special case for a large operator\n        // like \\sum followed by a \\mathopen{} (e.g. f(x) created with [/][o]).\n        // KaTeX renders this case with too little spacing between the two, so\n        // explicitly insert a thinspace here.\n        //\n        // NOTE: \\int (and related symbols like \\oint) have the same problem, but\n        // because of the shape of these operators it looks fine and there's no need\n        // for this workaround.\n        const problematic_large_operators = ['sum', 'prod', 'bigcup', 'bigcap'];\n        let last_was_large_op = false;\n        this.exprs.forEach(expr => {\n            if(last_was_large_op && expr.is_command_with_name('mathopen'))\n                emitter.command(',');\n            emitter.expr(expr);\n            last_was_large_op = problematic_large_operators.some(op => expr.is_command_with_name(op));\n        });\n    }\n\n    visit(fn) {\n        fn(this);\n        this.exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SequenceExpr(\n            this.exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents an expression enclosed in (flexible) left/right delimiters.\n// \\left( ... \\right)\n// If there is more than one inner_expr, they'll be separated with this.middle_type\n// e.g.: \\left( x \\middle| y \\right)\nclass DelimiterExpr extends Expr {\n    static parenthesize(expr) {\n        return new DelimiterExpr('(', ')', null, [expr]);\n    }\n\n    // Parenthesize 'expr' only if it's a low-precedence InfixExpr like 'x+y'.\n    static autoparenthesize(expr) {\n        if(expr.expr_type() === 'infix' && expr.needs_autoparenthesization())\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n\n    // Parenthesize 'expr' only if it's a \"fraction\", which could mean one of:\n    //   \\frac{x}{y}\n    //   x/y\n    //   \\left.x\\middle/\\right.  (as created by e.g. [,][\\])\n    static autoparenthesize_frac(expr) {\n        const needs_parenthesization = (\n            // \\frac{x}{y}\n            (expr.expr_type() === 'command' &&\n             expr.command_name === 'frac' &&\n             expr.operand_count() === 2) ||\n\n            // x/y\n            (expr.expr_type() === 'infix' && expr.operator_text() === '/') ||\n\n            // \\left.x\\middle/\\right.\n            (expr.expr_type() === 'delimiter' &&\n             expr.left_type === '.' &&\n             expr.middle_type === '/' &&\n             expr.right_type === '.')\n        );\n        if(needs_parenthesization)\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n    \n    constructor(left_type, right_type, middle_type, inner_exprs, fixed_size) {\n        super();\n        this.left_type = left_type;\n        this.right_type = right_type;\n        this.middle_type = middle_type || null;  // to avoid 'undefined's in the JSON\n\tthis.fixed_size = fixed_size || false;\n        this.inner_exprs = inner_exprs || [];\n    }\n\n    expr_type() { return 'delimiter'; }\n    json_keys() { return ['left_type', 'right_type', 'middle_type', 'inner_exprs']; }\n\n    emit_latex(emitter) {\n\tif(this.fixed_size)\n\t    this.emit_latex_fixed_size(emitter);\n\telse\n\t    this.emit_latex_flex_size(emitter);\n    }\n\n    emit_latex_flex_size(emitter) {\n        emitter.command('left');\n        emitter.text_or_command(this.left_type);\n        this.inner_exprs.forEach((expr, index) => {\n            if(index > 0) {\n                emitter.command('middle');\n                emitter.text_or_command(this.middle_type || '|');\n            }\n            emitter.expr(expr);\n        });\n        emitter.command('right');\n        emitter.text_or_command(this.right_type);\n    }\n\n    emit_latex_fixed_size(emitter) {\n\tif(this.left_type !== '.')\n\t    emitter.text_or_command(this.left_type);\n\tthis.inner_exprs.forEach((expr, index) => {\n\t    if(index > 0 && this.middle_type !== '.')\n\t\temitter.text_or_command(this.middle_type || '|');\n\t    emitter.expr(expr);\n\t});\n\tif(this.right_type !== '.')\n\t    emitter.text_or_command(this.right_type);\n    }\n\n    // Return a copy of this expression but with the given fixed_size flag.\n    as_fixed_size(fixed_size) {\n\treturn new DelimiterExpr(\n\t    this.left_type, this.right_type, this.middle_type,\n\t    this.inner_exprs, fixed_size);\n    }\n\n    to_json() {\n\tlet json = super.to_json();\n\tif(this.fixed_size) json.fixed_size = true;\n\treturn json;\n    }\n\n    visit(fn) {\n        fn(this);\n        this.inner_exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents a base expression with either a subscript or superscript, or both.\nclass SubscriptSuperscriptExpr extends Expr {\n    constructor(base_expr, subscript_expr, superscript_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.subscript_expr = subscript_expr;\n        this.superscript_expr = superscript_expr;\n    }\n\n    expr_type() { return 'subscriptsuperscript'; }\n    json_keys() { return ['base_expr', 'subscript_expr', 'superscript_expr']; }\n\n    emit_latex(emitter) {\n        // If the base_expr is a command, don't put it inside grouping braces.\n        // This accounts for attaching subscripts or superscripts to commands\n        // with arguments such as \\underbrace{xyz}_{abc}.\n        if(this.base_expr.expr_type() === 'command')\n            emitter.expr(this.base_expr);\n        else\n            emitter.grouped_expr(this.base_expr);\n        if(this.subscript_expr) {\n            emitter.text('_');\n            // 'force_commands' ensures that single LaTeX commands are still grouped, even\n            // though single-letter super/subscripts are still OK to leave ungrouped.\n            // e.g.: x^{\\sum} instead of x^\\sum, but x^2 is fine.\n            emitter.grouped_expr(this.subscript_expr, 'force_commands');\n        }\n        if(this.superscript_expr) {\n            emitter.text('^');\n            emitter.grouped_expr(this.superscript_expr, 'force_commands');\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.base_expr.visit(fn);\n        if(this.subscript_expr) this.subscript_expr.visit(fn);\n        if(this.superscript_expr) this.superscript_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SubscriptSuperscriptExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.subscript_expr ? this.subscript_expr.substitute_expr(old_expr, new_expr) : null,\n            this.superscript_expr ? this.superscript_expr.substitute_expr(old_expr, new_expr) : null);\n    }\n\n    is_command_with_name(command_name) {\n        return this.base_expr.is_command_with_name(command_name);\n    }\n}\n\n\n// \\begin{bmatrix} ... etc\n// Currently support \"array types\" are:\n//   matrices: bmatrix, Bmatrix, matrix, pmatrix, vmatrix, Vmatrix\n//   non-matrices (alignment environments): gathered, gather, cases, rcases\nclass ArrayExpr extends Expr {\n    // Stack two ArrayExprs on top of each other.\n    // If there is an incompatibility such as mismatched column counts, null is returned.\n    static stack_arrays(expr1, expr2) {\n        if(expr1.column_count !== expr2.column_count)\n            return null;\n        return new ArrayExpr(\n            expr2.array_type,\n            expr1.row_count + expr2.row_count,\n            expr1.column_count,\n            expr1.element_exprs.concat(expr2.element_exprs),\n            expr1.row_separators.concat([null], expr2.row_separators),\n            expr2.column_separators);\n    }\n    \n    // split_mode:  (for placing alignment markers automatically for \"\\cases\" and such)\n    //    'none': do nothing, just put each entry_expr in its own row\n    //    'infix': place alignment markers before infix, if any\n    //    'colon': if there is a ':' infix, remove it and place alignment marker where it was\n    //    'colon_if': like 'colon', but place the word \"if\" before the right-hand side if there\n    //                is a ':' infix.  If there is no ':' infix, the right-hand side becomes 'otherwise'.\n    static split_elements(exprs, split_mode) {\n        return exprs.map(expr => ArrayExpr._split_expr(expr, split_mode));\n    }\n\n    // Split up 'expr' into separately-aligned 'columns'.\n    static _split_expr(expr, split_mode) {\n        switch(split_mode) {\n        case 'none':\n            return [expr];\n        case 'infix':\n            if(expr.expr_type() === 'infix')\n                return [expr.left_expr, new PrefixExpr(expr.right_expr, expr.operator_expr)];\n            else\n                return [expr, null];\n        case 'colon':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [expr.left_expr, expr.right_expr];\n            else\n                return [expr, null];\n        case 'colon_if':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [\n                    expr.left_expr,\n                    Expr.combine_pair(\n                        Expr.combine_pair(\n                            new CommandExpr('mathrm', [new TextExpr('if')]),\n                            new CommandExpr('enspace'), []),\n                        expr.right_expr)];\n            else\n                return [\n                    expr,\n                    new CommandExpr('mathrm', [new TextExpr('otherwise')])];\n        default:\n            return [expr];\n        }\n    }\n\n    // row_separators and column_separators can either be null or an array of N-1\n    // items (where N is the row or column count respectively).  Each item can be\n    // one of: [null, 'solid', 'dashed'] indicating the type of separator to put\n    // between the corresponding row or column.\n    constructor(array_type, row_count, column_count, element_exprs,\n                row_separators, column_separators) {\n        super();\n        this.array_type = array_type;\n        this.row_count = row_count;\n        this.column_count = column_count;\n        this.element_exprs = element_exprs;\n        this.row_separators = row_separators || new Array(row_count-1).fill(null);\n        this.column_separators = column_separators || new Array(column_count-1).fill(null);\n    }\n\n    expr_type() { return 'array'; }\n    json_keys() { return ['array_type', 'row_count', 'column_count']; }\n\n    is_matrix() {\n        const t = this.array_type;\n        // TODO: t.endsWith('matrix')?\n        return (t === 'bmatrix' || t === 'Bmatrix' || t === 'matrix' ||\n                t === 'pmatrix' || t === 'vmatrix' || t === 'Vmatrix');\n    }\n\n    // Return a copy of this expression but with a different array_type (e.g. 'pmatrix').\n    // is_matrix() should be true before calling this.\n    with_array_type(new_array_type) {\n        return new ArrayExpr(\n            new_array_type, this.row_count, this.column_count,\n            this.element_exprs, this.row_separators, this.column_separators);\n    }\n\n    as_bold() {\n        return new ArrayExpr(\n            this.array_type,\n            this.row_count,\n            this.column_count,\n            this.element_exprs.map(row_exprs =>\n                row_exprs.map(expr => expr.as_bold())),\n            this.row_separators,\n            this.column_separators);\n    }\n\n    to_json() {\n        let json = super.to_json();\n        json.element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(expr => expr.to_json()));\n        // Don't emit row/column separators if they are all turned off (to keep the JSON smaller).\n        if(!this.row_separators.every(s => s === null))\n            json.row_separators = this.row_separators;\n        if(!this.column_separators.every(s => s === null))\n            json.column_separators = this.column_separators;\n        return json;\n    }\n\n    // Return a new ArrayExpr like this one, but with ellipses inserted before the\n    // last row and column, and along the diagonal.\n    // NOTE: is_matrix() should be true before calling this.\n    // NOTE: this does not preserve column/row separators.  There's not really a\n    // consistent way of doing this automatically.\n    with_ellipses() {\n        const make_cell = (content) => new TextExpr(content);\n        let new_row_count = this.row_count, new_column_count = this.column_count;\n        let new_element_exprs;\n        if(this.column_count > 1) {\n            new_element_exprs = this.element_exprs.map((row_exprs, index) => [\n                ...row_exprs.slice(0, -1),\n                make_cell((index === 0 || index === this.row_count-1) ? \"\\\\cdots\" : ''),\n                row_exprs[this.column_count-1]\n            ]);\n            new_column_count++;\n        }\n        else\n            new_element_exprs = [...this.element_exprs];\n        if(this.row_count > 1) {\n            let inserted_row_exprs = [make_cell(\"\\\\vdots\")];\n            for(let i = 0; i < this.column_count-2; i++)\n                inserted_row_exprs.push(make_cell(''));\n            if(this.column_count > 1)\n                inserted_row_exprs.push(make_cell(\"\\\\ddots\"), make_cell(\"\\\\vdots\"));\n            new_element_exprs.splice(this.row_count-1, 0, inserted_row_exprs);\n            new_row_count++;\n        }\n        // TODO: preserve row/column separators\n        return new ArrayExpr(this.array_type, new_row_count, new_column_count, new_element_exprs);\n    }\n\n    // Return a new ArrayExpr with rows and columns interchanged.\n    // NOTE: is_matrix() should be true before calling this.\n    transposed() {\n        let new_element_exprs = [];\n        for(let i = 0; i < this.column_count; i++)\n            new_element_exprs.push(this.element_exprs.map(\n                row_exprs => this._transpose_cell(row_exprs[i])));\n        return new ArrayExpr(\n            this.array_type, this.column_count, this.row_count, new_element_exprs,\n            this.column_separators, this.row_separators);\n    }\n\n    // When transposing a matrix, we generally want to flip vertical and horizontal ellipses\n    // within the cells.\n    _transpose_cell(cell_expr) {\n        if(cell_expr.expr_type() === 'text') {\n            switch(cell_expr.text) {\n            case \"\\\\vdots\": return new TextExpr(\"\\\\cdots\");\n            case \"\\\\cdots\": return new TextExpr(\"\\\\vdots\");\n            default: break;\n            }\n        }\n        return cell_expr;\n    }\n\n    // Return an array of 1xN ArrayExprs, one for each row in this matrix.\n    split_rows() {\n        return this.element_exprs.map(\n            row_exprs => new ArrayExpr(\n                this.array_type, 1, this.column_count, [row_exprs],\n                this.column_separators, null));\n    }\n\n    // Return a copy with a changed row or column separator at the specified location.\n    // 'index'=0 means right after the first row or column, etc.\n    // 'index'=null means apply separators to ALL rows or columns.\n    // 'type' is one of: [null, 'solid', 'dashed'].\n    // If 'toggle' is true, that indicates that if the current separator is already\n    // of the requested type, the separator will be turned off instead.\n    with_separator(is_column, index, type, toggle) {\n        const row_separators = [...this.row_separators];\n        const column_separators = [...this.column_separators];\n        const separators = is_column ? column_separators : row_separators;\n        const size = is_column ? this.column_count : this.row_count;\n        if(index === null) {\n            if(toggle && separators.every(s => s === type))\n                type = null;\n            for(let i = 0; i < size-1; i++)\n                separators[i] = type;\n        }\n        else {\n            if(index < 0 || index >= size-1)\n                return this;  // out of bounds\n            if(toggle && separators[index] === type)\n                type = null;\n            separators[index] = type;\n        }\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, this.element_exprs,\n            row_separators, column_separators);\n    }\n\n    // This is a matrix with at least one column separator specified.\n    // Unfortunately, with LaTeX/KaTeX, the {array} environment has to be used\n    // which doesn't support the surrounding matrix delimiters, so we have to\n    // explicitly put out the delimiters here.  But this also throws off the matrix\n    // spacing - \\kern is used to compensate for that.  But the spacing after \\kern\n    // is too small to accomodate horizontal rules (row separators) so if those are\n    // present, the (default) larger spacing is used.\n    _emit_array_with_separators(emitter) {\n        // Determine which delimiters to explicitly emit based on the matrix type.\n        let left_delim = null, right_delim = null;\n        switch(this.array_type) {\n        case 'bmatrix': left_delim = '['; right_delim = ']'; break;\n        case 'Bmatrix': left_delim = \"\\\\{\"; right_delim = \"\\\\}\"; break;\n        case 'matrix': left_delim = null; right_delim = null; break;\n        case 'pmatrix': left_delim = '('; right_delim = ')'; break;\n        case 'vmatrix': left_delim = right_delim = '|'; break;\n        case 'Vmatrix': left_delim = right_delim = \"\\\\Vert\"; break;\n        default: break;\n        }\n\n        // Assemble the LaTeX column separator \"specification\" string\n        // (the {c:c:c} part in: \\begin{array}{c:c:c}).\n        let pieces = ['{'];\n        for(let i = 0; i < this.column_count; i++) {\n            pieces.push('c');  // centered (only mode that's supported currently)\n            if(i < this.column_count-1) {\n                const s = this.column_separators[i];\n                if(s === 'solid') pieces.push('|');\n                else if(s === 'dashed') pieces.push(':');\n            }\n        }\n        pieces.push('}');\n        const column_layout_string = pieces.join('');\n\n        if(left_delim) {\n            emitter.command('left');\n            emitter.text_or_command(left_delim);\n        }\n        const has_row_separators = !this.row_separators.every(s => s === null);\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        emitter.begin_environment('array', column_layout_string);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0) {\n                emitter.row_separator();\n                const separator = this.row_separators[row_index-1];\n                if(separator) {\n                    if(separator === 'solid') emitter.command('hline')\n                    else if(separator === 'dashed') emitter.command('hdashline');\n                    emitter.text(\"\\n\");\n                }\n            }\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment('array');\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        if(right_delim) {\n            emitter.command('right');\n            emitter.text_or_command(right_delim);\n        }\n    }\n\n    emit_latex(emitter) {\n        // Matrices with row or column separators require special handling in LaTeX.\n        if(this.is_matrix() &&\n           !(this.column_separators.every(s => s === null) &&\n             this.row_separators.every(s => s === null)))\n            return this._emit_array_with_separators(emitter);\n\n        emitter.begin_environment(this.array_type);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0)\n                emitter.row_separator();\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment(this.array_type);\n    }\n\n    visit(fn) {\n        fn(this);\n        this.element_exprs.forEach(\n            row_exprs => row_exprs.forEach(expr => expr.visit(fn)));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        const new_element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(\n                expr => expr.substitute_expr(old_expr, new_expr)));\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, new_element_exprs,\n            this.row_separators, this.column_separators);\n    }\n}\n\n\n// Represents an entry in the stack or document.\nclass Item {\n    // Used for React collection keys.  Each entry in a React component list is\n    // supposed to have a unique ID.\n    // NOTE: iOS Safari doesn't seem to like static variables like this?\n    // As a workaround, this will be initialized after the class definition instead.\n    //static serial_number = 1;\n    static next_serial() { return Item.serial_number++; }\n\n    static from_json(json) {\n        switch(json.item_type) {\n        case 'expr':\n            return new ExprItem(\n                Expr.from_json(json.expr),\n                json.tag_expr ? Expr.from_json(json.tag_expr) : null);\n        case 'text':\n            return new TextItem(\n                json.elements.map(element_json => TextItemElement.from_json(element_json)),\n                !!json.is_heading);\n\tcase 'code':\n\t    return new CodeItem(json.language, json.source);\n        default:\n            return TextItem.from_string('invalid item type ' + json.item_type);\n        }\n    }\n\n    // // Create an appropriate Item subclass instance for the given string.\n    // // If string is wrapped in $$ pairs, it's treated as an ExprItem containing raw LaTeX code.\n    // // Otherwise, it's treated as Markdown text.\n    // static from_string(string) {\n    //     string = (string || '').trim();\n    //     // NOTE: .slice(2) here is to avoid pathological cases '$$', '$$$'\n    //     if(string.startsWith('$$') && string.slice(2).endsWith('$$')) {\n    //         const latex = string.slice(2, -2);\n    //         return new ExprItem(new TextExpr(latex));\n    //     }\n    //     else\n    //         return new MarkdownItem(string);\n    // }\n    \n    constructor() {\n        this.serial = Item.next_serial();\n    }\n\n    react_key(prefix) { return prefix + '_' + this.serial; }\n\n    // Subclasses need to override these:\n    item_type() { return '???'; }\n    to_json() { return {}; }\n    to_text() { return '???'; }\n\n    // Return a new Item of the same type and contents (shallow copy) but with a new serial_number.\n    // This is mainly needed for React, which needs a distinct React key for each item in\n    // a list (like the list of stack items).  Things like 'dup' that can duplicate objects\n    // need to make sure to use clone() so that every Item in the stack/document is distinct.\n    clone() { return null; }\n}\n\n// iOS Safari workaround\nItem.serial_number = 1;\n\n\n// Represents a math expression (Expr instance) in the stack or document.\nclass ExprItem extends Item {\n    // tag_expr is an optional tag shown to the right of the item.\n    constructor(expr, tag_expr) {\n        super()\n        this.expr = expr;\n        this.tag_expr = tag_expr;\n    }\n\n    item_type() { return 'expr'; }\n\n    to_json() {\n        let json = {item_type: 'expr', expr: this.expr.to_json()};\n        if(this.tag_expr) json.tag_expr = this.tag_expr.to_json();\n        return json;\n    }\n\n    to_text() { return this.expr.to_text(); }\n    clone() { return new ExprItem(this.expr, this.tag_expr); }\n    as_bold() { return new ExprItem(this.expr.as_bold(), this.tag_expr); }\n}\n\n\n// A TextItem contains a list of TextItemElement subclass instances.\n//   - TextItemExprElement - wraps a Expr object to be rendered inline with the text\n//   - TextItemTextElement - a string of text to be rendered as \\text{...} command(s)\n//   - TextItemRawElement - a string of text to be rendered directly (mostly a special\n//     case to support combining math and text with infix operators)\nclass TextItemElement {\n    static from_json(json) {\n        if(json.expr)\n            return new TextItemExprElement(Expr.from_json(json.expr));\n        else if(json.text)\n            return new TextItemTextElement(json.text, !!json.is_bold);\n        else\n            return new TextItemRawElement(json.raw);\n    }\n\n    is_text() { return false; }\n    is_expr() { return false; }\n    is_raw() { return false; }\n}\n\n\nclass TextItemTextElement extends TextItemElement {\n    // Bold font is handled specially for text items.\n    // Within a \\text{...}, bold is switched on and off via \\bf{} and \\rm{} commands.\n    constructor(text, is_bold) {\n        super();\n        this.text = text;\n        this.is_bold = !!is_bold;\n    }\n\n    is_text() { return true; }\n    as_bold() { return new TextItemTextElement(this.text, true); }\n\n    to_json() {\n        let json = { 'text': this.text };\n        if(this.is_bold) json.is_bold = true;\n        return json;\n    }\n\n    // TODO: respect is_bold here\n    to_text() { return this.text; }\n\n    to_latex() {\n        // This is a little messy because of how KaTeX handles line breaks.\n        // Normally, breaks are only allowed after operators like +, but when\n        // rendering TextItems, we want to allow breaks after each word.\n        // As a workaround, a separate \\text{...} command is created for each\n        // word followed by \\allowbreak commands.  \\allowbreak does not work\n        // inside the actual \\text{...}, otherwise we could presumably just output\n        // \\text{word1\\allowbreak word2\\allowbreak}.\n        const tokens = this.text.split(/ +/);\n        let pieces = [];\n        for(let i = 0; i < tokens.length; i++) {\n            pieces.push(\"\\\\text{\");\n            if(this.is_bold)\n                pieces.push(\"\\\\bf{}\");\n            pieces.push(this._latex_escape(tokens[i]));\n            if(i < tokens.length-1)\n                pieces.push(' ');  // preserve spacing between words\n            pieces.push(\"}\\\\allowbreak \");\n        }\n        return pieces.join('');\n    }\n\n    // Special escape sequences are needed within \\text{...} commands.\n    // This is a quirk of TeX/LaTeX.\n    _latex_escape(text) {\n        // TODO: make this table a global (or switch statement) so it doesn't constantly get remade\n        // NOTE: not sure how to properly get ^ and ~ inside \\text{...} with KaTeX.\n        // Fortunately, \\char\" always works.\n        const replacements = {\n            '_': \"\\\\_\",\n            '^': \"\\\\char\\\"005e{}\",\n            '%': \"\\\\%\",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\char\\\"223c{}\",\n            \"\\\\\": \"\\\\textbackslash \"\n        };\n        return text.replaceAll(/[_^%$&#}{~\\\\]/g, match => replacements[match]);\n    }\n}\n\nclass TextItemExprElement extends TextItemElement {\n    constructor(expr) { super(); this.expr = expr; }\n    is_expr() { return true; }\n    as_bold() { return new TextItemExprElement(this.expr.as_bold()); }\n    to_json() { return { 'expr': this.expr.to_json() }; }\n    to_text() { return '$' + this.expr.to_latex() + '$'; }\n    to_latex() { return this.expr.to_latex(); }\n}\n\n\n// Represents a \"raw\" piece of LaTeX text (similar to TextExpr) within a TextItem.\n// This is used for things like combining a TextItem and ExprItem with an infix operator.\n// TextItemTextElement can't be used for the infix itself because we don't want to wrap it\n// in a \\text{...} and we don't want to escape the operator's actual LaTeX command.\nclass TextItemRawElement extends TextItemElement {\n    constructor(string) { super(); this.string = string; }\n    is_raw() { return true; }\n    as_bold() { return this; }\n    to_json() { return { 'raw': this.string }; }\n    to_text() { return this.string; }\n    to_latex() { return this.string; }\n    is_explicit_space() { return this.string === \"\\\\,\"; }\n}\n\n\nclass TextItem extends Item {\n    static from_expr(expr) { return new TextItem([new TextItemExprElement(expr)]); }\n    static from_string(string) { return new TextItem([new TextItemTextElement(string)]); }\n    static empty_item() { return new TextItem([], true); }\n\n    // Like from_string, but if the string contains \"[]\" sequences, these are parsed out\n    // and converted into PlaceholderExpr placeholders.\n    static from_string_with_placeholders(string) {\n        const pieces = string.split('[]');\n        let elements = [];\n        for(let i = 0; i < pieces.length; i++) {\n            elements.push(new TextItemTextElement(pieces[i]));\n            if(i < pieces.length-1)\n                elements.push(new TextItemExprElement(new PlaceholderExpr()));\n        }\n        return new TextItem(elements);\n    }\n\n    // item1/2 can each be TextItems or ExprItems.\n    static concatenate_items(item1, item2, separator_text) {\n        if(item1.item_type() === 'expr') item1 = TextItem.from_expr(item1.expr);\n        if(item2.item_type() === 'expr') item2 = TextItem.from_expr(item2.expr);\n        const elements = item1.elements.concat(\n            separator_text ? [new TextItemRawElement(separator_text)] : [],\n            item2.elements);\n        // Coalesce adjacent elements.  Rules are:\n        //   - Adjacent TextElements are concatenated directly as long as their is_bold flags match.\n        //   - A RawElement representing an explicit space character (\\,) is absorbed into an\n        //     adjacent TextElement as a normal space character (this is to make the spacing\n        //     less weird when attaching a text and expression via an infix space).\n        let merged_elements = [elements[0]];\n        for(let i = 1; i < elements.length; i++) {\n            const last_index = merged_elements.length-1;\n            const last_merged_element = merged_elements[last_index];\n            if(last_merged_element.is_text() && elements[i].is_text() &&\n               last_merged_element.is_bold === elements[i].is_bold) {\n                // Two adjacent TextElements with the same is_bold flag.\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + elements[i].text, elements[i].is_bold);\n            }\n            else if(last_merged_element.is_raw() && last_merged_element.is_explicit_space() &&\n                    elements[i].is_text()) {\n                // raw space + TextElement\n                merged_elements[last_index] =\n                    new TextItemTextElement(' ' + elements[i].text, elements[i].is_bold);\n            }\n            else if(last_merged_element.is_text() &&\n                    elements[i].is_raw() && elements[i].is_explicit_space()) {\n                // TextElement + raw space\n                merged_elements[last_index] =\n                    new TextItemTextElement(last_merged_element.text + ' ', last_merged_element.is_bold);\n            }\n            else {\n                // Any other combinations are left alone.\n                merged_elements.push(elements[i]);\n            }\n        }\n        return new TextItem(merged_elements, item1.is_heading || item2.is_heading);\n    }\n\n    constructor(elements, is_heading) {\n        super();\n        this.elements = elements;\n        this.is_heading = !!is_heading;\n    }\n\n    item_type() { return 'text'; }\n\n    to_json() {\n        let json = {\n            item_type: 'text',\n            elements: this.elements.map(element => element.to_json())\n        };\n        // avoid lots of useless is_heading: false in the JSON\n        if(this.is_heading) json.is_heading = true;\n        return json;\n    }\n\n    // Empty TextItems are displayed as \"separator lines\" (visually, the underlined part\n    // of an ordinary section header).  Currently empty TextItems can only be created by\n    // the ['][=] command, and they are always created with is_heading=true.\n    // There is a slight corner case here if is_header flag is turned off via [/][\"].\n    // That case \"should\" display as a truly empty item, but for now we avoid this by\n    // just disallowing turning off the is_header flag in [/][\"] (do_toggle_is_heading).\n    is_empty() { return this.elements.length === 0; }\n\n    to_text() {\n\tif(this.is_empty())\n\t    return \"\\\\rule\";\n\telse\n\t    return this.elements.map(element => element.to_text()).join('');\n    }\n    \n    to_latex() { return this.elements.map(element => element.to_latex()).join(''); }\n\n    clone() { return new TextItem(this.elements, this.is_heading); }\n\n    // If this TextItem is simple enough, return a string representation suitable\n    // for editing using the minieditor.  \"Simple enough\" currently means that there\n    // are no Exprs mixed into the text, with the exception of PlaceholderExprs which are\n    // rendered as [].  Bold flags are stripped from the text as well.\n    // If this TextItem is not simple, null is returned indicating that it's\n    // \"uneditable\" with the minieditor.\n    as_editable_string() {\n\tlet pieces = [];\n\tfor(let i = 0; i < this.elements.length; i++) {\n\t    const elt = this.elements[i];\n\t    if(elt.is_text())\n\t\tpieces.push(elt.text);\n\t    else if(elt.is_raw()) {\n\t\t// Only basic \"explicit spaces\" are allowed; otherwise it's\n\t\t// probably a LaTeX command.\n\t\tif(elt.is_explicit_space())\n\t\t    pieces.push(' ');\n\t\telse return null;\n\t    }\n\t    else if(elt.is_expr()) {\n\t\t// Only top-level PlaceholderExprs are allowed.\n\t\tif(elt.expr.expr_type() === 'placeholder')\n\t\t    pieces.push('[]');\n\t\telse return null;\n\t    }\n\t}\n\treturn pieces.join('');\n    }\n\n    // Return a clone of this with all elements bolded.\n    as_bold() {\n        return new TextItem(\n            this.elements.map(element => element.as_bold()),\n            this.is_heading);\n    }\n\n    // If there is any PlaceholderExpr among the elements in this TextItem, substitute\n    // the first one for substitution_expr and return the new TextItem.\n    // If there are no PlaceholderExprs available, return null.\n    try_substitute_placeholder(substitution_expr) {\n        let new_elements = [...this.elements];\n        for(let i = 0; i < new_elements.length; i++) {\n            if(new_elements[i].is_expr()) {\n                const placeholder_expr = new_elements[i].expr.find_placeholder();\n                if(placeholder_expr) {\n                    const new_expr = new_elements[i].expr.substitute_expr(placeholder_expr, substitution_expr);\n                    new_elements[i] = new TextItemExprElement(new_expr);\n                    return new TextItem(new_elements, this.is_heading);\n                }\n            }\n        }\n        return null;\n    }\n}\n\n\nclass CodeItem extends Item {\n    static from_latex_string(s) { return new CodeItem('latex', s); }\n\n    constructor(language, source) {\n\tsuper();\n\tthis.language = language;\n\tthis.source = source;\n    }\n\n    item_type() { return 'code'; }\n\n    to_json() {\n\treturn {\n\t    item_type: 'code',\n\t    language: this.language,\n\t    source: this.source\n\t};\n    }\n\n    to_latex() { return '???'; }\n\n    clone() { return new CodeItem(this.language, this.source); }\n\n    as_bold() { return this.clone(); }\n}\n\n\n// NOTE: All stack operations return a new Stack with the modified\n// items, leaving the original untouched.\nclass Stack {\n    static from_json(json) {\n        return new Stack(\n            json.items.map(item_json => Item.from_json(item_json)));\n    }\n    \n    constructor(items) { this.items = items; }\n\n    depth() { return this.items.length; }\n    check(n) { return this.depth() >= n; }\n\n    // Check that at least n items are available and that they are all ExprItems\n    check_exprs(n) {\n        if(!this.check(n)) return false;\n        for(let i = 0; i < n; i++)\n            if(this.items[this.items.length-1-i].item_type() !== 'expr')\n                return false;\n        return true;\n    }\n\n    // Fetch item at position n (stack top = 1, next = 2, etc)\n    peek(n) {\n        if(!this.check(1)) this.underflow();\n        return this.items[this.items.length - n];\n    }\n\n    // Returns [new_stack, item1, item2, ...]\n    pop(n) {\n        if(n === undefined) n = 1;\n        if(!this.check(n)) this.underflow();\n        return this._unchecked_pop(n);\n    }\n\n    // Like pop(n) but all the items have to be ExprItems, and the wrapped Expr\n    // instances are returned, not the ExprItems.\n    pop_exprs(n) {\n        if(!this.check(n)) this.underflow();\n        if(!this.check_exprs(n)) this.type_error();\n        const [new_stack, ...items] = this._unchecked_pop(n);\n        return [new_stack, ...items.map(item => item.expr)];\n    }\n\n    pop_arrays(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array'))\n            return [new_stack, ...exprs];\n        else this.type_error();\n    }\n\n    pop_matrices(n) {\n        const [new_stack, ...array_exprs] = this.pop_arrays(n);\n        if(array_exprs.every(expr => expr.is_matrix()))\n            return [new_stack, ...array_exprs];\n        else this.type_error();\n    }\n\n    _unchecked_pop(n) {\n        return [new Stack(this.items.slice(0, -n))].concat(this.items.slice(-n));\n    }\n    \n    push_all(items) {\n        if(!items.every(item => item instanceof Item))\n            throw new Error('pushing invalid item onto stack');\n        return new Stack(this.items.concat(items));\n    }\n    \n    push_all_exprs(exprs) { return this.push_all(exprs.map(expr => new ExprItem(expr))); }\n    push(item) { return this.push_all([item]); }\n    push_expr(expr) { return this.push_all_exprs([expr]); }\n\n    // Return a new Stack with cloned copies of all the items.\n    // The cloned items will have new React IDs, which will force a re-render of the items.\n    // This is used for things like changing between display and inline math mode, where\n    // the item content doesn't change but the way it's rendered does.\n    clone_all_items() { return new Stack(this.items.map(item => item.clone())); }\n\n    underflow() { throw new Error('stack_underflow'); }\n    type_error() { throw new Error('stack_type_error'); }\n\n    to_json() {\n        return {\n            object_type: 'stack',\n            items: this.items.map(item => item.to_json())\n        };\n    }\n}\n\n\n// NOTE: Like Stack, all Document operations are non-destructive and return a new\n// Document reflecting the changes.\nclass Document {\n    static from_json(json) {\n        return new Document(\n            json.items.map(item_json => Item.from_json(item_json)),\n            json.selection_index || 0);\n    }\n\n    // NOTE: selection_index can be in the range 0..items.length (inclusive).\n    constructor(items, selection_index) {\n        this.items = items || [];\n        this.selection_index = selection_index;\n    }\n\n    selected_item() {\n        if(this.selection_index > 0)\n            return this.items[this.selection_index-1];\n        else\n            return null;\n    }\n\n    // Insert a new item below the current selection, and select the inserted item.\n    // Returns a modified Document; does not alter this one.\n    insert_item(new_item) {\n        const index = this.selection_index;\n        const new_items = this.items.slice(0, index).concat([new_item], this.items.slice(index));\n        return new Document(new_items, index+1);\n    }\n\n    // Return the new Document if the selection was deleted successfully.\n    // Selects the item that was before this one (or select the 'document top' if this was the first).\n    // Return null if the selection is \"invalid\" (e.g., empty document).\n    delete_selection() {\n        const index = this.selection_index;\n        if(index > 0) {\n            const new_items = this.items.slice(0, index-1).concat(this.items.slice(index));\n            return new Document(new_items, index-1);\n        }\n        else\n            return null;\n    }\n\n    move_selection_by(offset) {\n        let new_index = this.selection_index + offset;\n        if(new_index < 0) new_index = 0;\n        if(new_index > this.items.length) new_index = this.items.length;\n        return new Document(this.items, new_index);\n    }\n\n    // If there is a current selection, move it by the given offset.\n    // Returns the changed document if anything was done.\n    shift_selection_by(offset) {\n        const item = this.selected_item();\n        if(!item ||\n           this.selection_index + offset <= 0 ||\n           this.selection_index + offset > this.items.length)\n            return null;\n        else\n            return this.delete_selection().move_selection_by(offset).insert_item(item);\n    }\n\n    // See Stack.clone_all_items()\n    clone_all_items() {\n        return new Document(this.items.map(item => item.clone()), this.selection_index);\n    }\n\n    to_json() {\n        return {\n            object_type: 'document',\n            items: this.items.map(item => item.to_json()),\n            selection_index: this.selection_index\n        };\n    }\n\n    to_text() {\n        return this.items.map(item => item.to_text()).join(\"\\n\\n\");\n    }\n}\n\n\nexport {\n    Keymap, Settings, AppState, UndoStack, DocumentStorage, ImportExportState, FileManagerState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    Item, ExprItem, TextItem, CodeItem,\n    Stack, Document\n};\n\n","\nimport {\n    AppState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    ExprItem, TextItem, CodeItem\n} from './Models';\n\n\n// This acts as a sort of extension to the main App component.\n// TODO: rename -> EditorActions or something\nclass InputContext {\n    constructor(app_component, settings) {\n        this.app_component = app_component;\n        this.settings = settings;\n\n        // Current keymap mode.\n        this.mode = 'base';\n\n        // do_* actions can set this to switch into a new mode after the action (see switch_to_mode()).\n        this.new_mode = null;\n\n        // do_* actions can set this to update the document state.\n        this.new_document = null;\n        \n        this.files_changed = false;\n        this.file_saved = false;\n\n        // If set, this will be displayed as a transient notification in\n        // the stack area.  Cleared after every keypress.\n        this.notification_text = null;\n\n        // Special indicator to help control the undo stack:\n        //    null - save state to undo stack after this action as normal\n        //    'undo' - request an undo\n        //    'redo' - request a redo of saved undo states\n        //    'suppress' - perform action as normal, but don't save state to the undo state\n        //                 (used for 'minor' actions that don't warrant undo tracking)\n        //    'clear' - undo stack will be reset (e.g. when loading a new document)\n        this.perform_undo_or_redo = null;\n\n        // Current prefix argument for commands like Swap; can be one of:\n        //   null - no current prefix argument\n        //   >= 1 - normal prefix argument\n        //   -1   - \"all\" prefix argument (apply to all available items)\n        // Prefix arguments are cleared after any normal command is executed\n        // or if there's an error.  \"Normal\" command means anything that's not\n        // another prefix argument key.\n        this.prefix_argument = null;\n\n        // do_* actions can set this to true to keep the prefix_argument from being reset after the action.\n        this.preserve_prefix_argument = false;\n\n        // If non-null, text-entry mode is active and the entry line will appear at the\n        // bottom of the stack panel.\n        this.text_entry = null;\n\n        // Type of text entry currently being performed.\n        //   'text_entry': [\"] - text entry will become a TextItem (a section heading if Shift+Enter is used)\n        //   'math_text_entry': [\\] - text entry will become a ExprItem with either normal italic math text\n        //               (if Enter is used) or \\mathrm roman math text (if Shift+Enter)\n        //   'latex_entry': [\\][\\] - text entry will become a ExprItem with an arbitrary LaTeX command\n        this.text_entry_mode = null;\n\n\t// If this is set, this is the Item that is currently being edited.  While it's being edited,\n\t// it doesn't exist on the stack and is temporarily held here.  If the editor is cancelled,\n\t// this item will be placed back on the stack.\n\tthis.text_entry_edited_item = null;\n\n        // Tracks multi-part custom_delimiters commands.\n        this.custom_delimiters = {};\n    }\n\n    // Returns [was_handled, new_app_state]\n    // NOTE: was_handled just indicates that a keybinding was found; it doesn't necessarily mean\n    // that the command succeeded without error.\n    handle_key(app_state, key) {\n        if(key === 'Shift' || key === 'Alt' || key === 'Control')\n            return [false, app_state];\n\n        // If the popup panel is active, always use its dedicated keymap.\n        const effective_mode = this.settings.popup_mode || this.mode;\n        const command = this.settings.current_keymap.lookup_binding(effective_mode, key);\n        if(command) {\n            this.last_keypress = key;\n            const new_app_state = this.process_command(command, app_state);\n            return [true, new_app_state || app_state];\n        }\n        else\n            return [false, app_state];\n    }\n\n    // Returns the new AppState, or null if anything failed.\n    process_command(command, app_state) {\n        // Command strings are of the form:\n        //   'piece1;piece2;piece3'\n        // where the pieces are subcommands to be executed as a batch.\n        // Each piece in turn is a space-separated list where the first item\n        // is the command name and the remainder are arguments to the command.\n        // To put a literal semicolon into a command, write out 'semicolon'.\n        const commands = command.split(';').map(\n            piece => piece.split(' ').map(\n                token => token.replaceAll('semicolon', ';')));\n        return this.process_command_batch(commands, app_state);\n    }\n\n    // Process a batch of commands as a unit, returning the new AppState (or null if any of them failed).\n    // Each command is of the form [command_name, param1, param2, ...]\n    process_command_batch(commands, app_state) {\n        this.perform_undo_or_redo = null;\n        for(let i = 0; i < commands.length; i++) {\n            const [command_name, ...parameters] = commands[i];\n            const handler_function = this['do_' + command_name];\n            if(!handler_function)\n                return null;\n            try {\n                // Set up context variables for the handler functions to use:\n                this.app_state = app_state;\n\n                // TODO: maybe have this.changed.mode, this.changed.document etc.\n\n                // Watch to see if the handler sets new_mode.  If it does, switch to that\n                // mode after the command is finished, but otherwise switch back to base mode.\n                this.new_mode = null;\n\n                // The handler function will set this if the document changes.\n                // (Stack changes are expected to be returned by the handler function.)\n                this.new_document = null;\n\n                // Likewise this will be set to true if anything changed about the file list / file selection.\n                this.files_changed = false;  // TODO: rename -> selected_file_changed\n\n                // This will be set to true if the current file was saved by this action.\n                // This indicates that the app state's dirty flag should be cleared.\n                this.file_saved = false;\n\n                // If this is set to true, the prefix_argument will be kept as it as (otherwise it's reset to\n                // null after each action).\n                this.preserve_prefix_argument = false;\n\n                this.notification_text = null;\n\n                // Execute the handler and assemble the new state.\n                const new_stack = (handler_function.bind(this))(app_state.stack, ...parameters);\n                let new_app_state = new AppState(\n                    new_stack || app_state.stack,\n                    this.new_document || app_state.document\n                );\n                new_app_state.is_dirty = app_state.is_dirty || !new_app_state.same_as(app_state);\n                if(this.file_saved)  // Current file was saved; explicitly clear the dirty flag.\n                    new_app_state.is_dirty = false;\n                app_state = new_app_state;\n\n                // Switch back into base mode if the mode was not explicitly set by the handler.\n                this.mode = this.new_mode || 'base';\n\n                // Clear the prefix argument if the last command was not explicitly 'prefix_argument'.\n                if(!this.preserve_prefix_argument)\n                    this.prefix_argument = null;\n            } catch(e) {\n                if(e.message === 'stack_underflow' || e.message === 'stack_type_error' ||\n                   e.message === 'prefix_argument_required') {\n                    this.error_flash_stack();\n                    this.perform_undo_or_redo = null;\n                    this.mode = 'base';\n                    this.prefix_argument = null;\n                    return null;\n                }\n                else throw e;\n            }\n            finally {\n                // Avoid holding references longer than needed.\n                this.app_state = null;\n                this.new_document = null;\n            }\n        }\n        return app_state;\n    }\n\n    switch_to_mode(new_mode) {\n        this.new_mode = new_mode;\n    }\n\n    error_flash_element(dom_element) {\n        dom_element.classList.remove('errorflash');\n        // eslint-disable-next-line no-unused-expressions\n        dom_element.offsetWidth;  // force reflow\n        dom_element.classList.add('errorflash');\n    }\n\n    error_flash_stack() {\n        if(this.settings.layout.stack_split === 0)\n            return this.error_flash_document();\n        else\n            return this.error_flash_element(document.getElementById('stack_panel'));\n    }\n\n    error_flash_document() {\n        if(this.settings.layout.stack_split === 100)\n            return this.error_flash_stack();\n        else\n            return this.error_flash_element(document.getElementById('document_panel'));\n    }\n\n    clear_all_flashes() {\n\t['stack_panel', 'document_panel'].forEach(elt_id =>\n\t    document.getElementById(elt_id).classList.remove('errorflash'));\n        // for(let elt_id = 0; elt_id < elt_ids.length; elt_id++) {\n        //     let elt = document.getElementById(elt_ids[elt_id]);\n        //     elt.classList.remove('errorflash');\n        // }\n    }\n\n    notify(text) { this.notification_text = text; }\n\n    // If the base already has a subscript, and is_superscript is true, the superscript\n    // is placed into the existing base.  Otherwise, a new subscript/superscript node\n    // is created.  A similar rule applies if is_superscript is false.\n    _build_subscript_superscript(base_expr, child_expr, is_superscript) {\n        // Check to see if we can slot the child into an empty sub/superscript \"slot\".\n        if(base_expr.expr_type() === 'subscriptsuperscript' &&\n           ((base_expr.subscript_expr === null && !is_superscript) ||\n            (base_expr.superscript_expr === null && is_superscript))) {\n            // There's \"room\" for it in this expr.\n            return new SubscriptSuperscriptExpr(\n                base_expr.base_expr,\n                (is_superscript ? base_expr.subscript_expr : child_expr),\n                (is_superscript ? child_expr : base_expr.superscript_expr));\n        }\n        else {\n            // Create a new expr instead.  The base will be parenthesized if\n            // it's a low-precedence infix expression.\n            base_expr = DelimiterExpr.autoparenthesize(base_expr);\n\n            // This will automatically parenthesize fractions like x/y -> (x/y)^2.\n            // This line can be removed if this becomes undesired behavior.\n            base_expr = DelimiterExpr.autoparenthesize_frac(base_expr);\n\n            return new SubscriptSuperscriptExpr(\n                base_expr,\n                (is_superscript ? null : child_expr),\n                (is_superscript ? child_expr : null));\n        }\n    }\n\n    // Second-to-top stack item becomes the base, while the stack top becomes the\n    // subscript or superscript depending on 'is_superscript'.\n    make_subscript_superscript(stack, is_superscript) {\n        const [new_stack, base_expr, child_expr] = stack.pop_exprs(2);\n        const new_expr = this._build_subscript_superscript(base_expr, child_expr, is_superscript);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_subscript(stack) { return this.make_subscript_superscript(stack, false); }\n    do_superscript(stack) { return this.make_subscript_superscript(stack, true); }\n\n    // Add a \\prime to the stack top; this is almost like do_superscript with \\prime\n    // but needs some special handling to coalesce multiple \\prime into a single superscript.\n    do_prime(stack) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        const new_prime_expr = new CommandExpr('prime', []);\n\n        // Check whether the base expr is already of the form x^{\\prime}, x^{\\prime\\prime}, etc.\n        // If so, add an extra \\prime into the superscript.\n        if(base_expr.expr_type() === 'subscriptsuperscript' && base_expr.superscript_expr) {\n            const s = base_expr.superscript_expr;\n            const is_prime_command = expr =>\n                  expr.expr_type() === 'command' &&\n                  expr.operand_count() === 0 && expr.command_name === 'prime';\n            let new_superscript_expr;\n            if(is_prime_command(s))\n                new_superscript_expr = new SequenceExpr([s, new_prime_expr]);\n            else if(s.expr_type() === 'sequence' && s.exprs.every(is_prime_command))\n                new_superscript_expr = new SequenceExpr(s.exprs.concat([new_prime_expr]));\n            else\n                new_superscript_expr = null;\n            if(new_superscript_expr) {\n                const new_expr = new SubscriptSuperscriptExpr(\n                    base_expr.base_expr, base_expr.subscript_expr, new_superscript_expr);\n                return new_stack.push_expr(new_expr);\n            }\n        }\n\n        // Otherwise, adding a prime works just like adding a \\prime superscript.\n        const new_expr = this._build_subscript_superscript(base_expr, new_prime_expr, true);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_mode(stack, new_mode) { this.switch_to_mode(new_mode); }\n\n    do_undo() { this.perform_undo_or_redo = 'undo'; }\n    do_redo() { this.perform_undo_or_redo = 'redo'; }\n\n    do_prefix_argument() {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        this.preserve_prefix_argument = true;\n        let new_prefix_argument = null;\n        if(/^[0-9]$/.test(key)) {\n            const value = parseInt(key);\n            if(this.prefix_argument !== null && this.prefix_argument > 0) {\n                // Multi-digit prefix argument\n                new_prefix_argument = 10*this.prefix_argument + value;\n            }\n            else new_prefix_argument = value;\n        }\n        else if(key === '*')\n            new_prefix_argument = -1;\n        this.prefix_argument = new_prefix_argument;\n    }\n\n    // Convenience function for interpreting the prefix_argument in commands that support it.\n    _get_prefix_argument(default_value, all_value) {\n        if(this.prefix_argument === null)\n            return default_value;\n        else if(this.prefix_argument < 0)\n            return all_value;\n        else\n            return this.prefix_argument;\n    }\n\n    // A nonzero prefix argument is required.\n    // star_ok means that a prefix argument of * is acceptable (defaults to false).\n    _require_prefix_argument(star_ok) {\n        if(this.prefix_argument === null ||\n\t   (star_ok && this.prefix_argument === 0) ||\n\t   (!star_ok && this.prefix_argument <= 0))\n            throw new Error('prefix_argument_required');\n        else\n            return this.prefix_argument;\n    }\n\n    // Duplicate the top N stack items (default=1).\n    do_dup(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.map(item => item.clone());  // keep item serial_numbers unique\n        return new_stack.push_all(items.concat(new_items));\n    }\n\n    // Drop the top N stack items (default=1).\n    do_pop(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack;\n    }\n\n    // Drop the Nth stack item (default=2, i.e.: a b -> b)\n    do_nip(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.slice(1));\n    }\n\n    // Reverse top N stack items (default=2)\n    do_swap(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        items.reverse();\n        return new_stack.push_all(items);\n    }\n\n    // Copy stack top above the current Nth stack item.\n    // Default argument of 2 is: a b -> b a b\n    // Argument of 1 acts as \"dup\".\n    do_tuck(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const last_item = items[items.length-1];\n        return new_stack.push_all([last_item.clone()].concat(items));\n    }\n\n    // Pick the Nth item from the stack and copy it to the stack top.\n    // Default argument of 2 is: a b -> a b a\n    do_over(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.concat([items[0].clone()]));\n    }\n\n    // Rotate N top stack items (default=3: a b c -> b c a)\n    do_rot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(1).concat([items[0]]);\n        return new_stack.push_all(new_items);\n    }\n\n    // Rotate N top stack items backwards (default=3: a b c -> c a b)\n    do_unrot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(-1).concat(items.slice(0, -1));\n        return new_stack.push_all(new_items);\n    }\n\n    do_change_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        this.new_document = this.app_state.document.move_selection_by(amount);\n        // this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_shift_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        const new_document = this.app_state.document.shift_selection_by(amount);\n        if(new_document)\n            this.new_document = new_document;\n        else\n            this.error_flash_document();\n    }\n\n    do_save_file(stack) {\n        const file_manager_state = this.app_component.state.file_manager_state;\n        const filename = file_manager_state.current_filename;\n        if(!filename)\n            return this.do_save_file_as(stack);\n        this.app_component.state.document_storage.save_state(\n            this.app_state, filename,\n            () => {\n                this.notify('Saved: ' + filename);\n                this.settings.last_opened_filename = filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving:' + filename)\n        );\n        this.file_saved = true;\n    }\n\n    // TODO: factor with do_save_file\n    do_save_file_as(stack) {\n        let new_filename = window.prompt('Enter the filename to save as', this.settings.current_filename);\n        if(!new_filename)\n            return;\n        let document_storage = this.app_component.state.document_storage;\n        new_filename = document_storage.sanitize_filename(new_filename);\n        document_storage.save_state(\n            this.app_state, new_filename,\n            () => {\n                this.notify('Saved as: ' + new_filename);\n                let file_manager_state = this.app_component.state.file_manager_state;\n                file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving: ' + new_filename)\n        );\n        this.file_saved = true;\n    }\n\n    do_load_selected_file(stack) {\n        const selected_filename = this.app_component.state.file_manager_state.selected_filename;\n        if(!selected_filename)\n            return this.error_flash_document();\n        if(this.app_state.is_dirty) {\n            if(window.confirm(\"The current document has been modified.  Save it now?\")) {\n                // Abort actually loading the new file; otherwise a\n                // race condition between save and load is created due\n                // to document_storage calls being asynchronous.  This\n                // could be worked around by chaining the load after\n                // the save but this is the only place it's a problem.\n                return this.do_save_file(stack);\n            }\n        }\n        this.app_component.start_loading_filename(selected_filename);\n    }\n\n    do_start_new_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        let new_filename = file_manager_state.generate_unused_filename(file_manager_state.current_filename || 'untitled');\n        new_filename = window.prompt('Enter a filename for the new document', new_filename);\n        if(!new_filename) return;\n        new_filename = document_storage.sanitize_filename(new_filename || '');\n        if(!new_filename) {\n            alert('Invalid filename (must only contain letters, numbers and underscores)');\n            return;\n        }\n\n        // Save the current document if needed first.\n        if(file_manager_state.current_filename) {\n            // NOTE: don't put up the notification flash here, unlike with an explicit save_document.\n            document_storage.save_state(this.app_state, file_manager_state.current_filename);\n        }\n\n        // This basically works like loading from a blank file.\n        let new_state = new AppState();\n\n        // // Start the document with a default header showing the filename.\n        // const heading_item = TextItem.from_string(new_filename.replaceAll('_', ' '));\n        // heading_item.is_heading = true;\n        // this.new_document = new_state.document.insert_item(heading_item);\n        this.new_document = new_state.document;\n\n        file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n        this.settings.last_opened_filename = new_filename;\n        this.settings.save();\n        this.perform_undo_or_redo = 'clear';\n        this.notify('Started new file: ' + new_filename);\n        this.files_changed = true;\n        this.file_saved = true;\n        this.do_toggle_popup(new_state.stack, 'files');  // close file manager\n        return new_state.stack;\n    }\n\n    do_select_adjacent_file(stack, offset_string) {\n        const offset = parseInt(offset_string);\n        let file_manager_state = this.app_component.state.file_manager_state;\n        const new_filename = file_manager_state.find_adjacent_filename(file_manager_state.selected_filename, offset);\n        if(new_filename) {\n            file_manager_state.selected_filename = new_filename;\n            this.files_changed = true;\n        }\n    }\n\n    do_delete_selected_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        const filename = file_manager_state.selected_filename;\n        if(!filename) return this.error_flash_document();\n        if(!window.confirm(\"Really delete \\\"\" + filename + \"\\\"?\")) return;\n        document_storage.delete_state(\n            filename,\n            () => {\n                this.notify('Deleted: ' + filename);\n                const new_filename = file_manager_state.find_adjacent_filename(filename, 1);\n                // TODO: might need this.files_changed = true\n                file_manager_state.selected_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error deleting: ' + filename)\n        );\n    }\n\n    // If 'preserve' is set, items are kept on the stack after copying them\n    // into the document.  Otherwise, the items are removed from the stack.\n    do_pop_to_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        let new_document = this.app_state.document;\n        for(let n = 0; n < items.length; n++)\n            new_document = new_document.insert_item(items[n].clone());\n        this.new_document = new_document;\n        return preserve ? new_stack.push_all(items) : new_stack;\n    }\n\n    do_extract_from_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, -1);\n        if(arg <= 0) return stack;\n        let new_document = this.app_state.document;\n        // Make sure there are enough items above the current document selection to extract.\n        if(new_document.selection_index < arg)\n            return this.error_flash_document();\n        let new_items = [];\n        for(let n = 0; n < arg; n++) {\n            const item = new_document.selected_item();\n            new_document = new_document.delete_selection();\n            new_items.push(item.clone());\n        }\n        new_items.reverse();\n        if(!preserve)\n            this.new_document = new_document;\n        return stack.push_all(new_items);\n    }\n\n    do_insert_separator(stack) {\n\t// See TextItem.is_empty() comment\n\treturn stack.push(TextItem.empty_item());\n    }\n\n    do_insert(stack, text) {\n        // TODO: handle this better\n        text = text || '';  // handle 'insert nothing' case\n        if(text.startsWith(\"\\\\\"))\n            return stack.push_expr(new CommandExpr(text.slice(1)));\n        else\n            return stack.push_expr(new TextExpr(text));\n    }\n\n    do_self_insert(stack) {\n        return this.do_insert(stack, this.last_keypress);\n    }\n\n    do_insert_placeholder(stack) {\n        return stack.push_expr(new PlaceholderExpr());\n    }\n\n    // Used for \\mathscr / \\mathcal, which only have uppercase glyphs.\n    // case_type: 'uppercase', 'lowercase'\n    // Stack top should be an ExprItem with a simple TextExpr.\n    do_to_case(stack, case_type) {\n        const convert_fn = string => {\n            switch(case_type) {\n            case 'uppercase': return string.toUpperCase();\n            case 'lowercase': return string.toLowerCase();\n            default: return string;\n            }\n        };\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'text')\n            new_expr = new TextExpr(convert_fn(expr.text));\n        else\n            new_expr = expr;\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Pop arity_string items (default 1) and turn them into an Command expr.\n    do_operator(stack, opname, arity_string = '1') {\n        const arity = parseInt(arity_string);\n        const [new_stack, ...popped_exprs] = stack.pop_exprs(arity);\n        const result_expr = new CommandExpr(opname, popped_exprs)\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Like do_operator, but if the stack item is already wrapped in a \\boldsymbol or \\pmb,\n    // unwrap it and re-wrap the font face command inside \\pmb.\n    // e.g. \\boldsymbol{A} -> \\pmb{mathtt{A}}\n    // See also do_make_roman(), which is a special case because \\bold{} creates Roman\n    // bold text without needing \\pmb.\n    do_font_operator(stack, facename) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n           (expr.command_name === 'boldsymbol' || expr.command_name === 'pmb'))\n            new_expr = new CommandExpr(\n                'pmb', [new CommandExpr(facename, [expr.operand_exprs[0]])]);\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                expr.command_name === facename) {\n            // Special case: don't wrap in the same typeface twice consecutively\n            // (don't create \\mathtt{\\mathtt{A}}).  This check should probably be\n            // generalized to strip existing typeface commands but there's not a good\n            // way to do this cleanly yet.\n            new_expr = expr;\n        }\n        else\n            new_expr = new CommandExpr(facename, [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // \\sin{x} etc.  Works similarly to do_operator except the argument is autoparenthesized.\n    // If superscript_text is given, the text is applied as a superscript to the function\n    // itself (not to the argument).\n    // NOTE: if superscript_text starts with '_', it's treated as a subscript instead.\n    do_named_function(stack, funcname, superscript_text) {\n        let [new_stack, arg_expr] = stack.pop_exprs(1);\n        const orig_funcname = funcname;\n        if(superscript_text !== undefined) {\n            // \\sin^2{arg} etc.  This is a little awkward because the \"head\" of the command (\\sin^2) is\n            // no longer a simple LaTeX command like other CommandExprs.  Fortunately, things work out fine\n            // treating it as such by just textually concatenating the superscript (putting in explicit braces\n            // if necessary).  For example: \"sin^2\" or \"sin^{-1}\".\n            let sup_or_sub = '^';\n            if(superscript_text.startsWith('_')) {\n                sup_or_sub = '_';\n                superscript_text = superscript_text.slice(1);\n            }\n            if(superscript_text.length > 1)\n                superscript_text = ['{', superscript_text, '}'].join('');\n            funcname = [funcname, sup_or_sub, superscript_text].join('');\n        }\n        arg_expr = DelimiterExpr.autoparenthesize(arg_expr);\n\n        // \\sech and \\csch are are missing in LaTeX for some reason so they need to be special cased here.\n        let expr;\n        if(orig_funcname === 'sech' || orig_funcname === 'csch')\n            expr = new CommandExpr('operatorname', [new TextExpr(funcname), arg_expr]);\n        else\n            expr = new CommandExpr(funcname, [arg_expr]);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // opname == 'argmax': x -> \\underset{x}{\\argmax}\n    // If make_operatorname is true, opname is not a built-in LaTeX operator\n    // but is instead wrapped in an \\operatorname{} to simulate it.\n    do_underset_operator(stack, opname, make_operatorname) {\n        const [new_stack, underset_expr] = stack.pop_exprs(1);\n        let base_expr;\n        if(make_operatorname)\n            base_expr = new CommandExpr('operatorname', [new TextExpr(opname)]);\n        else\n            base_expr = new CommandExpr(opname);\n        const new_expr = new CommandExpr('underset', [underset_expr, base_expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Same as do_operator, except if the object the hat is being added to is a literal 'i' or 'j',\n    // or bolded i/j, it's first converted into a \\imath or \\jmath to remove the dot.\n    do_apply_hat(stack, hat_op) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'text' &&\n           (expr.text === 'i' || expr.text === 'j'))\n            expr = new CommandExpr(expr.text === 'i' ? 'imath' : 'jmath');\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                (expr.command_name === 'boldsymbol' || expr.command_name === 'mathbf')) {\n            const inner_expr = expr.operand_exprs[0];\n            if(inner_expr.expr_type() === 'text' &&\n               (inner_expr.text === 'i' || inner_expr.text === 'j'))\n                expr = new CommandExpr(\n                    expr.command_name,\n                    [new CommandExpr(inner_expr.text === 'i' ? 'imath' : 'jmath')]);\n        }\n        const result_expr = new CommandExpr(hat_op, [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Wrap expr in \\htmlClass{...}\n    // If it's already wrapped in the given class, unwrap it instead.\n    // If class_name_2 is also provided, this cycles between:\n    //    nothing -> class_name -> class_name_2 -> nothing\n    do_html_class(stack, class_name, class_name_2) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        let new_class_name = null;\n        if(expr.expr_type() === 'command' &&\n           expr.command_name === 'htmlClass' &&\n           expr.operand_count() === 2 &&\n           expr.operand_exprs[0].expr_type() === 'text') {\n            // It's already wrapped in \\htmlClass\n            if(expr.operand_exprs[0].text === class_name)\n                new_class_name = class_name_2;  // might be null\n            expr = expr.operand_exprs[1];  // Strip existing \\htmlClass\n        }\n        else\n            new_class_name = class_name;\n        if(new_class_name)\n            expr = new CommandExpr('htmlClass', [new TextExpr(new_class_name), expr]);\n        return new_stack.push_expr(expr);\n    }\n\n    // For ExprItems, this just wraps the expression in \\boldsymbol (if it's not already wrapped).\n    // For TextItems, the individual components of the text are bolded.\n    do_make_bold(stack) {\n        const [new_stack, item] = stack.pop(1);\n        return new_stack.push(item.as_bold());\n    }\n\n    // This is equivalent to 'operator mathrm' except that if the target is already wrapped in a \\boldsymbol{}\n    // (presumably created by do_make_bold()), this converts it into a \\bold{} which yields a bold Roman glyph.\n    do_make_roman(stack) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.command_name === 'boldsymbol' && expr.operand_count() === 1)\n            new_expr = new CommandExpr('bold', expr.operand_exprs);\n        else if(expr.expr_type() === 'command' && expr.command_name === 'mathrm')\n            new_expr = expr;\n        else\n            new_expr = new CommandExpr('mathrm', [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_custom_delimiter(stack, delimiter_type) {\n        this.switch_to_mode('custom_delimiters');\n        if(!delimiter_type) {\n            // Start new sequence\n            this.custom_delimiters = {};\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.left) {\n            // First delimiter (left side)\n            this.custom_delimiters.left = delimiter_type;\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.right) {\n            // Second delimiter (right side)\n            this.custom_delimiters.right = delimiter_type;\n            if(this.prefix_argument === null || this.prefix_argument <= 1)\n                return this._finish_custom_delimiters(stack);\n            else {\n                // Prefix argument of 2 or more has been entered; wait for 3rd delimiter.\n                this.preserve_prefix_argument = true;\n                return;\n            }\n        }\n        // Third delimiter (middle)\n        this.custom_delimiters.middle = delimiter_type;\n        return this._finish_custom_delimiters(stack);\n    }\n\n    _finish_custom_delimiters(stack) {\n        this.switch_to_mode('base');\n        const d = this.custom_delimiters;\n        let arity = this.prefix_argument || 1;\n        if(arity < 1) arity = 1;\n        const [new_stack, ...exprs] = stack.pop_exprs(arity);\n        const new_expr = new DelimiterExpr(d.left, d.right, d.middle, exprs);\n        this.custom_delimiters = {};\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_toggle_fixed_size_delimiters(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tif(expr.expr_type() === 'delimiter')\n\t    return new_stack.push_expr(expr.as_fixed_size(!expr.fixed_size));\n\telse\n\t    stack.type_error();\n    }\n\n    // opname can be either a \\latex_command or a regular string like '+'\n    // The cases of Expr+Expr and Expr+Text (or Text+Text) are handled separately.\n    do_infix(stack, opname) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr case.  Result is an InfixExpr item.\n            let operator_expr;\n            if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n                operator_expr = new CommandExpr(opname.slice(1));\n            else\n                operator_expr = new TextExpr(opname);\n            return new_stack.push_expr(new InfixExpr(operator_expr, left_item.expr, right_item.expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const new_item = TextItem.concatenate_items(left_item, right_item, opname);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but joins two expressions with an English phrase\n    // with Roman font and extra spacing (\\quad).\n    do_conjunction(stack, phrase) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr\n            const operator_expr = new SequenceExpr([\n                new CommandExpr('quad'),\n                new CommandExpr('text', [new TextExpr(phrase.replaceAll('_', ' '))]),\n                new CommandExpr('quad')]);\n            return new_stack.push_expr(new InfixExpr(operator_expr, left_item.expr, right_item.expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const conjunction_item = TextItem.from_string(' ' + phrase + ' ');\n            const new_item = TextItem.concatenate_items(\n                left_item, TextItem.concatenate_items(conjunction_item, right_item));\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but only takes 1 item from the stack and makes a PrefixExpr.\n    do_prefix(stack, opname) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        let operator_expr;\n        if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n            operator_expr = new CommandExpr(opname.slice(1));\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new PrefixExpr(base_expr, operator_expr));\n    }\n\n    do_split_infix(stack) {\n        const [new_stack, infix_expr] = stack.pop_exprs(1);\n        if(infix_expr.expr_type() !== 'infix') {\n            this.error_flash_stack();\n            return;\n        }\n        const split_mode = infix_expr.split;\n        let new_split_mode = null;\n        if(split_mode === 'after') new_split_mode = 'before';\n        else if(split_mode === 'before') new_split_mode = null;\n        else new_split_mode = 'after';\n        const new_infix_expr = infix_expr.with_split_mode(new_split_mode);\n        return new_stack.push_expr(new_infix_expr);\n    }\n\n    // Swap left and right sides of an \"infix\" expression, which can be an\n    // actual InfixExpr or else a DelimiterExpr that has 2 inner expressions,\n    // e.g. <x | y> or \\left. x \\middle/ y \\right.\n    do_swap_infix(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tlet new_expr = null;\n\tif(expr.expr_type() === 'infix')\n\t    new_expr = new InfixExpr(\n\t\texpr.operator_expr, expr.right_expr, expr.left_expr, expr.split);\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    new_expr = new DelimiterExpr(\n\t\texpr.left_type, expr.right_type, expr.middle_type,\n\t\t[expr.inner_exprs[1], expr.inner_exprs[0]],\n\t\texpr.fixed_size);\n\tif(new_expr)\n\t    return new_stack.push_expr(new_expr);\n\telse\n\t    return this.error_flash_stack();\n    }\n\n    // Stack one expr above (or below) another via \\overset or \\underset.\n    // (overset_op can be 'overset' or 'underset').\n    // If the base expr is an InfixExpr, the other one is stacked above the infix operator;\n    // otherwise the actual items are stacked.\n    do_overunderset(stack, overset_op) {\n        const [new_stack, base_expr, stacked_expr] = stack.pop_exprs(2);\n        let new_expr;\n        if(base_expr.expr_type() === 'infix') {\n            new_expr = new InfixExpr(\n                new CommandExpr(overset_op, [stacked_expr, base_expr.operator_expr]),\n                base_expr.left_expr, base_expr.right_expr);\n        }\n        else\n            new_expr = new CommandExpr(overset_op, [stacked_expr, base_expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_cancel() {}\n\n    do_concat(stack /*, separator_text*/) {\n        let [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            let left_expr = left_item.expr, right_expr = right_item.expr;\n            const new_expr = Expr.combine_pair(left_expr, right_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            const new_item = TextItem.concatenate_items(left_item, right_item /*, separator_text*/);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Substitute the stack top expression into the first available placeholder marker in the\n    // item second from top.  That item can be either an ExprItem or TextItem.\n    do_substitute_placeholder(stack) {\n        const [new_stack, substitution_expr] = stack.pop_exprs(1);\n        const [new_stack_2, item] = new_stack.pop(1);\n        if(item.item_type() === 'expr') {\n            const original_expr = item.expr;\n            const placeholder_expr = original_expr.find_placeholder();\n            if(placeholder_expr) {\n                const new_expr = original_expr.substitute_expr(placeholder_expr, substitution_expr);\n                return new_stack_2.push_expr(new_expr);\n            }\n        }\n        else if(item.item_type() === 'text') {\n            const new_text_item = item.try_substitute_placeholder(substitution_expr);\n            if(new_text_item)\n                return new_stack_2.push(new_text_item);\n        }\n        return stack.type_error();\n    }\n\n    // Extract either the left or right side of an InfixExpr\n    // (or a DelimiterExpr with 2 inner expressions; cf. do_swap_infix).\n    do_extract_infix_side(stack, which_side) {\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, expr] = stack.pop_exprs(1);\n\tlet extracted_expr = null;\n\tif(expr.expr_type() === 'infix')\n\t    extracted_expr = (which_side === 'right') ? expr.right_expr : expr.left_expr;\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    extracted_expr = (which_side === 'right') ? expr.inner_exprs[1] : expr.inner_exprs[0];\n\tif(extracted_expr) {\n            // NOTE: 'stack' and not 'new_stack' is used here in order to preserve\n            // the original expression on the stack.\n            return stack.push_expr(extracted_expr);\n\t}\n\telse\n\t    return stack.type_error();\n    }\n\n    do_start_text_entry(stack, text_entry_mode, initial_text) {\n        this.text_entry = initial_text || '';\n        this.text_entry_mode = text_entry_mode;\n        this.switch_to_mode(text_entry_mode);\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    do_cancel_text_entry(stack) {\n        this.perform_undo_or_redo = 'suppress';\n        return this.cancel_text_entry(stack);\n    }\n\n    cancel_text_entry(stack) {\n        this.text_entry = null;\n        this.text_entry_mode = null;\n\tif(this.text_entry_edited_item) {\n\t    const item = this.text_entry_edited_item;\n\t    this.text_entry_edited_item = null;\n\t    return stack.push(item);\n\t}\n\telse\n\t    return stack;\n    }\n\n    do_append_text_entry(stack) {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        if(key.length === 1) {\n            if(this.text_entry_mode === 'latex_entry') {\n                // Disallow characters that are invalid as part of a LaTeX command.\n                // Technically, commands like \\$ should be allowed here, but those are all\n                // accessible by their own keybindings already.  So only alphabetic characters\n                // are allowed in latex entry mode.\n                if(!/^[a-zA-Z]$/.test(key))\n                    return this.error_flash_stack();\n            }\n            this.text_entry = (this.text_entry || '') + key;\n        }\n        return stack;\n    }\n\n    // If new_mode_when_empty is provided, switch to that mode if this\n    // backspace was done while the text field is empty.  This is currently\n    // used to switch back from latex entry mode to normal math entry mode.\n    do_backspace_text_entry(stack, new_mode_when_empty) {\n        let text = this.text_entry || '';\n        if(text.length > 0) {\n            this.text_entry = text.slice(0, -1);\n            this.switch_to_mode(this.mode);\n        }\n        else {\n            // Everything has been deleted; cancel text entry.\n\t    // Note that when cancelling via backspace this way, even if\n\t    // there was a text_entry_edited_item, it's discarded.\n            this.cancel_text_entry(stack);\n            if(new_mode_when_empty) {\n\t\tthis.text_entry = '';\n                this.text_entry_mode = new_mode_when_empty;\n                this.switch_to_mode(new_mode_when_empty);\n            }\n\t    return stack;\n        }\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // textstyle determines what the entered text becomes:\n    //   'math' - ExprItem with plain italic math text\n    //   'roman_math' - ExprItem with \\mathrm{...} text\n    //   'latex' - ExprItem with arbitrary latex command\n    //   'text' - TextItem\n    //   'heading' - TextItem with is_heading flag set\n    do_finish_text_entry(stack, textstyle) {\n        if(this.text_entry === null)\n            return stack;  // shouldn't happen\n        if(this.text_entry.length === 0)\n            return this.cancel_text_entry(stack);\n\n        if(textstyle === 'text' || textstyle === 'heading') {\n            let item = TextItem.from_string_with_placeholders(this.text_entry);\n            if(textstyle === 'heading') item.is_heading = true;\n            this.cancel_text_entry(stack);\n            return stack.push(item);\n        }\n\n        // math or roman_math or latex\n        let new_expr;\n        if(textstyle === 'roman_math') {\n            new_expr = new CommandExpr('mathrm', [\n                new TextExpr(this._latex_escape(this.text_entry))]);\n        }\n        else if(textstyle === 'latex') {\n            // NOTE: do_append_text_entry should only allow alphabetic characters through,\n            // so no real need to do sanitization here any more.\n            \n            // const sanitized = this.text_entry.replaceAll(/[^a-zA-Z]/g, '');\n            // if(sanitized.length === 0) {\n            //     this.text_entry = null;\n            //     this.text_entry_mode = null;\n            //     return stack;\n            // }\n            // new_expr = new CommandExpr(sanitized);\n\n            new_expr = new CommandExpr(this.text_entry);\n        }\n        else\n            new_expr = new TextExpr(this._latex_escape(this.text_entry));\n        this.cancel_text_entry(stack);\n        return stack.push_expr(new_expr);\n    }\n\n    // Start text entry mode using the item on the stack top.\n    // Because the minieditor is so limited, only these cases are allowed:\n    //   - TextItems without anything too \"complicated\" (see TextItem.as_editable_string);\n    //     these will start with the minieditor in text-entry mode.\n    //   - ExprItems that are only a simple CommandExpr with a no-argument LaTeX command;\n    //     in this case the minieditor will start directly in LaTeX-entry mode.\n    //   - ExprItems that represent a simple text string like '123' or 'xyz'.\n    //   - ExprItems that represent \\mathrm{x} where x is a simple string like '123' or 'xyz'\n    //     (this is to allow expressions created via Shift+Enter in the minieditor to be editable).\n    do_edit_item(stack) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() === 'text') {\n\t    const s = item.as_editable_string();\n\t    if(s) {\n\t\tthis.do_start_text_entry(new_stack, 'text_entry', s);\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\telse if(item.item_type() === 'expr') {\n\t    let expr = item.expr;\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 0) {\n\t\t// LaTeX command with no arguments, e.g. \\circledast\n\t\tthis.do_start_text_entry(new_stack, 'latex_entry', expr.command_name);\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t    // Try stripping off a single level of \\mathrm{...} if there is one.\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n\t       expr.command_name === 'mathrm')\n\t\texpr = expr.operand_exprs[0];\n\t    // It's editable only if it's a basic TextExpr that doesn't start with a\n\t    // backslash (so generally, only something that was directly created by\n\t    // the minieditor to begin with).\n\t    if(expr.expr_type() === 'text' && !expr.text.startsWith(\"\\\\\")) {\n\t\tthis.do_start_text_entry(\n\t\t    new_stack,\n\t\t    'math_text_entry',\n\t\t    this._latex_unescape(expr.text));\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\treturn this.error_flash_stack();\n    }\n\n    // TODO: may want to make this a general utility method, but it's only used here so far.\n    _latex_escape(text) {\n        const replacements = {\n            ' ': \"\\\\,\",\n            '_': \"\\\\_\",\n            '^': \"\\\\wedge \",\n            '%': \"\\\\%\",\n            \"'\": \"\\\\rq \",\n            \"`\": \"\\\\lq \",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\sim \",\n            \"\\\\\": \"\\\\backslash \"\n        };\n        return text.replaceAll(/[ _^%'`$&#}{~\\\\]/g, match => replacements[match]);\n    }\n\n    // Inverse of _latex_escape.  This is used by do_edit_item to allow simple TextExprs\n    // to be editable again in the minieditor.\n    _latex_unescape(text) {\n\t// TODO: figure out a better way of handling this so it doesn't repeat\n\t// what's in _latex_escape\n        const replacements = {\n            \"\\\\,\": ' ',\n            \"\\\\_\": '_',\n            \"\\\\wedge \": '^',\n            \"\\\\%\": '%',\n            \"\\\\rq \": \"'\",\n            \"\\\\lq \": \"`\",\n            \"\\\\$\": '$',\n            \"\\\\&\": '&',\n            \"\\\\#\": '#',\n            \"\\\\}\": '}',\n            \"\\\\{\": '{',\n            \"\\\\sim \": '~',\n            \"\\\\backslash \": \"\\\\\"\n        };\n        return text.replaceAll(\n\t    /\\\\,|\\\\_|\\\\wedge |\\\\%|\\\\rq |\\\\lq |\\\\\\$|\\\\&|\\\\#|\\\\\\}|\\\\\\{|\\\\sim |\\\\backslash /g,\n\t    match => replacements[match]);\n    }\n\n    do_toggle_is_heading(stack) {\n        let [new_stack, item] = stack.pop(1);\n        if(item.item_type() === 'expr') {\n            // Implicitly turn ExprItems into TextItems.\n            item = TextItem.from_expr(item.expr);\n        }\n        if(item.item_type() === 'text') {\n\t    // Special case: don't allow empty TextItems to be changed this way.\n\t    // See the comment in TextItem.is_empty().\n\t    if(item.is_empty())\n\t\treturn this.error_flash_stack();\n            item = item.clone();\n            item.is_heading = !item.is_heading;\n            return new_stack.push(item);\n        }\n        else\n            this.error_flash_stack();\n    }\n\n    do_extract_latex_source(stack) {\n        // eslint-disable-next-line no-unused-vars\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tconst latex_source = expr.to_text();\n\tconst code_item = new CodeItem('latex', latex_source);\n\treturn stack.push(code_item);\n    }\n\n    // expr_count is the number of items to pop from the stack to put inside the delimiters.\n    // It defaults to 1, but if it's 2 or more, 'middle' is used to separate each item within\n    // the delimiters.\n    do_delimiters(stack, left, right, middle, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...inner_exprs] = stack.pop_exprs(expr_count);\n        const new_expr = new DelimiterExpr(left, right, middle, inner_exprs);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Wrap stack top in parentheses if it's not already in delimiters.\n    do_parenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Special case: \\left. X \\middle| \\right. style delimiters\n        // are treated as a kind of pseudo-infix expression here.\n        // This is to make things like Pr(x | y) work better when | is a\n        // flex-size delimiter.\n        if(expr.expr_type() === 'delimiter' && expr.left_type === '.' &&\n           expr.right_type === '.' && expr.inner_exprs.length > 1)\n            expr = new DelimiterExpr('(', ')', expr.middle_type, expr.inner_exprs);\n        else if(expr.expr_type() !== 'delimiter')\n            expr = DelimiterExpr.parenthesize(expr);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // If expr_count_string is provided, exactly that many expressions from the stack\n    // are autoparenthesized.  If any of them is not actually an ExprItem, nothing is done.\n    do_autoparenthesize(stack, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...items] = stack.pop(expr_count);\n        if(items.every(item => item.item_type() === 'expr'))\n            return new_stack.push_all_exprs(\n                items.map(item => DelimiterExpr.autoparenthesize(item.expr)));\n        else\n            return stack;\n    }\n\n    // Combine command name and arguments from the stack into a CommandExpr.\n    // \\frac x y -> \\frac{x}{y}\n    do_apply_operator(stack, arg_count_string) {\n        const arg_count = parseInt(arg_count_string);\n        const [new_stack, command_expr, ...operand_exprs] = stack.pop_exprs(arg_count+1);\n        if(command_expr.expr_type() === 'command' && command_expr.operand_count() === 0)\n            return new_stack.push_expr(\n                new CommandExpr(command_expr.command_name, operand_exprs));\n        else\n            this.error_flash_stack();\n    }\n\n    // Take (left, right, operator) from the stack and create an InfixExpr.\n    // Special case: if 'operator' is \\mathrm{...}, it's surrounded with \\quad\n    // spacers as in do_conjunction().\n    do_apply_infix(stack) {\n        let [new_stack, left_expr, right_expr, operator_expr] = stack.pop_exprs(3);\n        if(operator_expr.expr_type() === 'command' &&\n           operator_expr.command_name === 'mathrm' &&\n           operator_expr.operand_count() === 1)\n            operator_expr = new SequenceExpr([\n                new CommandExpr('quad'), operator_expr, new CommandExpr('quad')]);\n        const new_expr = new InfixExpr(operator_expr, left_expr, right_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // NOTE: if 'help_location' is given, jump to the given anchor in the help text.\n    do_toggle_popup(stack, mode_string, help_location) {\n        // Hack: Save help panel scroll position so we can restore it next\n        // time the help is displayed.  This isn't very good because browser\n        // window/font resizings will throw it off.  Needs revisiting.\n        // Maybe the help should be its own iframe.\n        if(this.settings.popup_mode === 'help') {\n            const elt = document.getElementById('popup_panel');\n            if(elt && elt.scrollTop)\n                this.settings.help_scroll_top = elt.scrollTop;\n        }\n        this.settings.popup_mode =\n            (this.settings.popup_mode === mode_string) ? null : mode_string;\n        if(this.settings.popup_mode === 'help' && help_location)\n            this.settings.help_scroll_top = help_location;\n        this.settings.save();\n        this.app_component.apply_layout_to_dom();\n    }\n\n    // Set various configuration options.\n    do_config(stack, config_option, value) {\n        let settings = this.settings;\n        let layout = settings.layout;\n        let full_refresh_needed = false;  // set to true if everything needs to be re-rendered afterwards\n        let scratch;\n        switch(config_option) {\n        case 'zoom_factor':\n            scratch = this._get_prefix_argument(1, -1);\n            if(scratch < 0)\n                layout.zoom_factor = 0;\n            else if(value === 'decrease')\n                layout.zoom_factor -= scratch;\n            else\n                layout.zoom_factor += scratch;\n\t    this.notify(\"Zoom level: \" + (layout.zoom_factor > 0 ? \"+\" : \"\") + layout.zoom_factor);\n            break;\n        case 'math_align':\n            if(value === 'toggle_document')\n                layout.document_rightalign_math = !layout.document_rightalign_math;\n            else if(value === 'toggle_stack')\n                layout.stack_rightalign_math = !layout.stack_rightalign_math;\n            break;\n        case 'toggle_inline_math':\n            layout.inline_math = !layout.inline_math;\n            full_refresh_needed = true;\n            break;\n\tcase 'toggle_mode_indicator':\n\t    settings.show_mode_indicator = !settings.show_mode_indicator;\n\t    this.notify(\"Mode indicator \" + (settings.show_mode_indicator ? \"enabled\" : \"disabled\"));\n\t    break;\n        case 'stack_side':\n            layout.stack_side = value;\n            break;\n        case 'stack_split':\n            // prefix argument:\n            //   none:    50% (undocumented)\n            //   0..9:    0% to 90%\n            //   *:       100%\n            //   11..99:  11% to 99% (undocumented)\n            scratch = this._get_prefix_argument(5, 10);\n            if(scratch <= 10) scratch *= 10;\n            if(scratch > 100) scratch = 100;\n            layout.stack_split = scratch;\n            break;\n        case 'theme':\n            scratch = this._get_prefix_argument(1, 1);\n            if(scratch < 1 || scratch > 5) scratch = 1;\n            settings.selected_theme = ['default', 'dawn', 'dusk', 'dark', 'minimal'][scratch-1];\n            break;\n        case 'reset_layout':\n            settings.layout = settings.default_layout();\n            settings.selected_theme = 'default';\n            settings.show_mode_indicator = true;\n            full_refresh_needed = true;\n            break;\n        default:\n            break;\n        }\n        settings.save();\n        this.perform_undo_or_redo = 'suppress';\n        this.app_component.apply_layout_to_dom();\n        this.clear_all_flashes();\n        if(full_refresh_needed) {\n            // All displayed ItemComponents need to be re-rendered.\n            this.new_document = this.app_state.document.clone_all_items();\n            return stack.clone_all_items();\n        }\n    }\n\n    do_fullscreen(stack, on_or_off) {\n        if(on_or_off === 'off')\n            document.exitFullscreen();\n        else\n            document.getElementsByTagName('html')[0].requestFullscreen();\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // item1, item2, ... => [item1, item2, ...]\n    // column_count is optional; if omitted, the prefix argument is used.\n    do_build_matrix_row(stack, matrix_type, column_count) {\n        const expr_count = column_count ?\n\t      parseInt(column_count) :\n\t      this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const matrix_expr = new ArrayExpr(\n            (matrix_type || 'bmatrix'),\n            1, expr_count, [exprs]);\n        return new_stack.push_expr(matrix_expr);\n    }\n\n    // Stack two ArrayExprs on top of each other.\n    // The type of the array on the stack-top takes precedence if there's a conflict.\n    // The two arrays/matrices have to have the same number of columns.\n    do_stack_arrays(stack) {\n        const [new_stack, m1, m2] = stack.pop_arrays(2);\n        const new_array = ArrayExpr.stack_arrays(m1, m2);\n        if(new_array)\n            return new_stack.push_expr(new_array);\n        else\n            return new_stack.type_error();\n    }\n\n    // Split an ArrayExpr into its component rows and put them on the stack.\n    do_split_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        return new_stack.push_all_exprs(array_expr.split_rows());\n    }\n\n    // Take apart an ArrayExpr and put all its elements on the stack (in row-major order).\n    do_dissolve_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        let dissolved_exprs = [].concat(...array_expr.element_exprs);\n        return new_stack.push_all_exprs(dissolved_exprs);\n    }\n\n    do_insert_matrix_ellipses(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_ellipses());\n    }\n\n    do_transpose_matrix(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.transposed());\n    }\n\n    // Change a matrix bracket type, e.g. to 'pmatrix'.\n    do_change_matrix_type(stack, new_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_array_type(new_type));\n    }\n\n    // is_row_or_column: 'row', 'column'\n    // separator_type: 'solid' or 'dashed'\n    do_array_separator(stack, is_row_or_column, separator_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        const is_column = is_row_or_column === 'column';\n        // NOTE: prefix argument of * indicates the final row or column of the matrix\n        const size = is_column ? matrix_expr.column_count : matrix_expr.row_count;\n        const index = this._get_prefix_argument(1, null);\n        if(index !== null && (index < 1 || index > size-1))\n            return this.error_flash_stack();\n        else\n            return new_stack.push_expr(\n                matrix_expr.with_separator(\n                    is_column,\n                    index === null ? null : index-1,\n                    separator_type, true));\n    }\n\n    do_build_align(stack, align_type) {\n        // NOTE: if align_type = 'cases' or 'rcases', align on ':' infix if there is one, and then remove the infix\n        const expr_count = this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let split_mode;\n        switch(align_type) {\n        case 'gathered': case 'gather': split_mode = 'none'; break;\n        case 'cases': case 'rcases': split_mode = 'colon'; break;\n        case 'cases_if': split_mode = 'colon_if'; align_type = 'cases'; break;\n        case 'rcases_if': split_mode = 'colon_if'; align_type = 'rcases'; break;\n        default: split_mode = 'infix'; break;\n        }\n        const element_exprs = ArrayExpr.split_elements(exprs, split_mode)\n        const array_expr = new ArrayExpr(\n            align_type, element_exprs.length, element_exprs[0].length, element_exprs);\n        return new_stack.push_expr(array_expr);\n    }\n\n    // item1, item2, ..., N => \"item1, item2, ...\"\n    // Concatenate N items from the stack with separator_text between each one.\n    // If separator_text is the string 'nothing', items are simply concatenated together.\n    // 'final_separator_text' is used as the next to last item if provided.\n    do_build_list(stack, separator_text, final_separator_text) {\n\tthis._require_prefix_argument(true);\n        const expr_count = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let expr = exprs[0];\n        for(let i = 1; i < expr_count; i++) {\n            const s = (final_separator_text && i === expr_count-1) ? final_separator_text : separator_text;\n\t    if(s !== 'nothing') {\n\t\tif(s.startsWith(\"\\\\\"))  // TODO: clean up this check\n\t\t    expr = Expr.combine_pair(expr, new CommandExpr(s.slice(1)));\n\t\telse\n\t\t    expr = Expr.combine_pair(expr, new TextExpr(s));\n\t    }\n            expr = Expr.combine_pair(expr, exprs[i]);\n        }\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1,...,x_n] from the stack and build a nested InfixExpr with\n    // the given text between each term as an infix operator.\n    // 'final_separator_text' is used as the next to last item if provided.\n    do_build_infix_list(stack, infix_text, final_separator_text) {\n\tthis._require_prefix_argument(true);\n        const expr_count = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let expr = exprs[expr_count-1];\n\t// TODO: handle these repetitive s.startsWith(\"\\\\\") checks more cleanly\n        const infix_operator_expr = infix_text.startsWith(\"\\\\\") ?\n\t      new CommandExpr(infix_text.slice(1)) : new TextExpr(infix_text);\n        if(final_separator_text && expr_count > 1)\n\t    expr = new InfixExpr(infix_operator_expr,\n\t\t\t\t (final_separator_text.startsWith(\"\\\\\") ?\n\t\t\t\t  new CommandExpr(final_separator_text.slice(1)) :\n\t\t\t\t  new TextExpr(final_separator_text)), expr);\n        for(let i = expr_count-2; i >= 0; i--)\n\t    expr = new InfixExpr(infix_operator_expr, exprs[i], expr);\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1, ..., x_n] from the stack and build a \\substack{...} command.\n    // This \"cheats\" by converting the stacked items to LaTeX and concatenating\n    // with \\\\ so any structure in the stacked items will be lost, same as\n    // do_build_list(), etc.\n    do_build_substack(stack) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const content = exprs.map(expr => expr.to_latex()).join(\"\\\\\\\\\");\n        const new_expr = new CommandExpr('substack', [new TextExpr(content)]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_apply_tag(stack) {\n        let [new_stack, tagged_item, tag_item] = stack.pop(2);\n        if(tagged_item.item_type() !== 'expr')\n            return stack.type_error();\n        let tag_expr;\n        // if(tag_item.item_type() === 'text')\n        //     tag_expr = new CommandExpr('text', [new TextExpr(tag_item.source_text.trim())]);\n        /*else*/ if(tag_item.item_type() === 'expr')\n            tag_expr = tag_item.expr;\n        else\n            return stack.type_error();\n        return new_stack.push(new ExprItem(tagged_item.expr, tag_expr));\n    }\n\n    // Copy stack top to an internal clipboard slot.\n    // A prefix argument may be given to access other slots but this is currently undocumented\n    // because prefix arguments with stack commands highlight items on the stack which is bad UI.\n    do_copy_to_clipboard(stack) {\n        const [new_stack, item] = stack.pop(1);\n        const slot = this._get_prefix_argument(1, '*');\n        this.app_component.state.clipboard_items[slot] = item;\n        if(slot === 1)\n            this.notify(\"Copied to clipboard\");\n        else\n            this.notify(\"Copied to clipboard slot \" + slot);\n        this.perform_undo_or_redo = 'suppress';\n        return new_stack.push(item);\n    }\n\n    do_paste_from_clipboard(stack) {\n        const slot = this._get_prefix_argument(1, '*');\n        const item = this.app_component.state.clipboard_items[slot];\n        if(item)\n            return stack.push(item.clone());\n        else\n            this.error_flash_stack();\n    }\n\n    // screen_percentage=0 means try to scroll so that the top of the selection is flush with the top of the document panel.\n    // screen_percentage=100 tries to make the bottom of the selection flush with the bottom of the panel.\n    // Anything in between is a linear interpolation between the two.\n    do_recenter_document(stack, screen_percentage_string) {\n        const screen_percentage = parseInt(screen_percentage_string);\n        this.perform_undo_or_redo = 'suppress';\n        \n        // TODO: Accessing the DOM elements directly like this is a hack but there's not an easy\n        // way to get it properly from React here.  May want to restructure things to make this cleaner.\n        let container = document.getElementById('document_container');\n        if(!container) return;\n        const selected_elts = container.getElementsByClassName('selected')\n        if(selected_elts.length === 0) return;\n        const selected_elt = selected_elts[0];\n        const top_scrolltop = selected_elt.offsetTop;\n        const bottom_scrolltop = selected_elt.offsetTop + selected_elt.offsetHeight - container.clientHeight;\n        const ratio = screen_percentage/100;\n        const new_scrolltop = Math.round(top_scrolltop*(1-ratio) + bottom_scrolltop*ratio);\n        container.scrollTop = new_scrolltop;\n    }\n\n    do_scroll(stack, panel_name, direction_string, percentage_string) {\n        let panel_elt = document.getElementById(panel_name);\n        if(!panel_elt) return;\n        const percentage = parseInt(percentage_string || '50') / 100.0;\n        if(direction_string === 'horizontal')\n            panel_elt.scrollLeft += Math.round(panel_elt.clientWidth * percentage)\n        else\n            panel_elt.scrollTop += Math.round(panel_elt.clientHeight * percentage);\n    }\n\n    do_export_document_as_text(stack) {\n        const exported_text = this.app_state.document.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied document to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_export_stack_items_as_text(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        const exported_text = items.map(item => item.to_text()).join(\"\\n\\n\");\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied \" + arg + \" item\" + (arg === 1 ? \"\" : \"s\") + \" to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n}\n\n\nexport default InputContext;\n\n","\n\nimport './katex.css';  // Must be imported before App.css\nimport './App.css';\n\nimport React from 'react';\nimport katex from 'katex';\nimport {\n    Settings, AppState, UndoStack, DocumentStorage,\n    ImportExportState, FileManagerState\n} from './Models';\nimport InputContext from './Actions';\n\n\nconst $e = React.createElement;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // NOTE: settings are stored in the localStorage, but documents use indexedDB.\n        // This is mainly because we need the settings before the indexedDB may be ready.\n        let settings = Settings.load_from_local_storage();\n\n        this.state = {\n            app_state: new AppState(),\n            settings: settings,\n            file_manager_state: new FileManagerState(),\n            import_export_state: new ImportExportState(),\n            document_storage: new DocumentStorage(),\n            input_context: new InputContext(this, settings),\n            undo_stack: new UndoStack(),\n            clipboard_items: {}\n        };\n        this.state.undo_stack.clear(this.state.app_state);\n        this.state.import_export_state.document_storage = this.state.document_storage;\n        this.state.import_export_state.onstatechange = () => this.import_export_state_changed();\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n\n        this.state.document_storage.open_database(this.on_open_database.bind(this));\n    }\n\n    // Database has been opened; request the list of documents, and try to load the last-opened file.\n    on_open_database() {\n        this.request_file_list();\n        if(this.state.settings.last_opened_filename)\n            this.start_loading_filename(this.state.settings.last_opened_filename);\n        else {\n            let file_manager_state = this.state.file_manager_state;\n            let settings = this.state.settings;\n            const filename = 'untitled';\n            file_manager_state.current_filename = file_manager_state.selected_filename = filename;\n            settings.last_opened_filename = filename;\n            settings.save();\n        }\n    }\n\n    file_manager_state_changed() {\n        this.setState({file_manager_state: this.state.file_manager_state});\n    }\n\n    import_export_state_changed() {\n        const import_export_state = this.state.import_export_state;\n        this.setState({import_export_state: import_export_state});\n        if(import_export_state.file_list_needs_update) {\n            import_export_state.file_list_needs_update = false;\n            this.request_file_list();\n        }\n    }\n\n    // Start loading the current list of documents from the IndexedDB database.\n    request_file_list() {\n        this.state.document_storage.fetch_file_list(\n            this.file_list_request_finished.bind(this),\n            this.file_list_request_error.bind(this));\n    }\n\n    file_list_request_finished(file_list) {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = false;\n        file_manager_state.file_list = file_list;\n        file_manager_state.sort_file_list('filename', true);\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    file_list_request_error() {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = true;\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    start_loading_filename(filename) {\n        this.state.document_storage.load_state(\n            filename,\n            this.file_load_finished.bind(this),\n            this.file_load_error.bind(this));\n    }\n\n    file_load_finished(filename, new_app_state) {\n        const file_manager_state = this.state.file_manager_state;\n        const settings = this.state.settings;\n        file_manager_state.selected_filename = file_manager_state.current_filename = filename;\n        settings.last_opened_filename = filename;\n        settings.save();\n        this.setState({app_state: new_app_state, file_manager_state: file_manager_state});\n        this.state.undo_stack.clear(new_app_state);\n        this.state.input_context.notify('Loaded: ' + filename);\n    }\n\n    // TODO: It's not necessarily an error if the file doesn't exist,\n    // but we should make sure to clear stack/document in that case\n    // (same as do_start_new_file).\n    file_load_error(filename, error) {\n        //alert(\"Unable to load file \\\"\" + filename + \"\\\".\");\n    }\n\n    componentDidMount() {\n        this.apply_layout_to_dom();\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        window.addEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.addEventListener('pageshow', this.handleVisibilityChange);\n//      window.addEventListener('focus', this.handleVisibilityChange);\n        this.request_file_list();\n    }\n\n    apply_layout_to_dom() {\n        if(this.stack_panel_ref.current && this.document_panel_ref.current &&\n           this.popup_panel_ref.current) {\n            this.state.settings.apply_layout_to_dom(\n                this.stack_panel_ref.current, this.document_panel_ref.current,\n                this.popup_panel_ref.current);\n        }\n    }\n\n    componentDidUpdate() {\n        // Show the currently opened file in the browser's document title.\n        const filename = this.state.file_manager_state.current_filename;\n        const program_name = 'rpnlatex';\n        const new_title = filename ? (program_name + ' - ' + filename) : program_name;\n        if(new_title !== document.title)\n            document.title = new_title;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.removeEventListener('pageshow', this.handleVisibilityChange);\n//      window.removeEventListener('focus', this.handleVisibilityChange);\n    }\n\n    render() {\n\tconst app_state = this.state.app_state;\n\tconst settings = this.state.settings;\n\tconst input_context = this.state.input_context;\n\n        this.stack_panel_ref = React.createRef();\n        this.document_panel_ref = React.createRef();\n        this.popup_panel_ref = React.createRef();\n\n\tlet stack_panel_components = [\n\t    $e(StackItemsComponent, {\n                settings: settings,\n                stack: app_state.stack,\n                input_context: input_context\n            })];\n\tif(settings.show_mode_indicator || input_context.notification_text)\n\t    stack_panel_components.push(\n\t\t$e(ModeIndicatorComponent, {\n\t\t    app_state: app_state,\n\t\t    input_context: input_context\n\t\t}));\n\n        return $e(\n            'div', {id: 'panel_layout', className: 'theme_' + settings.selected_theme},\n            $e('div', {className: 'panel stack_panel', id: 'stack_panel', ref: this.stack_panel_ref},\n\t       ...stack_panel_components),\n            $e('div', {className: 'panel document_panel', id: 'document_panel', ref: this.document_panel_ref},\n               $e('div', {id: 'document_container'},\n                  $e(DocumentComponent, {\n                      settings: settings,\n                      document: app_state.document,\n                      filename: this.state.file_manager_state.current_filename,\n                      is_dirty: app_state.is_dirty  /* TODO: revisit, maybe remove this */\n                  }))),\n            $e(PopupPanelComponent, {\n                settings: settings,\n                popup_panel_ref: this.popup_panel_ref,\n                import_export_state: this.state.import_export_state,\n                document_storage: this.state.document_storage,\n                file_manager_state: this.state.file_manager_state\n            }));\n    }\n\n    handleKeyDown(event) {\n        // No Alt/Meta key combinations are handled.\n        if(event.altKey || event.metaKey)\n            return;\n        const key = this._keyname_from_event(event);\n        if(key === 'Meta' || key === 'Ctrl+Control')\n            return;\n        \n        let app_state = this.state.app_state;\n        let [was_handled, new_app_state] = this.state.input_context.handle_key(app_state, key);\n        if(was_handled) {\n            event.preventDefault();\n            // TODO: event.stopPropagation();\n            const scratch = this.manage_undo_state(new_app_state);\n            if(scratch)\n                new_app_state = scratch;\n            else   // undo/redo \"failed\"\n                this.state.input_context.error_flash_stack();\n\n            let state_updates = {app_state: new_app_state};\n            if(this.state.input_context.files_changed) {\n                this.request_file_list();\n                state_updates.file_manager_state = this.state.file_manager_state;  // TODO: revisit\n            }\n            this.setState(state_updates);\n        }\n    }\n\n    _keyname_from_event(event) {\n        let key = event.key;\n\n        if((key.startsWith('Arrow') || key === 'Enter' || key === 'Backspace') && event.shiftKey)\n            key = 'Shift+' + key;\n        if(event.ctrlKey)\n            key = 'Ctrl+' + key;\n\n        // NOTE: none of the Alt stuff works on Firefox for some reason.  Chromium seems ok.\n        // if(event.metaKey || event.altKey || event.getModifierState('Alt') || event.getModifierState('Meta'))\n        //     key = 'Alt+' + key;\n\n        return key;\n    }\n\n    // Auto-save when window is being closed.\n    handleBeforeUnload(event) {\n        const filename = this.state.file_manager_state.current_filename;\n        if(filename)\n            this.state.document_storage.save_state(this.state.app_state, filename);\n        return null;\n    }\n\n    // On iOS Safari, this event is triggered when resuming the tab.\n    // When this happens, the scroll positions are reset, but a re-render takes care of that\n    // via DocumentComponent.ensure_selection_visible().\n    handleVisibilityChange(event) {\n        this.setState({});  // force React to re-render\n    }\n\n    // Returns 'new' new_app_state.\n    manage_undo_state(new_app_state) {\n        let undo_stack = this.state.undo_stack;\n        switch(this.state.input_context.perform_undo_or_redo) {\n        case 'undo': return undo_stack.undo_state();\n        case 'redo': return undo_stack.redo_state();\n        case 'suppress': return new_app_state;  // Normal action, but don't remember undo state.\n        case 'clear':\n            undo_stack.clear(new_app_state);\n            return new_app_state;\n        default:\n            // Normal action; save undo state\n            undo_stack.push_state(new_app_state);\n            return new_app_state;\n        }\n    }\n}\n\n\n// Shows current input mode in top-right corner of stack display\nclass ModeIndicatorComponent extends React.Component {\n    render() {\n        const input_context = this.props.input_context;\n        let indicator_item = undefined;\n        const notification_text = input_context.notification_text;\n        let input_mode = input_context.mode;\n        if(input_context.prefix_argument !== null) {\n            // Show current prefix argument in mode indicator\n            input_mode = [\n                input_mode, '(',\n                (input_context.prefix_argument < 0 ? '*' : input_context.prefix_argument.toString()),\n                ')'\n            ].join('');\n        }\n        // if(input_context.text_entry !== null)\n        //     input_mode = 'text_entry';\n        if(notification_text) {\n            // Auto-highlight anything after the colon in the notification message.\n            const colon = notification_text.indexOf(':');\n            if(colon >= 0)\n                indicator_item = $e(\n                    'span', {className: 'notification'},\n                    $e('span', {}, notification_text.slice(0, colon+1)),\n                    $e('span', {className: 'highlighted'}, notification_text.slice(colon+1)));\n            else\n                indicator_item = $e('span', {className: 'notification'}, notification_text);\n        }\n        else if(input_mode !== 'base')\n            indicator_item = $e(\n                'span', {className: 'mode'},\n                input_mode.replaceAll('_', ' '));\n        return $e('div', {className: 'indicator'}, indicator_item);\n    }\n}\n\n\nclass StackItemsComponent extends React.Component {\n    render() {\n        let input_context = this.props.input_context;\n        const item_components = this.props.stack.items.map((item, index) => {\n            // If there's an active prefix argument for stack commands, highlight the stack items that\n            // will be affected.\n            const selected = (\n                input_context.mode === 'stack' &&\n                    (input_context.prefix_argument < 0 ||\n                     this.props.stack.items.length-index <= input_context.prefix_argument));\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: React.createRef(),\n                    key: item.react_key(index)\n                });\n        });\n        if(input_context.text_entry !== null) {\n            const component = $e(\n                TextEntryComponent, {\n                    text: input_context.text_entry,\n                    entry_type: input_context.text_entry_mode,\n                    key: 'textentry'\n                });\n            item_components.push(component);\n        }\n        let class_names = ['stack_items'];\n        if(this.props.settings.layout.stack_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')}, item_components);\n    }\n}\n\n\nclass DocumentComponent extends React.Component {\n    render() {\n        const document = this.props.document;\n        const subcomponents = document.items.map((item, index) => {\n            let item_ref = React.createRef();\n            const is_selected = document.selection_index === index+1;\n            if(is_selected) this.selected_item_ref = item_ref;\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: is_selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: item_ref,\n                    key: item.react_key(index)\n                });\n        });\n\n        // \"Spacer\" after the last document item.  This enables the document view to scroll\n        // a little past the end so that we don't force the last document item to be flush\n        // against the bottom of the screen.\n        subcomponents.push(\n            $e('div', {className: 'bottom_spacer', key: 'bottom_spacer'}));\n\n        // Top of document \"spacer\", which is used to indicate that items are to be\n        // inserted at the top of the document.  Unlike the bottom spacer, the top\n        // spacer can be the current document selection.\n        const top_is_selected = document.selection_index === 0;\n        if(top_is_selected)\n            this.selected_item_ref = React.createRef();\n        const top_spacer = $e(\n            'div', {\n                className: 'top_spacer' + (top_is_selected ? ' selected' : ''),\n                key: 'top_spacer',\n                ref: top_is_selected ? this.selected_item_ref : null\n            });\n        \n        let class_names = ['document_items'];\n        if(this.props.settings.layout.document_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')},\n                  [top_spacer].concat(subcomponents));\n    }\n\n    componentDidUpdate() {\n        this.ensure_selection_visible();\n    }\n\n    ensure_selection_visible() {\n        if(!this.selected_item_ref) return;\n        const item = this.selected_item_ref.current;\n        if(!item) return;\n        let container = document.getElementById('document_container');\n        const extra_space = item.offsetHeight/2;\n        if(item.offsetTop < container.scrollTop)\n            container.scrollTop = item.offsetTop - extra_space;\n        if(item.offsetTop + item.offsetHeight > container.scrollTop + container.offsetHeight)\n            container.scrollTop = item.offsetTop + item.offsetHeight - container.offsetHeight + extra_space;\n    }\n}\n\n\n// Accumulate a single line of text for literal or Latex command entry\n// (backslash key activates this).\nclass TextEntryComponent extends React.Component {\n    render() {\n        const class_name = 'text_entry ' + this.props.entry_type + '_mode';\n        return $e('div', {className: class_name}, this.props.text);\n    }\n}\n\n\nclass FileManagerComponent extends React.Component {\n    render() {\n        const show_import_export = !this.props.file_manager_state.unavailable;\n        this.file_input_ref = React.createRef();\n        return $e(\n            'div', {className: 'file_header', id: 'files_panel'},\n            $e('h2', {}, 'File Manager'),\n            this.render_current_filename(),\n            this.render_file_table(),\n            this.render_shortcuts(),\n            show_import_export && $e('h2', {}, 'Export/Import'),\n            show_import_export && this.render_export_import_section()\n        );\n    }\n\n    render_export_import_section() {\n        const import_export_state = this.props.import_export_state;\n        let subcomponents = [];\n\n        subcomponents.push(\n            $e('p', {}, 'This section lets you download the internal browser document storage as a .zip file, or restore the internal storage from a previously downloaded export.'));\n\n        subcomponents.push(\n            $e('p', {},\n               $e('strong', {}, import_export_state.textual_state())));\n\n        if(import_export_state.state === 'idle')\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {\n                       href: '#',\n                       onClick: this.start_exporting.bind(this)\n                   }, 'Prepare Export')));\n        if(import_export_state.download_available()) {\n            const export_filename = import_export_state.generate_download_filename();\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {href: import_export_state.download_url, download: export_filename},\n                      'Download: ' + export_filename)));\n        }\n\n        // Show file upload element if ready to accept uploads.\n        if(import_export_state.state === 'idle') {\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {}, 'Import Zip File: '),\n                   $e('input', {\n                       type: 'file',\n                       ref: this.file_input_ref\n                   }),\n                   $e('input', {\n                       type: 'button',\n                       value: 'Upload',\n                       onClick: this.handle_file_upload.bind(this)\n                   })));\n        }\n\n        // Show import results when import finished.\n        if(import_export_state.state === 'idle' && import_export_state.import_result_string)\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {style: {fontWeight: 'bold'}}, 'Import result: '),\n                   $e('span', {}, import_export_state.import_result_string)));\n        \n        return $e('div', {}, ...subcomponents);\n    }\n\n    render_current_filename() {\n        const current_filename = this.props.file_manager_state.current_filename;\n        if(!current_filename) return null;\n        return $e(\n            'div', {className: 'current_file'},\n            $e('label', {}, 'Current file:'),\n            $e('span', {className: 'filename'}, current_filename));\n    }\n\n    render_file_table() {\n        const file_manager_state = this.props.file_manager_state;\n        if(file_manager_state.unavailable)\n            return $e('p', {}, 'IndexedDB support unavailable in your browser.  You will be unable to save or load documents.  Note that Firefox disables IndexedDB when in Private Browsing mode.');\n        else if(file_manager_state.file_list && file_manager_state.file_list.length > 0) {\n            return $e(\n                'div', {},\n                $e('table', {className: 'file_table'},\n                   $e('thead', {},\n                      $e('tr', {},\n                         $e('th', {className: 'filename'}, 'Filename'),\n                         $e('th', {className: 'filesize', colSpan: '2'}, 'Size'),\n                         $e('th', {className: 'timestamp', colSpan: '2'}, 'Last Modified'))),\n                   $e('tbody', {},\n                      file_manager_state.file_list.map(\n                          (file, index) => this._render_file_list_row(file, index)))));\n        }\n        else if(file_manager_state.file_list)\n            return $e('p', {}, 'No files created yet.');\n        else\n            return $e('p', {}, 'Fetching file list...');\n    }\n\n    _render_file_list_row(file, index) {\n        const file_manager_state = this.props.file_manager_state;\n        let class_names = [];\n        if(file.filename === file_manager_state.selected_filename) class_names.push('selected_file');\n        if(file.filename === file_manager_state.current_filename) class_names.push('current_file');\n        const item_count = file.document_item_count + file.stack_item_count;\n        return $e(\n            'tr', {className: class_names.join(' '), key: 'file_' + file.filename},\n            $e('td', {className: 'filename'}, file.filename),\n            $e('td', {className: 'filesize'},\n               Math.floor((file.filesize+1023)/1024) + ' kb'),\n            $e('td', {className: 'filesize'},\n               item_count + ' object' + (item_count === 1 ? '' : 's')),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleDateString()),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleTimeString()));\n    }\n\n    render_shortcuts() {\n        const help_specs = [\n            ['Escape', 'Close file manager'],\n            ['Arrows', 'Select next/previous file'],\n            ['Enter', 'Open selected file'],\n            ['d', 'Delete selected file'],\n            ['n', 'Start a new empty file'],\n            ['s', 'Save current file'], // + (current_filename ? (' (' + current_filename + ')') : '')],\n            ['S', 'Save as...']\n        ];\n        const keyhelp_elements = help_specs.map(spec => {\n            const [keyname, helptext] = spec;\n            return $e(\n                'li', {},\n                $e('span', {className: 'keybinding'}, keyname),\n                $e('span', {}, ' ' + helptext));\n        });\n        return $e('ul', {className: 'keybindings'}, ...keyhelp_elements);\n    }\n\n    handle_file_upload(event) {\n        const file_input_elt = this.file_input_ref.current;\n        if(!file_input_elt) return;\n        const file_list = file_input_elt.files;\n        if(file_list.length === 1)\n            this.start_importing(file_list[0]);\n        else if(file_list.length > 1)\n            alert('Please select a single .zip file to import.');\n        else\n            alert('Please select a .zip file to import.');\n    }\n\n    start_importing(file) {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_importing(file);\n    }\n\n    start_exporting() {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_exporting();\n    }\n}\n\n\n// Displays an Item instance in any context (stack/document).\n// Props: {item: Item, selected: Bool}\nclass ItemComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        let ref = this.props.item_ref;\n        let className = this.props.selected ? 'selected ' : '';\n        if(item.item_type() === 'text' && item.is_heading)\n            className = 'heading_style ' + className;\n        switch(item.item_type()) {\n        case 'expr':\n            if(item.tag_expr) {\n                this.tag_ref = React.createRef();\n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: 'tag_expr', ref: this.tag_ref}, ''),\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n            }\n            else \n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n        case 'text':\n\t    if(item.is_empty()) {\n\t\t// Empty TextItems are rendered as separator lines as a special case.\n\t\treturn $e(\n                    'div', {className: className + 'separator_item'},\n                    $e('hr'));\n\t    }\n\t    else {\n\t\t// TODO: The CSS/markup for heading texts is a little hacky\n\t\treturn $e(\n                    'div', {className: 'text_item'},\n                    $e('div', {className: className + 'latex_fragment'},\n                       $e('div', {className: 'latex_fragment_inner', ref: ref}, '')));\n\t    }\n\tcase 'code':\n\t    // NOTE: only LaTeX source code snippets currently implemented.\n\t    return $e(\n\t\t'div', {className: 'latex_source_item'},\n\t\t$e('div', {className: 'latex_source'}, item.source));\n        default:\n            return $e('div', {}, '????');\n        }\n    }\n\n    componentDidMount() {\n        const item = this.props.item;\n        const node = this.props.item_ref.current;\n        if(!node) return;  // shouldn't happen\n        if(item.item_type() === 'expr') {\n            // Render math with KaTeX\n            this._render_with_katex(item.expr.to_latex(), node, !this.props.inline_math);\n            if(item.tag_expr && this.tag_ref.current)\n                this._render_with_katex(item.tag_expr.to_latex(), this.tag_ref.current, false);\n        }\n        else if(item.item_type() === 'text') {\n            // TextItems are always rendered in inline mode.\n            // Note that this means that text items will always be left-aligned regardless\n            // of the rightalign_math layout settings.\n            this._render_with_katex(item.to_latex(), node, false);\n        }\n    }\n\n    _render_with_katex(latex_code, node, display_mode) {\n        if(latex_code === '' || latex_code === \"\\\\,\") {\n            // Empty/blank latex expression - fake it with something so that it's visible.\n            latex_code = \"\\\\text{(blank)}\";\n        }\n        try {\n            // NOTE: trust: true here allows the use of \\htmlClass etc.\n            katex.render(latex_code, node, {\n\t\tthrowOnError: false,\n\t\tdisplayMode: display_mode,\n\t\tfleqn: true,\n\t\ttrust: true,\n\t\tminRuleThickness: 0.06  // 0.04 default is too thin (but unfortunately this makes the sqrt bars too thick too)\n\t    });\n        }\n        catch(e) {\n            // KaTeX throws actual errors for some inputs, even if throwOnError is false.\n            // Example: \\texttt{\\textbf{test}}\n            const msg = e.toString();\n            node.innerHTML = '<div style=\"color:red;\">' + msg + '</div>';\n        }\n    }\n}\n\n\nclass PopupPanelComponent extends React.Component {\n    render() {\n        this.refs = {\n            help: React.createRef(),\n            help_content: React.createRef()\n        };\n        const popup_mode = this.props.settings.popup_mode;\n        let subcomponent = null;\n        if(popup_mode === 'files') {\n            subcomponent = $e(\n                'div', {id: 'files_container'},\n                $e(FileManagerComponent, {\n                    import_export_state: this.props.import_export_state,\n                    document_storage: this.props.document_storage,\n                    file_manager_state: this.props.file_manager_state\n                }));\n        }\n        return $e(\n            'div', {id: 'popup_panel', ref: this.props.popup_panel_ref},\n            subcomponent,\n            $e('div', {id: 'help_container', ref: this.refs.help},\n               $e('div', {className: 'help', ref: this.refs.help_content})));\n    }\n\n    componentDidMount() {\n        const help_source_elt = document.getElementById('helptext');\n        const help_dest_elt = this.refs.help_content.current;\n        if(help_source_elt) {\n            help_source_elt.style.display = 'block';\n            this._render_help_latex(help_source_elt);\n            help_source_elt.parentNode.removeChild(help_source_elt);\n            help_dest_elt.appendChild(help_source_elt);\n        }\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.settings.popup_mode;\n        if(this.refs.help.current)\n            this.refs.help.current.style.display = (mode === 'help' ? 'block' : 'none');\n        if(mode === 'help' &&\n           this.props.settings.help_scroll_top !== undefined &&\n           this.props.popup_panel_ref.current) {\n            if(typeof(this.props.settings.help_scroll_top) === 'string') {\n                // Jump to a specified anchor in the help text.\n                window.location.hash = '#' + this.props.settings.help_scroll_top;\n            }\n            else {\n                // Restore helptext scroll position previously saved by 'do_toggle_popup'.\n                this.props.popup_panel_ref.current.scrollTop = this.props.settings.help_scroll_top;\n            }\n            this.props.settings.help_scroll_top = undefined;\n        }\n    }\n\n    // Render any <code>...</code> spans in the help text with KaTeX.\n    _render_help_latex(help_elt) {\n        const children = help_elt.getElementsByTagName('code');\n        for(let i = 0; i < children.length; i++) {\n            let code_elt = children[i];\n            const latex_code = code_elt.textContent;\n            if(latex_code)\n                katex.render(latex_code, code_elt,\n                             { throwOnError: false, displayMode: false, trust: true });\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}