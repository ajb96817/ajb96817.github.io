{"version":3,"sources":["Keymap.js","Models.js","Actions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditorKeymap","base","\"","files","help","stack","config","config_math_alignment","config_stack","config_theme","config_zoom","text_entry","math_text_entry","latex_entry","delimiters","custom_delimiters","operator","named_operator","named_underset_operator","hyperbolic","inverse","inverse_hyperbolic","squared","squared_hyperbolic","integral_limits","derivative","infix","relational","symbol","decoration","color","array","change_matrix_type","script","calligraphic","lowercase_greek","uppercase_greek","variant_greek","Keymap","this","bindings","KeybindingTable","mode","key","mode_map","test","Settings","current_keymap","selected_theme","last_opened_filename","popup_mode","layout","default_layout","zoom_factor","stack_rightalign_math","document_rightalign_math","inline_math","stack_side","stack_split","stack_panel_elt","document_panel_elt","popup_panel_elt","style","display","root_elt","document","getElementById","percentage","Math","round","pow","fontSize","_split_rectangle","x","y","w","h","stack_bounds","document_bounds","_apply_bounds","bounds","side","split_percent","w1","w2","h1","h2","elt","left","top","width","height","serialized_string","JSON","stringify","to_json","localStorage","setItem","json","saved_keys","forEach","getItem","from_json","parse","s","LatexEmitter","tokens","last_token_type","text","token_type","length","push","expr","emit_latex","force_braces","grouped","fn","old_tokens","old_last_token_type","join","emit_token","last_token","_is_latex_identifier_char","charAt","ch","command_name","command_options","startsWith","command","slice","envname","environment_argument","AppState","_default_stack","Document","is_dirty","item","TextItem","TextItemTextElement","Stack","app_state","format","UndoStack","state_stack","max_stack_depth","undo_count","initial_app_state","state","same_as","DocumentStorage","open_request","database","onsuccess","indexedDB","on_open_success","open","onupgradeneeded","handle_upgrade_database","bind","handle_open_success","onerror","handle_open_error","event","result","oldVersion","build_initial_schema","createObjectStore","keyPath","onversionchange","close","alert","readwrite","transaction","filename","replaceAll","trim","request","create_transaction","objectStore","get","serialized_json","metadata_json","filesize","description","stack_item_count","depth","document_item_count","items","timestamp","Date","put","oncomplete","onabort","delete","getAll","row","ts_value","onrowfetched","onfinished","cursor","openCursor","c","target","value","continue","ImportExportState","document_storage","import_count","failed_count","error_message","download_url","import_result_string","file_list_needs_update","onstatechange","date","getFullYear","toString","toLocaleString","month","toLowerCase","getDate","padStart","new_state","zip","JSZip","fetch_all_documents","add_document_json_to_zip","start_compressing","change_state","file","generateAsync","type","then","content_blob","finished_compressing","URL","revokeObjectURL","clear_download_url","createObjectURL","zipfile","reader","FileReader","addEventListener","process_uploaded_data","readAsArrayBuffer","data","loadAsync","promises","endsWith","async","content","import_file","name","Promise","all","parsed","e","save_state","FileManagerState","file_list","selected_filename","current_filename","unavailable","field","ascending","sort","a","b","a_value","b_value","basename","replace","n","candidate","some","offset","new_filename","f","index","new_index","Expr","emitter","finished_string","expr_type","json_keys","json_key","obj","undefined","map","to_latex","found","visit","old_expr","new_expr","CommandExpr","_list","operand_exprs","options","PrefixExpr","_expr","base_expr","prefix_expr","InfixExpr","operator_expr","left_expr","right_expr","split","DeferExpr","TextExpr","SequenceExpr","exprs","DelimiterExpr","left_type","right_type","middle_type","inner_exprs","SubscriptSuperscriptExpr","subscript_expr","superscript_expr","ArrayExpr","array_type","row_count","column_count","_list2d","element_exprs","row_separators","column_separators","json_array","expr_json","row_exprs","right","concat","combine_command_pair","left_name","right_name","operand_count","as_bold","new_command_name","indexOf","operand_expr","grouped_expr","substitute_expr","op_expr","op","operator_text","new_split_mode","problematic_large_operators","last_was_large_op","is_command_with_name","text_or_command","needs_autoparenthesization","parenthesize","Array","fill","t","new_array_type","every","new_element_exprs","make_cell","new_row_count","new_column_count","inserted_row_exprs","i","splice","_transpose_cell","cell_expr","is_column","toggle","separators","size","left_delim","right_delim","pieces","column_layout_string","has_row_separators","begin_environment","row_index","row_separator","separator","col_index","align_separator","end_environment","is_matrix","_emit_array_with_separators","expr1","expr2","split_mode","_split_expr","combine_pair","Item","serial","next_serial","prefix","serial_number","item_type","ExprItem","tag_expr","elements","element_json","TextItemElement","is_heading","SeparatorItem","separator_type","from_string","to_text","clone","TextItemExprElement","is_bold","TextItemRawElement","raw","_latex_escape","replacements","match","string","element","substitution_expr","new_elements","is_expr","defer_expr","find_defer","item1","item2","separator_text","from_expr","merged_elements","last_index","last_merged_element","is_text","is_raw","is_explicit_space","check","underflow","_unchecked_pop","check_exprs","type_error","new_stack","pop_exprs","Error","push_all","push_all_exprs","object_type","item_json","selection_index","new_item","selected_item","delete_selection","move_selection_by","insert_item","InputContext","app_component","settings","new_mode","new_document","files_changed","file_saved","notification_text","perform_undo_or_redo","prefix_argument","preserve_prefix_argument","show_latex_source","text_entry_mode","effective_mode","lookup_binding","last_keypress","process_command","commands","piece","token","process_command_batch","parameters","handler_function","new_app_state","message","error_flash_stack","dom_element","classList","remove","offsetWidth","add","error_flash_document","error_flash_element","elt_ids","elt_id","child_expr","is_superscript","autoparenthesize","autoparenthesize_frac","_build_subscript_superscript","push_expr","make_subscript_superscript","new_prime_expr","new_superscript_expr","is_prime_command","switch_to_mode","new_prefix_argument","parseInt","default_value","all_value","arg","_get_prefix_argument","pop","new_items","reverse","last_item","amount_string","amount","shift_selection_by","file_manager_state","do_save_file_as","notify","save","request_file_list","window","prompt","sanitize_filename","confirm","do_save_file","start_loading_filename","generate_unused_filename","do_toggle_popup","offset_string","find_adjacent_filename","delete_state","preserve","do_insert","case_type","toUpperCase","convert_fn","opname","arity_string","arity","popped_exprs","result_expr","funcname","superscript_text","arg_expr","orig_funcname","sup_or_sub","make_operatorname","underset_expr","hat_op","inner_expr","colorname","delimiter_type","middle","_finish_custom_delimiters","d","left_item","right_item","concatenate_items","phrase","conjunction_item","infix_expr","new_infix_expr","with_split_mode","overset_op","stacked_expr","new_stack_2","original_expr","new_text_item","try_substitute_defer","which_side","extracted_expr","cancel_text_entry","new_mode_when_empty","textstyle","from_string_with_placeholders","expr_count_string","expr_count","arg_count_string","arg_count","command_expr","mode_string","help_location","scrollTop","help_scroll_top","apply_layout_to_dom","config_option","full_refresh_needed","clear_all_flashes","clone_all_items","matrix_type","_require_prefix_argument","matrix_expr","pop_arrays","m1","m2","new_array","stack_arrays","array_expr","split_rows","dissolved_exprs","pop_matrices","with_ellipses","transposed","new_type","with_array_type","is_row_or_column","with_separator","align_type","split_elements","final_separator_text","infix_text","infix_operator_expr","tagged_item","tag_item","slot","clipboard_items","screen_percentage_string","screen_percentage","container","selected_elts","getElementsByClassName","selected_elt","top_scrolltop","offsetTop","bottom_scrolltop","offsetHeight","clientHeight","ratio","new_scrolltop","panel_name","direction_string","percentage_string","panel_elt","scrollLeft","clientWidth","exported_text","navigator","clipboard","writeText","$e","React","createElement","App","props","load_from_local_storage","import_export_state","input_context","undo_stack","clear","import_export_state_changed","handleKeyDown","handleBeforeUnload","handleVisibilityChange","open_database","on_open_database","setState","fetch_file_list","file_list_request_finished","file_list_request_error","sort_file_list","load_state","file_load_finished","file_load_error","error","stack_panel_ref","current","document_panel_ref","popup_panel_ref","program_name","new_title","title","removeEventListener","createRef","id","className","ref","StackItemsComponent","ModeIndicatorComponent","DocumentComponent","PopupPanelComponent","altKey","metaKey","_keyname_from_event","handle_key","was_handled","preventDefault","scratch","manage_undo_state","state_updates","shiftKey","ctrlKey","undo_state","redo_state","push_state","Component","indicator_item","input_mode","colon","item_components","selected","LaTeXSourceComponent","react_key","ItemComponent","item_ref","component","TextEntryComponent","entry_type","class_names","subcomponents","is_selected","selected_item_ref","top_is_selected","top_spacer","ensure_selection_visible","extra_space","class_name","FileManagerComponent","show_import_export","file_input_ref","render_current_filename","render_file_table","render_shortcuts","render_export_import_section","textual_state","href","onClick","start_exporting","download_available","export_filename","generate_download_filename","download","handle_file_upload","fontWeight","colSpan","_render_file_list_row","item_count","floor","toLocaleDateString","toLocaleTimeString","keyhelp_elements","spec","keyname","helptext","file_input_elt","start_importing","tag_ref","node","_render_with_katex","latex_code","display_mode","katex","render","throwOnError","displayMode","fleqn","trust","msg","innerHTML","refs","help_content","subcomponent","help_source_elt","help_dest_elt","_render_help_latex","parentNode","removeChild","appendChild","location","hash","help_elt","children","getElementsByTagName","code_elt","textContent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","console","log","onUpdate","onSuccess","catch","ReactDOMClient","createRoot","process","origin","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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AAK,0BACL,IAAK,qBACL,IAAK,iBACL,IAAK,gBACL,IAAK,eACL,IAAK,UACL,IAAK,aACL,IAAK,UACL,IAAK,qBACL,IAAK,wCACL,IAAK,eACL,IAAK,UACL,KAAM,iEACN,IAAK,sDACL,IAAK,gBACL,IAAK,2BAITC,WAAY,CACR,EAAK,iBACL,EAAK,eACL,EAAK,gBACL,EAAK,cACL,EAAK,UACL,EAAK,aACL,EAAK,aACL,EAAK,gBACL,EAAK,UACL,EAAK,aACL,EAAK,aACL,IAAK,aACL,EAAK,iBACL,EAAK,UACL,EAAK,mBACL,EAAK,iBACL,EAAK,cACL,IAAK,UACL,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,mBACL,IAAK,cACL,IAAK,gBACL,IAAK,gCAITC,OAAQ,CACJ,EAAK,sBACL,EAAK,YACL,EAAK,oCACL,EAAK,4BACL,EAAK,iBACL,EAAK,kBACL,EAAK,gBACL,EAAK,kBACL,EAAK,mBACL,EAAK,kBACL,EAAK,kBACL,EAAK,eACL,EAAK,gBACL,EAAK,eACL,EAAK,cACL,EAAK,gBACL,EAAK,gBACL,EAAK,cACL,EAAK,eACL,EAAK,qBACL,EAAK,kBACL,EAAK,eACL,EAAK,iBACL,EAAK,gBACL,EAAK,iBACL,IAAK,gBACL,IAAK,iBACL,IAAK,WACL,IAAK,WACL,IAAK,gBACL,IAAK,WACL,IAAK,yBACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,mBACL,IAAK,WACL,IAAK,WACL,IAAK,eACL,IAAK,UACL,QAAW,mBACX,UAAa,sBAIjBC,WAAY,CACR,EAAK,qBACL,EAAK,wBACL,EAAK,uBACL,EAAK,uBACL,EAAK,uBACL,EAAK,4BACL,EAAK,iBACL,EAAK,kBACL,EAAK,yCACL,EAAK,aACL,EAAK,8BACL,EAAK,+BACL,EAAK,gBACL,EAAK,oCACL,EAAK,+CACL,EAAK,oBACL,EAAK,iBACL,EAAK,gBACL,EAAK,oBACL,EAAK,uBACL,EAAK,uBACL,EAAK,oBACL,EAAK,8BACL,EAAK,kBACL,EAAK,cACL,EAAK,eACL,EAAK,oBACL,EAAK,0BACL,EAAK,cACL,EAAK,aACL,EAAK,kBACL,EAAK,cACL,EAAK,qBACL,EAAK,kBACL,EAAK,kBACL,EAAK,eACL,EAAK,kBACL,EAAK,oBACL,EAAK,sBACL,EAAK,iBACL,EAAK,gBACL,IAAK,gBACL3B,IAAM,iBACN,IAAK,oBACL,IAAK,yBACL,IAAK,uBACL,IAAK,kBACL,IAAK,sBACL,IAAK,WACL,IAAK,WACL,IAAK,uBACL,IAAK,kBACL,KAAM,oDACN,EAAK,qBACL,IAAK,iCAIT4B,MAAO,CACH,EAAK,aACL,EAAK,cACL,EAAK,aACL,EAAK,cACL,EAAK,eACL,EAAK,eACL,EAAK,YACL,EAAK,cAITC,MAAO,CACH,UAAW,kBACX,IAAK,kBACL,EAAK,sBACL,EAAK,oBACL,EAAK,qBACL,EAAK,iBACL,EAAK,2CACL,EAAK,yBACL,EAAK,uBACL,EAAK,wBACL,EAAK,uBACL,EAAK,4EACL,EAAK,iBACL,EAAK,0BACL,EAAK,sCACL,EAAK,cACL,EAAK,0BACL,EAAK,mBACL,EAAK,2BACL,EAAK,2BACL,IAAK,eACL,IAAK,eACL,IAAK,kBACL,IAAK,iCACL,IAAK,0BACL,IAAK,6BACL,IAAK,2BACL,IAAK,2BACL,IAAK,2BACL,IAAK,8CACL,IAAK,8CACL,EAAK,gFACL,IAAK,gCACL,IAAK,+BACL,IAAK,6BACL,EAAK,4BACL,IAAK,2BACL,MAAS,gBAGbC,mBAAoB,CAChB,EAAK,4BACL,EAAK,6BACL,EAAK,6BACL,IAAK,6BACL,IAAK,6BACL,IAAK,8BAITC,OAAQ,CACJ,UAAW,iDACX,IAAK,cAITC,aAAc,CACV,UAAW,iDACX,IAAK,cAITC,gBAAiB,CACb,EAAK,iBAAsB,EAAK,gBAChC,EAAK,eAAsB,EAAK,iBAChC,EAAK,mBAAsB,EAAK,eAChC,EAAK,iBAAsB,EAAK,eAChC,EAAK,gBAAsB,EAAK,kBAChC,EAAK,iBAAsB,EAAK,kBAChC,EAAK,cAAsB,EAAK,cAChC,EAAK,iBAAsB,EAAK,cAChC,EAAK,oBAAsB,EAAK,eAChC,EAAK,iBAAsB,EAAK,eAChC,EAAK,mBAAsB,EAAK,iBAChC,EAAK,iBAAsB,EAAK,cAChC,EAAK,eAAsB,EAAK,gBAEhC,IAAK,qBACL,IAAK,kBACL,IAAK,2BAITC,gBAAiB,CACb,EAAK,iBAAsB,EAAK,sBAChC,EAAK,eAAsB,EAAK,iBAChC,EAAK,oBAAsB,EAAK,kBAChC,EAAK,iBAAsB,EAAK,iBAChC,EAAK,cAAsB,EAAK,oBAChC,EAAK,kBAAsB,EAAK,iBAChC,EAAK,oBAAsB,EAAK,mBAChC,EAAK,iBAAsB,EAAK,iBAChC,EAAK,cAAsB,EAAK,eAChC,EAAK,mBAAsB,IAAK,mBAChC,EAAK,iBAGL,EAAK,iBAAsB,EAAK,sBAChC,EAAK,eAAsB,EAAK,iBAChC,EAAK,oBAAsB,EAAK,kBAChC,EAAK,iBAAsB,EAAK,iBAChC,EAAK,cAAsB,EAAK,oBAChC,EAAK,kBAAsB,EAAK,iBAChC,EAAK,oBAAsB,EAAK,mBAChC,EAAK,iBAAsB,EAAK,iBAChC,EAAK,cAAsB,EAAK,eAChC,EAAK,iBAEL,IAAK,UACL,IAAK,2BAITC,cAAe,CACX,EAAK,oBAAwB,EAAK,oBAClC,EAAK,kBAAwB,EAAK,kBAClC,EAAK,oBAAwB,EAAK,oBAClC,EAAK,qBAAwB,EAAK,qBAClC,EAAK,oBAAwB,EAAK,oBAClC,EAAK,iBAAwB,EAAK,iBAClC,EAAK,oBAAwB,EAAK,oBAClC,EAAK,oBAAwB,EAAK,oBAClC,EAAK,sBAAwB,EAAK,sBAClC,EAAK,iBAAwB,EAAK,iBAClC,EAAK,kBAAwB,EAAK,kBAElC,IAAK,4B,iBClzBPC,E,WACF,aAAe,oBACXC,KAAKC,SAAWC,E,kDAGpB,SAAeC,EAAMC,GACjB,IAAMC,EAAWL,KAAKC,SAASE,GAC/B,OAAIE,EACDA,EAASD,GAAaC,EAASD,GAC/BC,EAAS,YAAc,aAAaC,KAAKF,GAAaC,EAAS,WAC/DA,EAAS,YAAc,UAAUC,KAAKF,GAAaC,EAAS,WAC5DA,EAAS,YAAc,gBAAgBC,KAAKF,GAAaC,EAAS,WAClEA,EAAQ,QAAoBA,EAAQ,QAC3B,SAATF,GAA4B,WAATA,EACX,KAEA,SATU,S,KAcvBI,E,WAeF,aAAe,oBACXP,KAAKQ,eAAiB,IAAIT,EAC1BC,KAAKS,eAAiB,UACtBT,KAAKU,qBAAuB,KAC5BV,KAAKW,WAAa,KAClBX,KAAKY,OAASZ,KAAKa,iB,kDAGvB,WACI,MAAO,CACHC,YAAa,EACbC,uBAAuB,EACvBC,0BAA0B,EAC1BC,aAAa,EACbC,WAAY,OACZC,YAAa,M,iCAIrB,SAAoBC,EAAiBC,EAAoBC,GACrD,IAAMV,EAASZ,KAAKY,OAGpBU,EAAgBC,MAAMC,QAAUxB,KAAKW,WAAa,QAAU,OAG5D,IAAMc,EAAWC,SAASC,eAAe,QACnCC,EAAaC,KAAKC,MAAM,IAAID,KAAKE,IAAI,KAAMnB,EAAOE,aAAe,IACvEW,EAASF,MAAMS,SAAWJ,EAAa,IAGvC,MAAsC5B,KAAKiC,iBACvC,CAACC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAAKC,EAAG,KAAMzB,EAAOM,WAAYN,EAAOO,aAD5D,mBAAKmB,EAAL,KAAmBC,EAAnB,KAGAvC,KAAKwC,cAAcpB,EAAiBkB,GACpCtC,KAAKwC,cAAcnB,EAAoBkB,K,8BAK3C,SAAiBE,EAAQC,EAAMC,GAC3B,IAAMC,EAAKf,KAAKC,MAAMa,EAAcF,EAAOL,EAAE,KACvCS,EAAKJ,EAAOL,EAAIQ,EAChBE,EAAKjB,KAAKC,MAAMa,EAAcF,EAAOJ,EAAE,KACvCU,EAAKN,EAAOJ,EAAIS,EACtB,OAAOJ,GACP,IAAK,OACD,MAAO,CAAC,CAACR,EAAGO,EAAOP,EAAMC,EAAGM,EAAON,EAAGC,EAAGQ,EAAIP,EAAGI,EAAOJ,GAC/C,CAACH,EAAGO,EAAOP,EAAEU,EAAIT,EAAGM,EAAON,EAAGC,EAAGS,EAAIR,EAAGI,EAAOJ,IAC3D,IAAK,QACD,MAAO,CAAC,CAACH,EAAGO,EAAOP,EAAEW,EAAIV,EAAGM,EAAON,EAAGC,EAAGQ,EAAIP,EAAGI,EAAOJ,GAC/C,CAACH,EAAGO,EAAOP,EAAMC,EAAGM,EAAON,EAAGC,EAAGS,EAAIR,EAAGI,EAAOJ,IAC3D,IAAK,MACD,MAAO,CAAC,CAACH,EAAGO,EAAOP,EAAGC,EAAGM,EAAON,EAAMC,EAAGK,EAAOL,EAAGC,EAAGS,GAC9C,CAACZ,EAAGO,EAAOP,EAAGC,EAAGM,EAAON,EAAEW,EAAIV,EAAGK,EAAOL,EAAGC,EAAGU,IAC1D,IAAK,SACD,MAAO,CAAC,CAACb,EAAGO,EAAOP,EAAGC,EAAGM,EAAON,EAAEY,EAAIX,EAAGK,EAAOL,EAAGC,EAAGS,GAC9C,CAACZ,EAAGO,EAAOP,EAAGC,EAAGM,EAAON,EAAMC,EAAGK,EAAOL,EAAGC,EAAGU,IAC1D,QACI,MAAO,CAACN,EAAQA,M,2BAIxB,SAAcO,EAAKP,GACfO,EAAIzB,MAAM0B,KAAOR,EAAOP,EAAI,IAC5Bc,EAAIzB,MAAM2B,IAAMT,EAAON,EAAI,IAC3Ba,EAAIzB,MAAM4B,MAAQV,EAAOL,EAAI,IAC7BY,EAAIzB,MAAM6B,OAASX,EAAOJ,EAAI,M,kBAGlC,WACI,IAAMgB,EAAoBC,KAAKC,UAAUvD,KAAKwD,WAC9CC,aAAaC,QAAQ,WAAYL,K,qBAGrC,WAAW,IAAD,OACFM,EAAO,GAEX,OADApD,EAASqD,WAAWC,SAAQ,SAAAzD,GAASuD,EAAKvD,GAAO,EAAKA,MAC/CuD,K,sCA5FX,WACI,IAAMN,EAAoBI,aAAaK,QAAQ,YAC/C,OAAGT,EACQ9C,EAASwD,UAAUT,KAAKU,MAAMX,IAE9B,IAAI9C,I,uBAGnB,SAAiBoD,GACb,IAAIM,EAAI,IAAI1D,EAEZ,OADAA,EAASqD,WAAWC,SAAQ,SAAAzD,GAAS6D,EAAE7D,GAAOuD,EAAKvD,MAC5C6D,M,KAqFf1D,EAASqD,WAAa,CAClB,iBAAkB,uBAAwB,aAAc,U,IAKtDM,E,WACF,aAAe,oBACXlE,KAAKmE,OAAS,GACdnE,KAAKoE,gBAAkB,K,8CAG3B,SAAWC,EAAMC,GACVD,EAAKE,OAAS,GACbvE,KAAKmE,OAAOK,KAAKH,GACrBrE,KAAKoE,gBAAkBE,I,kBAG3B,SAAKG,GAAQA,EAAKC,WAAW1E,Q,0BAE7B,SAAayE,EAAME,GAAe,IAAD,OAAE3E,KAAK4E,SAAQ,kBAAM,EAAKH,KAAKA,KAAOE,K,qBAEvE,SAAQE,EAAIF,GACR,MAAwC,CAAC3E,KAAKmE,OAAQnE,KAAKoE,iBAAtDU,EAAL,KAAiBC,EAAjB,KADsB,EAEgB,CAAC,GAAI,MAA1C/E,KAAKmE,OAFgB,KAERnE,KAAKoE,gBAFG,KAItBS,IAEA,MAAkC,CAAC7E,KAAKmE,OAAQnE,KAAKoE,iBAA9CD,EAAP,KAAeC,EAAf,KACApE,KAAKmE,OAASW,EACd9E,KAAKoE,gBAAkBW,EAMH,UAAjBJ,GAA8C,IAAlBR,EAAOI,QAAgBJ,EAAOI,OAAS,GAClEvE,KAAKqE,KAAK,KACVrE,KAAKqE,KAAKF,EAAOa,KAAK,KACtBhF,KAAKqE,KAAK,MAGa,SAApBD,EACyB,IAArBD,EAAO,GAAGI,OACTvE,KAAKqE,KAAKF,EAAO,KAEjBnE,KAAKqE,KAAK,KACVrE,KAAKqE,KAAKF,EAAO,IACjBnE,KAAKqE,KAAK,MAGO,mBAAjBM,GACJ3E,KAAKqE,KAAK,KACVrE,KAAKiF,WAAWd,EAAO,GAAI,WAC3BnE,KAAKqE,KAAK,MAGVrE,KAAKiF,WAAWd,EAAO,GAAI,a,kBAKvC,SAAKE,GACD,GAA4B,YAAzBrE,KAAKoE,gBAA+B,CAGnC,IAAMc,EAAalF,KAAKmE,OAAOnE,KAAKmE,OAAOI,OAAO,GAC/CvE,KAAKmF,0BAA0BD,EAAWE,OAAOF,EAAWX,OAAO,KAClEvE,KAAKmF,0BAA0Bd,EAAKe,OAAO,KAC3CpF,KAAKiF,WAAW,IAAK,QAE7BjF,KAAKiF,WAAWZ,EAAM,U,uCAG1B,SAA0BgB,GACtB,MAAO,aAAa/E,KAAK+E,K,qBAI7B,SAAQC,EAAcC,GACfA,IACCD,EAAeA,EAAe,IAAMC,EAAkB,KAC1DvF,KAAKiF,WAAW,KAAOK,EAAc,a,6BAIzC,SAAgBjB,GACTA,EAAKmB,WAAW,MACfxF,KAAKyF,QAAQpB,EAAKqB,MAAM,IAExB1F,KAAKqE,KAAKA,K,+BAMlB,SAAkBsB,EAASC,GACvB5F,KAAKqE,KAAK,WAAasB,EAAU,KAC9BC,GAAsB5F,KAAKqE,KAAKuB,GACnC5F,KAAKqE,KAAK,Q,6BAGd,SAAgBsB,GAAW3F,KAAKqE,KAAK,WAAasB,EAAU,S,6BAE5D,WAAoB3F,KAAKqE,KAAK,S,2BAG9B,WAGIrE,KAAKqE,KAAK,mB,6BAId,WAAoB,OAAOrE,KAAKmE,OAAOa,KAAK,Q,KAK1Ca,E,WAQF,WAAY/H,EAAO4D,GAAW,oBAC1B1B,KAAKlC,MAAQA,GAASkC,KAAK8F,iBAC3B9F,KAAK0B,SAAWA,GAAY,IAAIqE,EAAS,GAAI,GAC7C/F,KAAKgG,UAAW,E,kDAGpB,WACI,IAAMC,EAAO,IAAIC,EAAS,CACtB,IAAIC,EAAoB,iCACxB,IAAIA,EAAoB,OAAO,GAC/B,IAAIA,EAAoB,8BAC5B,OAAO,IAAIC,EAAM,CAACH,M,qBAGtB,SAAQI,GAGJ,OAAOrG,KAAKlC,QAAUuI,EAAUvI,OAASkC,KAAK0B,WAAa2E,EAAU3E,W,qBAGzE,WACI,MAAO,CACH5D,MAAOkC,KAAKlC,MAAM0F,UAClB9B,SAAU1B,KAAK0B,SAAS8B,UACxB8C,OAAQ,M,wBA/BhB,SAAiB3C,GACb,OAAO,IAAIkC,EACPO,EAAMrC,UAAUJ,EAAK7F,OACrBiI,EAAShC,UAAUJ,EAAKjC,e,KAkC9B6E,E,WACF,aAAe,oBAEXvG,KAAKwG,YAAc,GAGnBxG,KAAKyG,gBAAkB,IAIvBzG,KAAK0G,WAAa,E,yCAGtB,SAAMC,GACF3G,KAAKwG,YAAc,CAACG,GACpB3G,KAAK0G,WAAa,I,wBAGtB,SAAWE,GAEP,OAAG5G,KAAKwG,YAAYjC,OAASvE,KAAK0G,YAC/B1G,KAAKwG,YAAYxG,KAAKwG,YAAYjC,OAASvE,KAAK0G,WAAa,GAAGG,QAAQD,GAChE,MAER5G,KAAK0G,WAAa,IAGjB1G,KAAKwG,YAAcxG,KAAKwG,YAAYd,MAAM,EAAG1F,KAAKwG,YAAYjC,OAASvE,KAAK0G,YAC5E1G,KAAK0G,WAAa,GAGtB1G,KAAKwG,YAAYhC,KAAKoC,GAGnB5G,KAAKwG,YAAYjC,OAASvE,KAAKyG,kBAC9BzG,KAAKwG,YAAcxG,KAAKwG,YAAYd,MAAM1F,KAAKwG,YAAYjC,OAASvE,KAAKyG,kBAEtEG,K,wBAGX,WACI,OAAG5G,KAAKwG,YAAYjC,OAAO,EAAIvE,KAAK0G,YAChC1G,KAAK0G,aACE1G,KAAKwG,YAAYxG,KAAKwG,YAAYjC,OAASvE,KAAK0G,WAAa,IAE5D,O,wBAGhB,WACI,OAAG1G,KAAK0G,WAAa,GACjB1G,KAAK0G,aACE1G,KAAKwG,YAAYxG,KAAKwG,YAAYjC,OAASvE,KAAK0G,WAAa,IAE5D,S,KAOdI,E,WACF,aAAe,oBACX9G,KAAK+G,aAAe,KACpB/G,KAAKgH,SAAW,K,iDAGpB,SAAcC,GACNC,YACJlH,KAAKmH,gBAAkBF,EACvBjH,KAAK+G,aAAeG,UAAUE,KAAK,WAAY,GAC/CpH,KAAK+G,aAAaM,gBAAkBrH,KAAKsH,wBAAwBC,KAAKvH,MACtEA,KAAK+G,aAAaE,UAAYjH,KAAKwH,oBAAoBD,KAAKvH,MAC5DA,KAAK+G,aAAaU,QAAUzH,KAAK0H,kBAAkBH,KAAKvH,S,qCAG5D,SAAwB2H,GAEpB,OADA3H,KAAKgH,SAAWhH,KAAK+G,aAAaa,OAC3BD,EAAME,YACb,KAAK,EAAG7H,KAAK8H,0B,kCAWjB,WACI9H,KAAKgH,SAASe,kBAAkB,YAAa,CAACC,QAAS,aACvDhI,KAAKgH,SAASe,kBAAkB,qBAAsB,CAACC,QAAS,e,+BAGpE,SAAkBL,GAEd3H,KAAK+G,aAAe,O,iCAGxB,SAAoBY,GAChB3H,KAAKgH,SAAWhH,KAAK+G,aAAaa,OAClC5H,KAAK+G,aAAe,KACpB/G,KAAKgH,SAASiB,gBAAkB,WAC5BjI,KAAKgH,SAASkB,QACdlI,KAAKgH,SAAW,KAChBmB,MAAM,2DAEPnI,KAAKmH,iBAAiBnH,KAAKmH,oB,gCAGlC,SAAmBiB,GACf,OAAOpI,KAAKgH,SAASqB,YACjB,CAAC,YAAa,sBACdD,EAAY,YAAc,c,+BAGlC,SAAkBE,GACd,IAAMzD,EAAKyD,EAASC,WAAW,kBAAmB,IAAIC,OACtD,OAAsB,IAAd3D,EAAGN,QAAgBM,EAAGN,OAAS,IAAO,KAAOM,I,wBAGzD,SAAWyD,EAAUrB,EAAWQ,GAC5B,IAAIzH,KAAKgH,SAAU,OAAOS,IAC1B,IAEIgB,EAFczI,KAAK0I,oBAAmB,GACTC,YAAY,aAChBC,IAAIN,GACjCG,EAAQxB,UAAY,WAIhB,GADawB,EAAQb,OACZ,CACL,IAAMvB,EAAYR,EAAS9B,UAAU0E,EAAQb,QAC7CX,EAAUqB,EAAUjC,QAGpBoB,EAAQa,EAAU,QAE1BG,EAAQhB,QAAU,WACdA,EAAQa,EAAU,U,wBAI1B,SAAWjC,EAAWiC,EAAUrB,EAAWQ,GACvC,IAAIzH,KAAKgH,SAAU,OAAOS,IAC1B,IAAIoB,EAAkBxC,EAAU7C,UAChCqF,EAAgBP,SAAWA,EAK3B,IAEMQ,EAAgB,CAClBR,SAAUA,EACVS,SAJazF,KAAKC,UAAUsF,GAAiBtE,OAK7CyE,YAAa,GACbC,iBAAkB5C,EAAUvI,MAAMoL,QAClCC,oBAAqB9C,EAAU3E,SAAS0H,MAAM7E,OAC9C8E,UAAW,IAAIC,MAGfjB,EAAcrI,KAAK0I,oBAAmB,GAC1CL,EAAYM,YAAY,aAAaY,IAAIV,GACzCR,EAAYM,YAAY,sBAAsBY,IAAIT,GAC/C7B,IAAWoB,EAAYmB,WAAavC,GACpCQ,IAASY,EAAYoB,QAAUhC,K,0BAGtC,SAAaa,EAAUrB,EAAWQ,GAC9B,IAAIzH,KAAKgH,SAAU,OAAOS,IAC1B,IAAIY,EAAcrI,KAAK0I,oBAAmB,GAC1CL,EAAYM,YAAY,aAAae,OAAOpB,GAC5CD,EAAYM,YAAY,sBAAsBe,OAAOpB,GAClDrB,IAAWoB,EAAYmB,WAAavC,GACpCQ,IAASY,EAAYoB,QAAUhC,K,6BAGtC,SAAgBR,EAAWQ,GACvB,IAAIzH,KAAKgH,SAAU,OAAOS,IAC1B,IACIgB,EADczI,KAAK0I,oBAAmB,GAChBC,YAAY,sBAAsBgB,SAC5DlB,EAAQxB,UAAY,WAChBwB,EAAQb,OAAO/D,SAAQ,SAAA+F,GAEnB,IAAMC,EAAWP,KAAKtF,MAAM4F,EAAIP,WAChCO,EAAIP,UAAYQ,EAAW,IAAIP,KAAKO,GAAY,QAEpD5C,EAAUwB,EAAQb,SAEtBa,EAAQhB,QAAUA,I,iCAKtB,SAAoBqC,EAAcC,EAAYtC,GAC1C,IAAIzH,KAAKgH,SAAU,OAAOS,IAC1B,IACIuC,EADchK,KAAK0I,oBAAmB,GACjBC,YAAY,aAAasB,aAClDD,EAAO/C,UAAY,SAACU,GAChB,IAAMuC,EAAIvC,EAAMwC,OAAOvC,OACpBsC,GACCJ,EAAaI,EAAEE,OACfF,EAAEG,YAGFN,KAERC,EAAOvC,QAAUA,M,KAMnB6C,E,WACF,aAAe,oBAQXtK,KAAK4G,MAAQ,OAEb5G,KAAKuK,iBAAmB,KAGxBvK,KAAKwK,aAAe,EAGpBxK,KAAKyK,aAAe,EACpBzK,KAAK0K,cAAgB,KAGrB1K,KAAK2K,aAAe,KAGpB3K,KAAK4K,qBAAuB,KAG5B5K,KAAK6K,wBAAyB,EAG9B7K,KAAK8K,cAAgB,K,iDAIzB,WACI,OAAO9K,KAAK4G,OACZ,IAAK,OAAQ,OAAO5G,KAAK2K,aAAe,iBAAmB,6BAC3D,IAAK,QAAS,MAAO,UAAY3K,KAAK0K,cACtC,IAAK,UAAW,MAAO,wBACvB,IAAK,UAAW,MAAO,uBACvB,IAAK,YAAa,MAAO,oBACzB,IAAK,YAAa,MAAO,wBAA0B1K,KAAKwK,aAAe,UACvE,QAAS,MAAO,S,gCAIpB,WACI,MAAsB,SAAfxK,KAAK4G,OAAoB5G,KAAK2K,e,wCAGzC,WACI,IAAMI,EAAO,IAAIzB,KACjB,MAAO,CACH,YAAayB,EAAKC,cAAcC,WAAY,IAC5CF,EAAKG,eAAe,UAAW,CAACC,MAAO,UAAUC,cACjD,IAAKL,EAAKM,UAAUJ,WAAWK,SAAS,EAAG,KAAM,QACnDtG,KAAK,M,0BAGX,SAAauG,GACTvL,KAAK4G,MAAQ2E,EACVvL,KAAK8K,eACJ9K,KAAK8K,cAAc9K,Q,6BAG3B,WAAmB,IAAD,OACVuK,EAAmBvK,KAAKuK,iBAC5BvK,KAAKwL,IAAM,IAAIC,IACflB,EAAiBmB,qBACb,SAAC9B,GAAD,OAAS,EAAK+B,yBAAyB/B,MACvC,kBAAM,EAAKgC,uBACX,WACI,EAAKlB,cAAgB,0CACrB,EAAKmB,aAAa,YAE1B7L,KAAK6L,aAAa,a,sCAGtB,SAAyBlI,GACrB3D,KAAKwL,IAAIM,KAAKnI,EAAK2E,SAAW,QAAShF,KAAKC,UAAUI,M,+BAG1D,WAAqB,IAAD,OAChB3D,KAAK6L,aAAa,WAClB7L,KAAKwL,IAAIO,cAAc,CAACC,KAAM,SAASC,MAAK,SAAAC,GACxC,EAAKC,qBAAqBD,Q,gCAIlC,WACOlM,KAAK2K,eACJyB,IAAIC,gBAAgBrM,KAAK2K,cACzB3K,KAAK2K,aAAe,Q,kCAI5B,SAAqBuB,GACjBlM,KAAKsM,qBACLtM,KAAK2K,aAAeyB,IAAIG,gBAAgBL,GACxClM,KAAKwL,IAAM,KACXxL,KAAK6L,aAAa,U,6BAItB,SAAgBW,GAAU,IAAD,OAGrB,GAFAxM,KAAKsM,qBACLtM,KAAK4K,qBAAuB,KACR,oBAAjB4B,EAAQR,KAAX,CAIAhM,KAAK6L,aAAa,aAClB,IAAIY,EAAS,IAAIC,WACjBD,EAAOE,iBACH,QACA,SAAAhF,GAAK,OAAI,EAAKiF,sBAAsBjF,EAAMwC,OAAOvC,WACrD6E,EAAOI,kBAAkBL,QARrBrE,MAAM,wC,mCAWd,SAAsB2E,GAAO,IAAD,OACxB9M,KAAKwK,aAAe,EACpBxK,KAAKyK,aAAe,EACpBzK,KAAK0K,cAAgB,KACrB1K,KAAK6L,aAAa,aAClBJ,IAAMsB,UAAUD,GAAMb,MAAK,SAAAO,GACvB,IAAIQ,EAAW,GADmB,WAE1B1E,GACJ,IAAMwD,EAAOU,EAAQ5O,MAAM0K,GACxBA,EAAS2E,SAAS,SACjBD,EAASxI,KACLsH,EAAKoB,MAAM,UAAUjB,MACjB,SAAAkB,GAAO,OAAI,EAAKC,YAAYtB,EAAKuB,KAAK3H,MAAM,EAAGoG,EAAKuB,KAAK9I,OAAO,GAAI4I,QAG5E,EAAKzC,cAAgB,gCAAkCpC,EACvD,EAAKmC,iBATb,IAAI,IAAInC,KAAYkE,EAAQ5O,MAAQ,EAA5B0K,GAYRgF,QAAQC,IAAIP,GAAUf,MAClB,WACO,EAAKxB,aAAe,EACnB,EAAKG,qBAAuB,uBAAyB,EAAKF,cAE1D,EAAKE,qBAAuB,yBAA2B,EAAKJ,aAAe,aAAqC,IAAtB,EAAKA,aAAqB,GAAK,KAC7H,EAAKqB,aAAa,QAClB,EAAKhB,wBAAyB,U,yBAK9C,SAAYvC,EAAU6E,GAClB,IACIK,EAAQnH,EADRkE,EAAmBvK,KAAKuK,iBAE5B,IACIiD,EAASlK,KAAKU,MAAMmJ,GACpB9G,EAAYR,EAAS9B,UAAUyJ,GACjC,MAAMC,GAGJ,OAFAzN,KAAK0K,cAAgB,uCAAyCpC,OAC9DtI,KAAKyK,eAGTF,EAAiBmD,WAAWrH,EAAWiC,GACvCtI,KAAKwK,eACLxK,KAAK6L,aAAa,iB,KAKpB8B,E,WACF,WAAYC,EAAWC,EAAmBC,GAAmB,oBACzD9N,KAAK4N,UAAYA,EACjB5N,KAAK6N,kBAAoBA,EACzB7N,KAAK8N,iBAAmBA,EACxB9N,KAAK+N,aAAc,E,kDAGvB,SAAeC,EAAOC,GAClBjO,KAAK4N,UAAUM,MAAK,SAACC,EAAGC,GACpB,IAAMC,EAAUF,EAAEH,GAAQM,EAAUF,EAAEJ,GACtC,OAAQC,EAAY,GAAK,IAAII,IAAYC,EAAU,EAAKD,EAAUC,GAAW,EAAI,Q,sCAQzF,SAAyBC,GAAW,IAAD,OAC/B,GAAGvO,KAAK+N,cAAgB/N,KAAK4N,UACzB,OAAOW,EACXA,EAAWA,EAASC,QAAQ,QAAS,IACrC,IAJ+B,eAIvBC,GACJ,IAAMC,EAAYH,EAAW,IAAME,EACnC,IAAI,EAAKb,UAAUe,MAAK,SAAA7C,GAAI,OAAIA,EAAKxD,WAAaoG,KAC9C,MAAM,CAAN,EAAOA,IAHPD,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAAC,IAAD,IAAtBA,GAAsB,kCAK9B,OAAOF,EAAW,a,oCAItB,SAAuBjG,EAAUsG,GAC7B,GAAG5O,KAAK+N,cAAgB/N,KAAK4N,UAAW,OAAO,KAC/C,IAAIiB,EAAe,KACfjB,EAAY5N,KAAK4N,UAWrB,OAVAA,EAAU/J,SAAQ,SAACiL,EAAGC,GAClB,GAAGD,EAAExG,WAAaA,EAAU,CACxB,IAAI0G,EAAYD,EAAMH,EACnBI,EAAY,IAAGA,EAAY,GAC3BA,GAAapB,EAAUrJ,SAAQyK,EAAYpB,EAAUrJ,OAAO,GAC/DsK,EAAejB,EAAUoB,GAAW1G,cAGxCuG,GAAgBjB,EAAUrJ,OAAS,IACnCsK,EAAejB,EAAU,GAAGtF,UACzBuG,M,KAMTI,E,yFA8GF,WAAc,MAAO,Q,sBAErB,WACI,IAAIC,EAAU,IAAIhL,EAElB,OADAlE,KAAK0E,WAAWwK,GACTA,EAAQC,oB,wBAGnB,SAAWD,GAAWA,EAAQ7K,KAAK,a,uBAGnC,WAAc,MAAO,K,qBAGrB,WAAW,IAAD,OACFV,EAAO,CAAEyL,UAAWpP,KAAKoP,aAiB7B,OAhBApP,KAAKqP,YAAYxL,SAAQ,SAAAyL,GACrB,IACIlF,EADEmF,EAAM,EAAKD,GAGblF,EADO,OAARmF,QAAwBC,IAARD,EACP,KACY,kBAATA,GAAqBA,aAAeN,EACvCM,EAAI/L,UACQ,kBAAT+L,EAGHA,EAAIE,KAAI,SAAAzM,GAAG,OAAIA,EAAIQ,aAGnB+L,EACZ5L,EAAK2L,GAAYlF,KAEdzG,I,qBAGX,WAAY,MAAO,OAAS3D,KAAK0P,WAAa,S,mBAK9C,SAAM7K,GAAMA,EAAG7E,Q,wBAGf,WACI,IAAI2P,EAAQ,KAKZ,OAJA3P,KAAK4P,OAAM,SAAAnL,GACiB,UAArBA,EAAK2K,aAA4BO,IAChCA,EAAQlL,MAETkL,I,6BAIX,SAAgBE,EAAUC,GACtB,OAAG9P,OAAS6P,EACDC,EAEA9P,O,qBAIf,WAAY,OAAO,IAAI+P,EAAY,aAAc,CAAC/P,S,kCAElD,SAAqBsF,GAAgB,OAAO,K,wBA5K5C,SAAiB3B,GACb,OAAOA,EAAKyL,WACZ,IAAK,UACD,OAAO,IAAIW,EAAYpM,EAAK2B,aAActF,KAAKgQ,MAAMrM,EAAKsM,eAAgBtM,EAAKuM,SACnF,IAAK,SACD,OAAO,IAAIC,EAAWnQ,KAAKoQ,MAAMzM,EAAK0M,WAAYrQ,KAAKoQ,MAAMzM,EAAK2M,cACtE,IAAK,QACD,OAAO,IAAIC,EACPvQ,KAAKoQ,MAAMzM,EAAK6M,eAAgBxQ,KAAKoQ,MAAMzM,EAAK8M,WAChDzQ,KAAKoQ,MAAMzM,EAAK+M,YAAa/M,EAAKgN,OAAS,MACnD,IAAK,QACD,OAAO,IAAIC,EACf,IAAK,OACD,OAAO,IAAIC,EAASlN,EAAKU,MAC7B,IAAK,WACD,OAAO,IAAIyM,EAAa9Q,KAAKgQ,MAAMrM,EAAKoN,QAC5C,IAAK,YACD,OAAO,IAAIC,EACPrN,EAAKsN,UAAWtN,EAAKuN,WAAYvN,EAAKwN,YACtCnR,KAAKgQ,MAAMrM,EAAKyN,cACxB,IAAK,uBACD,OAAO,IAAIC,EACPrR,KAAKoQ,MAAMzM,EAAK0M,WAChBrQ,KAAKoQ,MAAMzM,EAAK2N,gBAChBtR,KAAKoQ,MAAMzM,EAAK4N,mBACxB,IAAK,QACD,OAAO,IAAIC,EACP7N,EAAK8N,WAAY9N,EAAK+N,UAAW/N,EAAKgO,aAAc3R,KAAK4R,QAAQjO,EAAKkO,eACtElO,EAAKmO,eAAgBnO,EAAKoO,mBAClC,QACI,OAAO,IAAIlB,EAAS,qBAAuBlN,EAAKyL,c,mBAKxD,SAAazL,GAAQ,OAAOA,EAAOsL,EAAKlL,UAAUJ,GAAQ,O,mBAC1D,SAAaqO,GAAc,OAAOA,EAAWvC,KAAI,SAAAwC,GAAS,OAAIhD,EAAKlL,UAAUkO,Q,qBAC7E,SAAeD,GAAc,OAAOA,EAAWvC,KAAI,SAAAyC,GAAS,OAAIjD,EAAKe,MAAMkC,Q,0BAI3E,SAAoBjP,EAAMkP,GACtB,IAAMlB,EAAYhO,EAAKmM,YAAa8B,EAAaiB,EAAM/C,YACvD,MAAiB,aAAd6B,GAA2C,aAAfC,EACpB,IAAIJ,EAAa7N,EAAK8N,MAAMqB,OAAOD,EAAMpB,QAC9B,SAAdE,GAAuC,SAAfC,EACrB,IAAIL,EAAS5N,EAAKoB,KAAO8N,EAAM9N,MACpB,aAAd4M,GAA2C,SAAfC,GACoB,SAAhDjO,EAAK8N,MAAM9N,EAAK8N,MAAMxM,OAAO,GAAG6K,YAE7B,IAAI0B,EACP7N,EAAK8N,MAAMrL,MAAM,GAAI,GAAG0M,OAAO,CAC3B,IAAIvB,EAAS5N,EAAK8N,MAAM9N,EAAK8N,MAAMxM,OAAO,GAAGF,KAAO8N,EAAM9N,SAGhD,SAAd4M,GAAuC,SAAfC,GACO,SAA/BiB,EAAMpB,MAAM,GAAG3B,YAEZ,IAAI0B,EACP,CAAC,IAAID,EAAS5N,EAAKoB,KAAO8N,EAAMpB,MAAM,GAAG1M,OACvC+N,OAAOD,EAAMpB,MAAMrL,MAAM,KAEb,aAAduL,EAEG,IAAIH,EAAa7N,EAAK8N,MAAMqB,OAAO,CAACD,KAExB,aAAfjB,EAEG,IAAIJ,EAAa,CAAC7N,GAAMmP,OAAOD,EAAMpB,QAE1B,YAAdE,GAA0C,YAAfC,EACxBjC,EAAKoD,qBAAqBpP,EAAMkP,GACpB,WAAfjB,EAEG,IAAIX,EAAU4B,EAAM7B,YAAarN,EAAMkP,EAAM9B,WAG7C,IAAIS,EAAa,CAAC7N,EAAMkP,M,kCAIvC,SAA4BlP,EAAMkP,GAC9B,IAAMG,EAAYrP,EAAKqC,aAAciN,EAAaJ,EAAM7M,aAK/D,GAAiB,eAAdgN,GAA6C,eAAfC,GACL,IAAzBtP,EAAKuP,iBAAmD,IAA1BL,EAAMK,gBACnC,OAAO,IAAI1B,EACd,CAAC7N,EAAKgN,cAAc,GAAIkC,EAAMlC,cAAc,KACvCwC,UAIC,IAAIC,EAAmB,KAOvB,MANiB,QAAdJ,GAAsC,QAAfC,IAAsBG,EAAmB,QAClD,SAAdJ,GAAuC,QAAfC,IAAsBG,EAAmB,SACnD,QAAdJ,GAAsC,SAAfC,IAAuBG,EAAmB,SACnD,SAAdJ,GAAuC,SAAfC,IAAuBG,EAAmB,SACpD,UAAdJ,GAAwC,SAAfC,IAAuBG,EAAmB,UACrD,SAAdJ,GAAuC,UAAfC,IAAwBG,EAAmB,UACnEA,EACQ,IAAI3C,EAAY2C,GAGpB,IAAI5B,EAAa,CAAC7N,EAAMkP,Q,KAuEjCpC,E,kDAOF,WAAYzK,EAAc2K,EAAeC,GAAU,IAAD,EAE9C,GAF8C,oBAC9C,eACG5K,EAAa2H,SAAS,KAAM,CAC3B,IAAM8B,EAAQzJ,EAAaqN,QAAQ,KACnC,EAAKrN,aAAeA,EAAaI,MAAM,EAAGqJ,GAC1C,EAAKmB,QAAU5K,EAAaI,MAAMqJ,EAAM,EAAGzJ,EAAaf,OAAO,QAG/D,EAAKe,aAAeA,EACpB,EAAK4K,aAAsBV,IAAZU,EAAwB,KAAOA,EATJ,OAW9C,EAAKD,cAAgBA,GAAiB,GAXQ,E,iDAclD,WAAkB,OAAOjQ,KAAKiQ,cAAc1L,S,uBAC5C,WAAc,MAAO,Y,uBACrB,WAAc,MAAO,CAAC,eAAgB,gBAAiB,a,wBAEvD,SAAW2K,GACPA,EAAQzJ,QAAQzF,KAAKsF,aAActF,KAAKkQ,SAExClQ,KAAKiQ,cAAcpM,SAAQ,SAAA+O,GAAY,OAAI1D,EAAQ2D,aAAaD,EAAc,c,mBAGlF,SAAM/N,GACFA,EAAG7E,MACHA,KAAKiQ,cAAcpM,SAAQ,SAAA+O,GAAY,OAAIA,EAAahD,MAAM/K,Q,6BAGlE,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIC,EACP/P,KAAKsF,aACLtF,KAAKiQ,cAAcR,KAAI,SAAAmD,GAAY,OAAIA,EAAaE,gBAAgBjD,EAAUC,MAC9E9P,KAAKkQ,W,qBAMb,WACI,MAAyB,eAAtBlQ,KAAKsF,aACGtF,KACmB,WAAtBA,KAAKsF,aAEmB,IAAzBtF,KAAKwS,gBACG,IAAIzC,EAAY,OAAQ/P,KAAKiQ,eAE7BjQ,KAEe,WAAtBA,KAAKsF,aAOmB,IAAzBtF,KAAKwS,gBACG,IAAIzC,EAAY,MAAO,CAAC/P,OAExBA,KAGX,kE,kCAGR,SAAqBsF,GACjB,OAAOtF,KAAKsF,eAAiBA,M,GA1EX2J,GAgFpBkB,E,kDACF,WAAYE,EAAWC,GAAc,IAAD,8BAChC,gBACKD,UAAYA,EACjB,EAAKC,YAAcA,EAHa,E,6CAMpC,WAAc,MAAO,W,uBAErB,WAAc,MAAO,CAAC,YAAa,iB,wBAEnC,SAAWpB,GACPA,EAAQzK,KAAKzE,KAAKsQ,aAClBpB,EAAQzK,KAAKzE,KAAKqQ,a,mBAGtB,SAAMxL,GACF7E,KAAKsQ,YAAYV,MAAM/K,GACvBA,EAAG7E,MACHA,KAAKqQ,UAAUT,MAAM/K,K,6BAGzB,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIK,EACPnQ,KAAKqQ,UAAUyC,gBAAgBjD,EAAUC,GACzC9P,KAAKsQ,YAAYwC,gBAAgBjD,EAAUC,Q,GA1B9Bb,GAkCnBsB,E,kDAGF,WAAYC,EAAeC,EAAWC,EAAYC,GAAQ,IAAD,8BACrD,gBACKH,cAAgBA,EACrB,EAAKC,UAAYA,EACjB,EAAKC,WAAaA,EAClB,EAAKC,MAAQA,GAAS,KAL+B,E,6CAQzD,WAAc,MAAO,U,uBAErB,WAAc,MAAO,CAAC,gBAAiB,YAAa,aAAc,W,2BAIlE,WACI,IAAMoC,EAAU/S,KAAKwQ,cACrB,MAA2B,YAAxBuC,EAAQ3D,aAAyD,IAA5B2D,EAAQP,gBACrCO,EAAQzN,aACa,SAAxByN,EAAQ3D,YACL2D,EAAQ1O,KAER,O,wCAKf,WACI,IAAM2O,EAAKhT,KAAKiT,gBAChB,OAAOD,IAAc,MAAPA,GAAqB,MAAPA,K,wBAGhC,SAAW9D,GACPA,EAAQzK,KAAKzE,KAAKyQ,WACA,WAAfzQ,KAAK2Q,QACJzB,EAAQzJ,QAAQ,MAChByJ,EAAQzJ,QAAQ,UAEpByJ,EAAQzK,KAAKzE,KAAKwQ,eACA,UAAfxQ,KAAK2Q,QACJzB,EAAQzJ,QAAQ,MAChByJ,EAAQzJ,QAAQ,UAEpByJ,EAAQzK,KAAKzE,KAAK0Q,c,mBAGtB,SAAM7L,GACF7E,KAAKyQ,UAAUb,MAAM/K,GACrB7E,KAAKwQ,cAAcZ,MAAM/K,GACzBA,EAAG7E,MACHA,KAAK0Q,WAAWd,MAAM/K,K,6BAG1B,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIS,EACPvQ,KAAKwQ,cAAcsC,gBAAgBjD,EAAUC,GAC7C9P,KAAKyQ,UAAUqC,gBAAgBjD,EAAUC,GACzC9P,KAAK0Q,WAAWoC,gBAAgBjD,EAAUC,GAC1C9P,KAAK2Q,S,6BAIb,SAAgBuC,GACZ,OAAO,IAAI3C,EACPvQ,KAAKwQ,cAAexQ,KAAKyQ,UAAWzQ,KAAK0Q,WAAYwC,O,GAnEzCjE,GAyElB2B,E,+JACF,WAAc,MAAO,U,uBACrB,WAAc,MAAO,K,wBAErB,SAAW1B,GACP,IAAMzK,EAAO,IAAIsL,EAAY,YAAa,CACtC,IAAIc,EAAS,cAAe,IAAIA,EAAS,mBAC7C3B,EAAQzK,KAAKA,O,GAPGwK,GAalB4B,E,kDACF,WAAYxM,GAAO,IAAD,8BACd,gBACKA,KAAOA,EAFE,E,6CAKlB,WAAc,MAAO,S,uBACrB,WAAc,MAAO,CAAC,U,wBAEtB,SAAW6K,GAAWA,EAAQ7K,KAAKrE,KAAKqE,U,GATrB4K,GAejB6B,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,gBACKA,MAAQA,EAFE,E,6CAKnB,WAAc,MAAO,a,uBACrB,WAAc,MAAO,CAAC,W,wBAEtB,SAAW7B,GASP,IAAMiE,EAA8B,CAAC,MAAO,OAAQ,SAAU,UAC1DC,GAAoB,EACxBpT,KAAK+Q,MAAMlN,SAAQ,SAAAY,GACZ2O,GAAqB3O,EAAK4O,qBAAqB,aAC9CnE,EAAQzJ,QAAQ,KACpByJ,EAAQzK,KAAKA,GACb2O,EAAoBD,EAA4BxE,MAAK,SAAAqE,GAAE,OAAIvO,EAAK4O,qBAAqBL,W,mBAI7F,SAAMnO,GACFA,EAAG7E,MACHA,KAAK+Q,MAAMlN,SAAQ,SAAAY,GAAI,OAAIA,EAAKmL,MAAM/K,Q,6BAG1C,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIgB,EACP9Q,KAAK+Q,MAAMtB,KAAI,SAAAhL,GAAI,OAAIA,EAAKqO,gBAAgBjD,EAAUC,W,GApCvCb,GA6CrB+B,E,kDAuCF,WAAYC,EAAWC,EAAYC,EAAaC,GAAc,IAAD,8BACzD,gBACKH,UAAYA,EACjB,EAAKC,WAAaA,EAClB,EAAKC,YAAcA,GAAe,KAClC,EAAKC,YAAcA,GAAe,GALuB,E,6CAQ7D,WAAc,MAAO,c,uBACrB,WAAc,MAAO,CAAC,YAAa,aAAc,cAAe,iB,wBAEhE,SAAWlC,GAAU,IAAD,OAChBA,EAAQzJ,QAAQ,QAChByJ,EAAQoE,gBAAgBtT,KAAKiR,WAC7BjR,KAAKoR,YAAYvN,SAAQ,SAACY,EAAMsK,GACzBA,EAAQ,IACPG,EAAQzJ,QAAQ,UAChByJ,EAAQoE,gBAAgB,EAAKnC,aAAe,MAEhDjC,EAAQzK,KAAKA,MAEjByK,EAAQzJ,QAAQ,SAChByJ,EAAQoE,gBAAgBtT,KAAKkR,c,mBAGjC,SAAMrM,GACFA,EAAG7E,MACHA,KAAKoR,YAAYvN,SAAQ,SAAAY,GAAI,OAAIA,EAAKmL,MAAM/K,Q,6BAGhD,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIkB,EACPhR,KAAKiR,UAAWjR,KAAKkR,WAAYlR,KAAKmR,YACtCnR,KAAKoR,YAAY3B,KAAI,SAAAhL,GAAI,OAAIA,EAAKqO,gBAAgBjD,EAAUC,U,2BAxEpE,SAAoBrL,GAChB,OAAO,IAAIuM,EAAc,IAAK,IAAK,KAAM,CAACvM,M,8BAI9C,SAAwBA,GACpB,MAAwB,UAArBA,EAAK2K,aAA2B3K,EAAK8O,6BAC7BvC,EAAcwC,aAAa/O,GAE3BA,I,mCAOf,SAA6BA,GAgBzB,MAb0B,YAArBA,EAAK2K,aACiB,SAAtB3K,EAAKa,cACoB,IAAzBb,EAAK+N,iBAGgB,UAArB/N,EAAK2K,aAAoD,MAAzB3K,EAAKwO,iBAGhB,cAArBxO,EAAK2K,aACc,MAAnB3K,EAAKwM,WACgB,MAArBxM,EAAK0M,aACe,MAApB1M,EAAKyM,WAGCF,EAAcwC,aAAa/O,GAE3BA,M,GApCSwK,GA+EtBoC,E,kDACF,WAAYhB,EAAWiB,EAAgBC,GAAmB,IAAD,8BACrD,gBACKlB,UAAYA,EACjB,EAAKiB,eAAiBA,EACtB,EAAKC,iBAAmBA,EAJ6B,E,6CAOzD,WAAc,MAAO,yB,uBACrB,WAAc,MAAO,CAAC,YAAa,iBAAkB,sB,wBAErD,SAAWrC,GAI2B,YAA/BlP,KAAKqQ,UAAUjB,YACdF,EAAQzK,KAAKzE,KAAKqQ,WAElBnB,EAAQ2D,aAAa7S,KAAKqQ,WAC3BrQ,KAAKsR,iBACJpC,EAAQ7K,KAAK,KAIb6K,EAAQ2D,aAAa7S,KAAKsR,eAAgB,mBAE3CtR,KAAKuR,mBACJrC,EAAQ7K,KAAK,KACb6K,EAAQ2D,aAAa7S,KAAKuR,iBAAkB,qB,mBAIpD,SAAM1M,GACFA,EAAG7E,MACHA,KAAKqQ,UAAUT,MAAM/K,GAClB7E,KAAKsR,gBAAgBtR,KAAKsR,eAAe1B,MAAM/K,GAC/C7E,KAAKuR,kBAAkBvR,KAAKuR,iBAAiB3B,MAAM/K,K,6BAG1D,SAAgBgL,EAAUC,GACtB,OAAG9P,OAAS6P,EAAiBC,EACtB,IAAIuB,EACPrR,KAAKqQ,UAAUyC,gBAAgBjD,EAAUC,GACzC9P,KAAKsR,eAAiBtR,KAAKsR,eAAewB,gBAAgBjD,EAAUC,GAAY,KAChF9P,KAAKuR,iBAAmBvR,KAAKuR,iBAAiBuB,gBAAgBjD,EAAUC,GAAY,Q,kCAG5F,SAAqBxK,GACjB,OAAOtF,KAAKqQ,UAAUgD,qBAAqB/N,O,GAhDZ2J,GAsDjCuC,E,kDA8DF,WAAYC,EAAYC,EAAWC,EAAcE,EACrCC,EAAgBC,GAAoB,IAAD,8BAC3C,gBACKN,WAAaA,EAClB,EAAKC,UAAYA,EACjB,EAAKC,aAAeA,EACpB,EAAKE,cAAgBA,EACrB,EAAKC,eAAiBA,GAAkB,IAAI2B,MAAM/B,EAAU,GAAGgC,KAAK,MACpE,EAAK3B,kBAAoBA,GAAqB,IAAI0B,MAAM9B,EAAa,GAAG+B,KAAK,MAPlC,E,6CAU/C,WAAc,MAAO,U,uBACrB,WAAc,MAAO,CAAC,aAAc,YAAa,kB,uBAEjD,WACI,IAAMC,EAAI3T,KAAKyR,WAEf,MAAc,YAANkC,GAAyB,YAANA,GAAyB,WAANA,GAChC,YAANA,GAAyB,YAANA,GAAyB,YAANA,I,6BAKlD,SAAgBC,GACZ,OAAO,IAAIpC,EACPoC,EAAgB5T,KAAK0R,UAAW1R,KAAK2R,aACrC3R,KAAK6R,cAAe7R,KAAK8R,eAAgB9R,KAAK+R,qB,qBAGtD,WACI,OAAO,IAAIP,EACPxR,KAAKyR,WACLzR,KAAK0R,UACL1R,KAAK2R,aACL3R,KAAK6R,cAAcpC,KAAI,SAAAyC,GAAS,OAC5BA,EAAUzC,KAAI,SAAAhL,GAAI,OAAIA,EAAKgO,gBAC/BzS,KAAK8R,eACL9R,KAAK+R,qB,qBAGb,WACI,IAAIpO,EAAI,gEAQR,OAPAA,EAAKkO,cAAgB7R,KAAK6R,cAAcpC,KACpC,SAAAyC,GAAS,OAAIA,EAAUzC,KAAI,SAAAhL,GAAI,OAAIA,EAAKjB,gBAExCxD,KAAK8R,eAAe+B,OAAM,SAAA5P,GAAC,OAAU,OAANA,OAC/BN,EAAKmO,eAAiB9R,KAAK8R,gBAC3B9R,KAAK+R,kBAAkB8B,OAAM,SAAA5P,GAAC,OAAU,OAANA,OAClCN,EAAKoO,kBAAoB/R,KAAK+R,mBAC3BpO,I,2BAQX,WAAiB,IAGTmQ,EAHQ,OACNC,EAAY,SAAC5G,GAAD,OAAa,IAAI0D,EAAS1D,IACxC6G,EAAgBhU,KAAK0R,UAAWuC,EAAmBjU,KAAK2R,aAY5D,GAVG3R,KAAK2R,aAAe,GACnBmC,EAAoB9T,KAAK6R,cAAcpC,KAAI,SAACyC,EAAWnD,GAAZ,4BACpCmD,EAAUxM,MAAM,GAAI,IADgB,CAEvCqO,EAAqB,IAAVhF,GAAeA,IAAU,EAAK2C,UAAU,EAAK,UAAY,IACpEQ,EAAU,EAAKP,aAAa,QAEhCsC,KAGAH,EAAiB,YAAO9T,KAAK6R,eAC9B7R,KAAK0R,UAAY,EAAG,CAEnB,IADA,IAAIwC,EAAqB,CAACH,EAAU,YAC5BI,EAAI,EAAGA,EAAInU,KAAK2R,aAAa,EAAGwC,IACpCD,EAAmB1P,KAAKuP,EAAU,KACnC/T,KAAK2R,aAAe,IACnBuC,EAAmB1P,KAAKuP,EAAU,YAClCG,EAAmB1P,KAAKuP,EAAU,aAEtCD,EAAkBM,OAAOpU,KAAK0R,UAAU,EAAG,EAAGwC,GAC9CF,IAGJ,OAAO,IAAIxC,EAAUxR,KAAKyR,WAAYuC,EAAeC,EAAkBH,K,wBAK3E,WAEI,IAFU,IAAD,OACLA,EAAoB,GADf,WAEDK,GACJL,EAAkBtP,KAAK,EAAKqN,cAAcpC,KACtC,SAAAyC,GAAS,OAAI,EAAKmC,gBAAgBnC,EAAUiC,SAF5CA,EAAI,EAAGA,EAAInU,KAAK2R,aAAcwC,IAAtC,EAAQA,GAGR,OAAO,IAAI3C,EACPxR,KAAKyR,WAAYzR,KAAK2R,aAAc3R,KAAK0R,UAAWoC,EACpD9T,KAAK+R,kBAAmB/R,KAAK8R,kB,6BAKrC,SAAgBwC,GACZ,GAA6B,SAA1BA,EAAUlF,YACT,OAAOkF,EAAUjQ,MACjB,IAAK,UAAW,OAAO,IAAIwM,EAAS,WACpC,IAAK,UAAW,OAAO,IAAIA,EAAS,WAIxC,OAAOyD,I,wBAIX,WAAc,IAAD,OACT,OAAOtU,KAAK6R,cAAcpC,KACtB,SAAAyC,GAAS,OAAI,IAAIV,EACb,EAAKC,WAAY,EAAG,EAAKE,aAAc,CAACO,GACxC,EAAKH,kBAAmB,W,4BASpC,SAAewC,EAAWxF,EAAO/C,EAAMwI,GACnC,IAAM1C,EAAc,YAAO9R,KAAK8R,gBAC1BC,EAAiB,YAAO/R,KAAK+R,mBAC7B0C,EAAaF,EAAYxC,EAAoBD,EAC7C4C,EAAOH,EAAYvU,KAAK2R,aAAe3R,KAAK0R,UAClD,GAAa,OAAV3C,EAAgB,CACZyF,GAAUC,EAAWZ,OAAM,SAAA5P,GAAC,OAAIA,IAAM+H,OACrCA,EAAO,MACX,IAAI,IAAImI,EAAI,EAAGA,EAAIO,EAAK,EAAGP,IACvBM,EAAWN,GAAKnI,MAEnB,CACD,GAAG+C,EAAQ,GAAKA,GAAS2F,EAAK,EAC1B,OAAO1U,KACRwU,GAAUC,EAAW1F,KAAW/C,IAC/BA,EAAO,MACXyI,EAAW1F,GAAS/C,EAExB,OAAO,IAAIwF,EACPxR,KAAKyR,WAAYzR,KAAK0R,UAAW1R,KAAK2R,aAAc3R,KAAK6R,cACzDC,EAAgBC,K,yCAUxB,SAA4B7C,GAAU,IAAD,OAE7ByF,EAAa,KAAMC,EAAc,KACrC,OAAO5U,KAAKyR,YACZ,IAAK,UAAWkD,EAAa,IAAKC,EAAc,IAAK,MACrD,IAAK,UAAWD,EAAa,MAAOC,EAAc,MAAO,MACzD,IAAK,SAAUD,EAAa,KAAMC,EAAc,KAAM,MACtD,IAAK,UAAWD,EAAa,IAAKC,EAAc,IAAK,MACrD,IAAK,UAAWD,EAAaC,EAAc,IAAK,MAChD,IAAK,UAAWD,EAAaC,EAAc,SAO3C,IADA,IAAIC,EAAS,CAAC,KACNV,EAAI,EAAGA,EAAInU,KAAK2R,aAAcwC,IAElC,GADAU,EAAOrQ,KAAK,KACT2P,EAAInU,KAAK2R,aAAa,EAAG,CACxB,IAAM1N,EAAIjE,KAAK+R,kBAAkBoC,GACxB,UAANlQ,EAAe4Q,EAAOrQ,KAAK,KAChB,WAANP,GAAgB4Q,EAAOrQ,KAAK,KAG5CqQ,EAAOrQ,KAAK,KACZ,IAAMsQ,EAAuBD,EAAO7P,KAAK,IAEtC2P,IACCzF,EAAQzJ,QAAQ,QAChByJ,EAAQoE,gBAAgBqB,IAE5B,IAAMI,GAAsB/U,KAAK8R,eAAe+B,OAAM,SAAA5P,GAAC,OAAU,OAANA,KACvD8Q,GACA7F,EAAQoE,gBAAgB,cAC5BpE,EAAQ8F,kBAAkB,QAASF,GACnC9U,KAAK6R,cAAchO,SAAQ,SAACqO,EAAW+C,GACnC,GAAGA,EAAY,EAAG,CACd/F,EAAQgG,gBACR,IAAMC,EAAY,EAAKrD,eAAemD,EAAU,GAC7CE,IACkB,UAAdA,EAAuBjG,EAAQzJ,QAAQ,SACpB,WAAd0P,GAAwBjG,EAAQzJ,QAAQ,aAChDyJ,EAAQ7K,KAAK,OAGrB6N,EAAUrO,SAAQ,SAACY,EAAM2Q,GAClBA,EAAY,GAAGlG,EAAQmG,kBACvB5Q,GAAMyK,EAAQzK,KAAKA,SAG9ByK,EAAQoG,gBAAgB,SACpBP,GACA7F,EAAQoE,gBAAgB,cACzBsB,IACC1F,EAAQzJ,QAAQ,SAChByJ,EAAQoE,gBAAgBsB,M,wBAIhC,SAAW1F,GAEP,GAAGlP,KAAKuV,eACHvV,KAAK+R,kBAAkB8B,OAAM,SAAA5P,GAAC,OAAU,OAANA,OAClCjE,KAAK8R,eAAe+B,OAAM,SAAA5P,GAAC,OAAU,OAANA,MAChC,OAAOjE,KAAKwV,4BAA4BtG,GAE5CA,EAAQ8F,kBAAkBhV,KAAKyR,YAC/BzR,KAAK6R,cAAchO,SAAQ,SAACqO,EAAW+C,GAChCA,EAAY,GACX/F,EAAQgG,gBACZhD,EAAUrO,SAAQ,SAACY,EAAM2Q,GAClBA,EAAY,GAAGlG,EAAQmG,kBACvB5Q,GAAMyK,EAAQzK,KAAKA,SAG9ByK,EAAQoG,gBAAgBtV,KAAKyR,c,mBAGjC,SAAM5M,GACFA,EAAG7E,MACHA,KAAK6R,cAAchO,SACf,SAAAqO,GAAS,OAAIA,EAAUrO,SAAQ,SAAAY,GAAI,OAAIA,EAAKmL,MAAM/K,W,6BAG1D,SAAgBgL,EAAUC,GACtB,GAAG9P,OAAS6P,EAAU,OAAOC,EAC7B,IAAMgE,EAAoB9T,KAAK6R,cAAcpC,KACzC,SAAAyC,GAAS,OAAIA,EAAUzC,KACnB,SAAAhL,GAAI,OAAIA,EAAKqO,gBAAgBjD,EAAUC,SAC/C,OAAO,IAAI0B,EACPxR,KAAKyR,WAAYzR,KAAK0R,UAAW1R,KAAK2R,aAAcmC,EACpD9T,KAAK8R,eAAgB9R,KAAK+R,sB,2BAjTlC,SAAoB0D,EAAOC,GACvB,OAAGD,EAAM9D,eAAiB+D,EAAM/D,aACrB,KACJ,IAAIH,EACPkE,EAAMjE,WACNgE,EAAM/D,UAAYgE,EAAMhE,UACxB+D,EAAM9D,aACN8D,EAAM5D,cAAcO,OAAOsD,EAAM7D,eACjC4D,EAAM3D,eAAeM,OAAO,CAAC,MAAOsD,EAAM5D,gBAC1C4D,EAAM3D,qB,4BASd,SAAsBhB,EAAO4E,GACzB,OAAO5E,EAAMtB,KAAI,SAAAhL,GAAI,OAAI+M,EAAUoE,YAAYnR,EAAMkR,Q,yBAIzD,SAAmBlR,EAAMkR,GACrB,OAAOA,GACP,IAAK,OACD,MAAO,CAAClR,GACZ,IAAK,QACD,MAAwB,UAArBA,EAAK2K,YACG,CAAC3K,EAAKgM,UAAW,IAAIN,EAAW1L,EAAKiM,WAAYjM,EAAK+L,gBAEtD,CAAC/L,EAAM,MACtB,IAAK,QACD,MAAwB,UAArBA,EAAK2K,aAAoD,MAAzB3K,EAAKwO,gBAC7B,CAACxO,EAAKgM,UAAWhM,EAAKiM,YAEtB,CAACjM,EAAM,MACtB,IAAK,WACD,MAAwB,UAArBA,EAAK2K,aAAoD,MAAzB3K,EAAKwO,gBAC7B,CACHxO,EAAKgM,UACLxB,EAAK4G,aACD5G,EAAK4G,aACD,IAAI9F,EAAY,SAAU,CAAC,IAAIc,EAAS,QACxC,IAAId,EAAY,WAAY,IAChCtL,EAAKiM,aAEN,CACHjM,EACA,IAAIsL,EAAY,SAAU,CAAC,IAAIc,EAAS,gBACpD,QACI,MAAO,CAACpM,Q,GAtDIwK,GA0TlB6G,E,WAuCF,aAAe,oBACX9V,KAAK+V,OAASD,EAAKE,c,6CAGvB,SAAUC,GAAU,OAAOA,EAAS,IAAMjW,KAAK+V,S,uBAG/C,WAAc,MAAO,Q,qBACrB,WAAY,MAAO,K,qBACnB,WAAY,MAAO,Q,mBAMnB,WAAU,OAAO,Q,0BAhDjB,WAAuB,OAAOD,EAAKI,kB,uBAEnC,SAAiBvS,GACb,OAAOA,EAAKwS,WACZ,IAAK,OACD,OAAO,IAAIC,EACPnH,EAAKlL,UAAUJ,EAAKc,MACpBd,EAAK0S,SAAWpH,EAAKlL,UAAUJ,EAAK0S,UAAY,MACxD,IAAK,OACD,OAAO,IAAInQ,EACPvC,EAAK2S,SAAS7G,KAAI,SAAA8G,GAAY,OAAIC,EAAgBzS,UAAUwS,QAC1D5S,EAAK8S,YACf,IAAK,YACD,OAAO,IAAIC,EAAc/S,EAAKgT,gBAClC,QACI,OAAOzQ,EAAS0Q,YAAY,qBAAuBjT,EAAKwS,gB,KAqCpEL,EAAKI,cAAgB,E,IAIfE,E,kDAEF,WAAY3R,EAAM4R,GAAW,IAAD,8BACxB,gBACK5R,KAAOA,EACZ,EAAK4R,SAAWA,EAHQ,E,6CAM5B,WAAc,MAAO,S,qBAErB,WACI,IAAI1S,EAAO,CAACwS,UAAW,OAAQ1R,KAAMzE,KAAKyE,KAAKjB,WAE/C,OADGxD,KAAKqW,WAAU1S,EAAK0S,SAAWrW,KAAKqW,SAAS7S,WACzCG,I,qBAGX,WAAY,OAAO3D,KAAKyE,KAAKoS,Y,mBAE7B,WAAU,OAAO,IAAIT,EAASpW,KAAKyE,KAAMzE,KAAKqW,Y,qBAE9C,WAAY,OAAO,IAAID,EAASpW,KAAKyE,KAAKgO,UAAWzS,KAAKqW,c,GApBvCP,GA0BjBY,E,kDACF,WAAYC,GAAiB,IAAD,8BACxB,gBACKA,eAAiBA,EAFE,E,6CAK5B,WAAc,MAAO,c,qBACrB,WAAY,MAAO,CAACR,UAAW,YAAaQ,eAAgB3W,KAAK2W,kB,qBACjE,WAAY,MAAO,W,mBACnB,WAAU,OAAO,IAAID,EAAc1W,KAAK2W,kB,qBACxC,WAAY,OAAO3W,KAAK8W,Y,GAVAhB,GAmBtBU,E,uFAUF,WAAY,OAAO,I,qBACnB,WAAY,OAAO,I,oBACnB,WAAW,OAAO,K,wBAXlB,SAAiB7S,GACb,OAAGA,EAAKc,KACG,IAAIsS,EAAoB9H,EAAKlL,UAAUJ,EAAKc,OAC/Cd,EAAKU,KACF,IAAI8B,EAAoBxC,EAAKU,OAAQV,EAAKqT,SAE1C,IAAIC,EAAmBtT,EAAKuT,S,KASzC/Q,E,kDAGF,WAAY9B,EAAM2S,GAAU,IAAD,8BACvB,gBACK3S,KAAOA,EACZ,EAAK2S,UAAYA,EAHM,E,2CAM3B,WAAY,OAAO,I,qBAEnB,WAAY,OAAO,IAAI7Q,EAAoBnG,KAAKqE,MAAM,K,qBAEtD,WACI,IAAIV,EAAO,CAAE,KAAQ3D,KAAKqE,MAE1B,OADGrE,KAAKgX,UAASrT,EAAKqT,SAAU,GACzBrT,I,qBAIX,WAAY,OAAO3D,KAAKqE,O,sBAExB,WAUI,IAFA,IAAMF,EAASnE,KAAKqE,KAAKsM,MAAM,MAC3BkE,EAAS,GACLV,EAAI,EAAGA,EAAIhQ,EAAOI,OAAQ4P,IAC9BU,EAAOrQ,KAAK,WACTxE,KAAKgX,SACJnC,EAAOrQ,KAAK,UAChBqQ,EAAOrQ,KAAKxE,KAAKmX,cAAchT,EAAOgQ,KACnCA,EAAIhQ,EAAOI,OAAO,GACjBsQ,EAAOrQ,KAAK,KAChBqQ,EAAOrQ,KAAK,kBAEhB,OAAOqQ,EAAO7P,KAAK,M,2BAKvB,SAAcX,GAIV,IAAM+S,EAAe,CACjB,EAAK,MACL,IAAK,gBACL,IAAK,MACL,EAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,gBACL,KAAM,oBAEV,OAAO/S,EAAKkE,WAAW,kBAAkB,SAAA8O,GAAK,OAAID,EAAaC,U,GA9DrCb,GAkE5BO,E,kDACF,WAAYtS,GAAO,IAAD,8BAAE,gBAAcA,KAAOA,EAAvB,E,2CAClB,WAAY,OAAO,I,qBACnB,WAAY,OAAO,IAAIsS,EAAoB/W,KAAKyE,KAAKgO,a,qBACrD,WAAY,MAAO,CAAE,KAAQzS,KAAKyE,KAAKjB,a,qBACvC,WAAY,MAAO,IAAMxD,KAAKyE,KAAKiL,WAAa,M,sBAChD,WAAa,OAAO1P,KAAKyE,KAAKiL,e,GANA8G,GAc5BS,E,kDACF,WAAYK,GAAS,IAAD,8BAAE,gBAAcA,OAASA,EAAzB,E,0CACpB,WAAW,OAAO,I,qBAClB,WAAY,OAAOtX,O,qBACnB,WAAY,MAAO,CAAE,IAAOA,KAAKsX,U,qBACjC,WAAY,OAAOtX,KAAKsX,S,sBACxB,WAAa,OAAOtX,KAAKsX,S,+BACzB,WAAsB,MAAuB,QAAhBtX,KAAKsX,W,GAPLd,GAW3BtQ,E,kDA4DF,WAAYoQ,EAAUG,GAAa,IAAD,8BAC9B,gBACKH,SAAWA,EAChB,EAAKG,aAAeA,EAHU,E,6CAMlC,WAAc,MAAO,S,qBAErB,WACI,IAAI9S,EAAO,CACPwS,UAAW,OACXG,SAAUtW,KAAKsW,SAAS7G,KAAI,SAAA8H,GAAO,OAAIA,EAAQ/T,cAInD,OADGxD,KAAKyW,aAAY9S,EAAK8S,YAAa,GAC/B9S,I,qBAGX,WAAY,OAAO3D,KAAKsW,SAAS7G,KAAI,SAAA8H,GAAO,OAAIA,EAAQV,aAAW7R,KAAK,M,sBACxE,WAAa,OAAOhF,KAAKsW,SAAS7G,KAAI,SAAA8H,GAAO,OAAIA,EAAQ7H,cAAY1K,KAAK,M,mBAC1E,WAAU,OAAO,IAAIkB,EAASlG,KAAKsW,SAAUtW,KAAKyW,c,qBAGlD,WACI,OAAO,IAAIvQ,EACPlG,KAAKsW,SAAS7G,KAAI,SAAA8H,GAAO,OAAIA,EAAQ9E,aACrCzS,KAAKyW,c,kCAMb,SAAqBe,GAEjB,IADA,IAAIC,EAAY,YAAOzX,KAAKsW,UACpBnC,EAAI,EAAGA,EAAIsD,EAAalT,OAAQ4P,IACpC,GAAGsD,EAAatD,GAAGuD,UAAW,CAC1B,IAAMC,EAAaF,EAAatD,GAAG1P,KAAKmT,aACxC,GAAGD,EAAY,CACX,IAAM7H,EAAW2H,EAAatD,GAAG1P,KAAKqO,gBAAgB6E,EAAYH,GAElE,OADAC,EAAatD,GAAK,IAAI4C,EAAoBjH,GACnC,IAAI5J,EAASuR,EAAczX,KAAKyW,aAInD,OAAO,Q,wBAvGX,SAAiBhS,GAAQ,OAAO,IAAIyB,EAAS,CAAC,IAAI6Q,EAAoBtS,O,yBAEtE,SAAmB6S,GAAU,OAAO,IAAIpR,EAAS,CAAC,IAAIC,EAAoBmR,O,2CAI1E,SAAqCA,GAGjC,IAFA,IAAMzC,EAASyC,EAAO3G,MAAM,MACxB2F,EAAW,GACPnC,EAAI,EAAGA,EAAIU,EAAOtQ,OAAQ4P,IAC9BmC,EAAS9R,KAAK,IAAI2B,EAAoB0O,EAAOV,KAC1CA,EAAIU,EAAOtQ,OAAO,GACjB+R,EAAS9R,KAAK,IAAIuS,EAAoB,IAAInG,IAElD,OAAO,IAAI1K,EAASoQ,K,+BAIxB,SAAyBuB,EAAOC,EAAOC,GACV,SAAtBF,EAAM1B,cAAwB0B,EAAQ3R,EAAS8R,UAAUH,EAAMpT,OACzC,SAAtBqT,EAAM3B,cAAwB2B,EAAQ5R,EAAS8R,UAAUF,EAAMrT,OAUlE,IATA,IAAM6R,EAAWuB,EAAMvB,SAASlE,OAC5B2F,EAAiB,CAAC,IAAId,EAAmBc,IAAmB,GAC5DD,EAAMxB,UAMN2B,EAAkB,CAAC3B,EAAS,IACxBnC,EAAI,EAAGA,EAAImC,EAAS/R,OAAQ4P,IAAK,CACrC,IAAM+D,EAAaD,EAAgB1T,OAAO,EACpC4T,EAAsBF,EAAgBC,GACzCC,EAAoBC,WAAa9B,EAASnC,GAAGiE,WAC7CD,EAAoBnB,UAAYV,EAASnC,GAAG6C,QAE3CiB,EAAgBC,GAAc,IAAI/R,EAC9BgS,EAAoB9T,KAAOiS,EAASnC,GAAG9P,KAAMiS,EAASnC,GAAG6C,SAEzDmB,EAAoBE,UAAYF,EAAoBG,qBACpDhC,EAASnC,GAAGiE,UAEhBH,EAAgBC,GACZ,IAAI/R,EAAoB,IAAMmQ,EAASnC,GAAG9P,KAAMiS,EAASnC,GAAG6C,SAE5DmB,EAAoBC,WACpB9B,EAASnC,GAAGkE,UAAY/B,EAASnC,GAAGmE,oBAExCL,EAAgBC,GACZ,IAAI/R,EAAoBgS,EAAoB9T,KAAO,IAAK8T,EAAoBnB,SAIhFiB,EAAgBzT,KAAK8R,EAASnC,IAGtC,OAAO,IAAIjO,EAAS+R,EAAiBJ,EAAMpB,YAAcqB,EAAMrB,gB,GAzDhDX,GA+GjB1P,E,WAMF,WAAYgD,GAAQ,oBAACpJ,KAAKoJ,MAAQA,E,yCAElC,WAAU,OAAOpJ,KAAKoJ,MAAM7E,S,mBAC5B,SAAMkK,GAAK,OAAOzO,KAAKkJ,SAAWuF,I,yBAGlC,SAAYA,GACR,IAAIzO,KAAKuY,MAAM9J,GAAI,OAAO,EAC1B,IAAI,IAAI0F,EAAI,EAAGA,EAAI1F,EAAG0F,IAClB,GAAqD,SAAlDnU,KAAKoJ,MAAMpJ,KAAKoJ,MAAM7E,OAAO,EAAE4P,GAAGgC,YACjC,OAAO,EACf,OAAO,I,kBAIX,SAAK1H,GAED,OADIzO,KAAKuY,MAAM,IAAIvY,KAAKwY,YACjBxY,KAAKoJ,MAAMpJ,KAAKoJ,MAAM7E,OAASkK,K,iBAI1C,SAAIA,GAGA,YAFSe,IAANf,IAAiBA,EAAI,GACpBzO,KAAKuY,MAAM9J,IAAIzO,KAAKwY,YACjBxY,KAAKyY,eAAehK,K,uBAK/B,SAAUA,GACFzO,KAAKuY,MAAM9J,IAAIzO,KAAKwY,YACpBxY,KAAK0Y,YAAYjK,IAAIzO,KAAK2Y,aAC9B,MAA8B3Y,KAAKyY,eAAehK,GAAlD,iBAAOmK,EAAP,KAAqBxP,EAArB,WACA,MAAM,CAAEwP,GAAR,mBAAsBxP,EAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAKxB,Y,wBAGjD,SAAWgK,GACP,MAA8BzO,KAAK6Y,UAAUpK,GAA7C,iBAAOmK,EAAP,KAAqB7H,EAArB,WACA,GAAGA,EAAM8C,OAAM,SAAApP,GAAI,MAAyB,UAArBA,EAAK2K,eACxB,MAAM,CAAEwJ,GAAR,mBAAsB7H,IAEtB/Q,KAAK2Y,e,0BAGb,SAAalK,GACT,MAA8BzO,KAAK6Y,UAAUpK,GAA7C,iBAAOmK,EAAP,KAAqB7H,EAArB,WACA,GAAGA,EAAM8C,OAAM,SAAApP,GAAI,MAAyB,UAArBA,EAAK2K,aAA2B3K,EAAK8Q,eACxD,MAAM,CAAEqD,GAAR,mBAAsB7H,IAEtB/Q,KAAK2Y,e,4BAGb,SAAelK,GACX,MAAO,CAAC,IAAIrI,EAAMpG,KAAKoJ,MAAM1D,MAAM,GAAI+I,KAAK2D,OAAOpS,KAAKoJ,MAAM1D,OAAO+I,M,sBAGzE,SAASrF,GACL,IAAIA,EAAMyK,OAAM,SAAA5N,GAAI,OAAIA,aAAgB6P,KACpC,MAAM,IAAIgD,MAAM,mCACpB,OAAO,IAAI1S,EAAMpG,KAAKoJ,MAAMgJ,OAAOhJ,M,4BAGvC,SAAe2H,GAAS,OAAO/Q,KAAK+Y,SAAShI,EAAMtB,KAAI,SAAAhL,GAAI,OAAI,IAAI2R,EAAS3R,S,kBAC5E,SAAKwB,GAAQ,OAAOjG,KAAK+Y,SAAS,CAAC9S,M,uBACnC,SAAUxB,GAAQ,OAAOzE,KAAKgZ,eAAe,CAACvU,M,6BAM9C,WAAoB,OAAO,IAAI2B,EAAMpG,KAAKoJ,MAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAK6Q,c,uBAEjE,WAAc,MAAM,IAAIgC,MAAM,qB,wBAC9B,WAAe,MAAM,IAAIA,MAAM,sB,qBAE/B,WACI,MAAO,CACHG,YAAa,QACb7P,MAAOpJ,KAAKoJ,MAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAKzC,iB,wBAnF3C,SAAiBG,GACb,OAAO,IAAIyC,EACPzC,EAAKyF,MAAMqG,KAAI,SAAAyJ,GAAS,OAAIpD,EAAK/R,UAAUmV,W,KAyFjDnT,E,WAQF,WAAYqD,EAAO+P,GAAkB,oBACjCnZ,KAAKoJ,MAAQA,GAAS,GACtBpJ,KAAKmZ,gBAAkBA,E,iDAG3B,WACI,OAAGnZ,KAAKmZ,gBAAkB,EACfnZ,KAAKoJ,MAAMpJ,KAAKmZ,gBAAgB,GAEhC,O,yBAKf,SAAYC,GACR,IAAMrK,EAAQ/O,KAAKmZ,gBAEnB,OAAO,IAAIpT,EADO/F,KAAKoJ,MAAM1D,MAAM,EAAGqJ,GAAOqD,OAAO,CAACgH,GAAWpZ,KAAKoJ,MAAM1D,MAAMqJ,IAClDA,EAAM,K,8BAMzC,WACI,IAAMA,EAAQ/O,KAAKmZ,gBACnB,OAAGpK,EAAQ,EAEA,IAAIhJ,EADO/F,KAAKoJ,MAAM1D,MAAM,EAAGqJ,EAAM,GAAGqD,OAAOpS,KAAKoJ,MAAM1D,MAAMqJ,IACxCA,EAAM,GAG9B,O,+BAGf,SAAkBH,GACd,IAAII,EAAYhP,KAAKmZ,gBAAkBvK,EAGvC,OAFGI,EAAY,IAAGA,EAAY,GAC3BA,EAAYhP,KAAKoJ,MAAM7E,SAAQyK,EAAYhP,KAAKoJ,MAAM7E,QAClD,IAAIwB,EAAS/F,KAAKoJ,MAAO4F,K,gCAKpC,SAAmBJ,GACf,IAAM3I,EAAOjG,KAAKqZ,gBAClB,OAAIpT,GACDjG,KAAKmZ,gBAAkBvK,GAAU,GACjC5O,KAAKmZ,gBAAkBvK,EAAS5O,KAAKoJ,MAAM7E,OACnC,KAEAvE,KAAKsZ,mBAAmBC,kBAAkB3K,GAAQ4K,YAAYvT,K,6BAI7E,WACI,OAAO,IAAIF,EAAS/F,KAAKoJ,MAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAK6Q,WAAU9W,KAAKmZ,mB,qBAGnE,WACI,MAAO,CACHF,YAAa,WACb7P,MAAOpJ,KAAKoJ,MAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAKzC,aACnC2V,gBAAiBnZ,KAAKmZ,mB,qBAI9B,WACI,OAAOnZ,KAAKoJ,MAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAK4Q,aAAW7R,KAAK,W,wBAzEvD,SAAiBrB,GACb,OAAO,IAAIoC,EACPpC,EAAKyF,MAAMqG,KAAI,SAAAyJ,GAAS,OAAIpD,EAAK/R,UAAUmV,MAC3CvV,EAAKwV,iBAAmB,O,KCxnBrBM,E,WAh2CX,WAAYC,EAAeC,GAAW,oBAClC3Z,KAAK0Z,cAAgBA,EACrB1Z,KAAK2Z,SAAWA,EAGhB3Z,KAAKG,KAAO,OAGZH,KAAK4Z,SAAW,KAGhB5Z,KAAK6Z,aAAe,KAEpB7Z,KAAK8Z,eAAgB,EACrB9Z,KAAK+Z,YAAa,EAIlB/Z,KAAKga,kBAAoB,KASzBha,KAAKia,qBAAuB,KAS5Bja,KAAKka,gBAAkB,KAGvBla,KAAKma,0BAA2B,EAGhCna,KAAKoa,mBAAoB,EAIzBpa,KAAK5B,WAAa,KAOlB4B,KAAKqa,gBAAkB,KAGvBra,KAAKxB,kBAAoB,G,8CAM7B,SAAW6H,EAAWjG,GAClB,GAAW,UAARA,GAA2B,QAARA,GAAyB,YAARA,EACnC,MAAO,EAAC,EAAOiG,GAGnB,IAAMiU,EAAiBta,KAAK2Z,SAAShZ,YAAcX,KAAKG,KAClDsF,EAAUzF,KAAK2Z,SAASnZ,eAAe+Z,eAAeD,EAAgBla,GAC5E,OAAGqF,GACCzF,KAAKwa,cAAgBpa,EAEd,EAAC,EADcJ,KAAKya,gBAAgBhV,EAASY,IACrBA,IAGxB,EAAC,EAAOA,K,6BAIvB,SAAgBZ,EAASY,GAOrB,IAAMqU,EAAWjV,EAAQkL,MAAM,KAAKlB,KAChC,SAAAkL,GAAK,OAAIA,EAAMhK,MAAM,KAAKlB,KACtB,SAAAmL,GAAK,OAAIA,EAAMrS,WAAW,YAAa,WAC/C,OAAOvI,KAAK6a,sBAAsBH,EAAUrU,K,mCAKhD,SAAsBqU,EAAUrU,GAC5BrG,KAAKia,qBAAuB,KAC5B,IAAI,IAAI9F,EAAI,EAAGA,EAAIuG,EAASnW,OAAQ4P,IAAK,CACrC,kBAAsCuG,EAASvG,IAAxC7O,EAAP,KAAwBwV,EAAxB,WACMC,EAAmB/a,KAAK,MAAQsF,GACtC,IAAIyV,EACA,OAAO,KACX,IAEI/a,KAAKqG,UAAYA,EAMjBrG,KAAK4Z,SAAW,KAIhB5Z,KAAK6Z,aAAe,KAGpB7Z,KAAK8Z,eAAgB,EAIrB9Z,KAAK+Z,YAAa,EAIlB/Z,KAAKma,0BAA2B,EAEhCna,KAAKga,kBAAoB,KAGzB,IAAMpB,EAAamC,EAAiBxT,KAAKvH,MAAvB,cAA8BqG,EAAUvI,OAAxC,mBAAkDgd,KAChEE,EAAgB,IAAInV,EACpB+S,GAAavS,EAAUvI,MACvBkC,KAAK6Z,cAAgBxT,EAAU3E,UAEnCsZ,EAAchV,SAAWK,EAAUL,WAAagV,EAAcnU,QAAQR,GACnErG,KAAK+Z,aACJiB,EAAchV,UAAW,GAC7BK,EAAY2U,EAGZhb,KAAKG,KAAOH,KAAK4Z,UAAY,OAGzB5Z,KAAKma,2BACLna,KAAKka,gBAAkB,MAC7B,MAAMzM,GACJ,GAAiB,oBAAdA,EAAEwN,SAA+C,qBAAdxN,EAAEwN,SACvB,6BAAdxN,EAAEwN,QAKD,OAJAjb,KAAKkb,oBACLlb,KAAKia,qBAAuB,KAC5Bja,KAAKG,KAAO,OACZH,KAAKka,gBAAkB,KAChB,KAEN,MAAMzM,EArDf,QAyDIzN,KAAKqG,UAAY,KACjBrG,KAAK6Z,aAAe,MAG5B,OAAOxT,I,4BAGX,SAAeuT,GACX5Z,KAAK4Z,SAAWA,I,iCAGpB,SAAoBuB,GAChBA,EAAYC,UAAUC,OAAO,cAE7BF,EAAYG,YACZH,EAAYC,UAAUG,IAAI,gB,+BAG9B,WACI,OAAwC,IAArCvb,KAAK2Z,SAAS/Y,OAAOO,YACbnB,KAAKwb,uBAELxb,KAAKyb,oBAAoB/Z,SAASC,eAAe,kB,kCAGhE,WACI,OAAwC,MAArC3B,KAAK2Z,SAAS/Y,OAAOO,YACbnB,KAAKkb,oBAELlb,KAAKyb,oBAAoB/Z,SAASC,eAAe,qB,+BAGhE,WAEI,IADA,IAAM+Z,EAAU,CAAC,cAAe,kBACxBC,EAAS,EAAGA,EAASD,EAAQnX,OAAQoX,IAAU,CACzCja,SAASC,eAAe+Z,EAAQC,IACtCP,UAAUC,OAAO,iB,oBAI7B,SAAOhX,GAAQrE,KAAKga,kBAAoB3V,I,0CAKxC,SAA6BgM,EAAWuL,EAAYC,GAEhD,MAA6B,yBAA1BxL,EAAUjB,cACqB,OAA7BiB,EAAUiB,iBAA4BuK,GACP,OAA/BxL,EAAUkB,kBAA6BsK,GAEjC,IAAIxK,EACPhB,EAAUA,UACTwL,EAAiBxL,EAAUiB,eAAiBsK,EAC5CC,EAAiBD,EAAavL,EAAUkB,mBAK7ClB,EAAYW,EAAc8K,iBAAiBzL,GAI3CA,EAAYW,EAAc+K,sBAAsB1L,GAEzC,IAAIgB,EACPhB,EACCwL,EAAiB,KAAOD,EACxBC,EAAiBD,EAAa,S,wCAM3C,SAA2B9d,EAAO+d,GAC9B,MAA2C/d,EAAM+a,UAAU,GAA3D,mBAAOD,EAAP,KAAkBvI,EAAlB,KAA6BuL,EAA7B,KACM9L,EAAW9P,KAAKgc,6BAA6B3L,EAAWuL,EAAYC,GAC1E,OAAOjD,EAAUqD,UAAUnM,K,0BAG/B,SAAahS,GAAS,OAAOkC,KAAKkc,2BAA2Bpe,GAAO,K,4BACpE,SAAeA,GAAS,OAAOkC,KAAKkc,2BAA2Bpe,GAAO,K,sBAItE,SAASA,GACL,MAA+BA,EAAM+a,UAAU,GAA/C,mBAAOD,EAAP,KAAkBvI,EAAlB,KACM8L,EAAiB,IAAIpM,EAAY,QAAS,IAIhD,GAA6B,yBAA1BM,EAAUjB,aAA0CiB,EAAUkB,iBAAkB,CAC/E,IAII6K,EAJEnY,EAAIoM,EAAUkB,iBACd8K,EAAmB,SAAA5X,GAAI,MACF,YAArBA,EAAK2K,aACoB,IAAzB3K,EAAK+N,iBAA+C,UAAtB/N,EAAKa,cAQzC,GALI8W,EADDC,EAAiBpY,GACO,IAAI6M,EAAa,CAAC7M,EAAGkY,IACtB,aAAlBlY,EAAEmL,aAA8BnL,EAAE8M,MAAM8C,MAAMwI,GAC3B,IAAIvL,EAAa7M,EAAE8M,MAAMqB,OAAO,CAAC+J,KAEjC,KACF,CACrB,IAAMrM,EAAW,IAAIuB,EACjBhB,EAAUA,UAAWA,EAAUiB,eAAgB8K,GACnD,OAAOxD,EAAUqD,UAAUnM,IAKnC,IAAMA,EAAW9P,KAAKgc,6BAA6B3L,EAAW8L,GAAgB,GAC9E,OAAOvD,EAAUqD,UAAUnM,K,qBAG/B,SAAQhS,EAAO8b,GAAY5Z,KAAKsc,eAAe1C,K,qBAE/C,WAAY5Z,KAAKia,qBAAuB,S,qBACxC,WAAYja,KAAKia,qBAAuB,S,gCAExC,WACI,IAAM7Z,EAAMJ,KAAKwa,cACjBxa,KAAKia,qBAAuB,WAC5Bja,KAAKsc,eAAetc,KAAKG,MACzBH,KAAKma,0BAA2B,EAChC,IAAIoC,EAAsB,KAC1B,GAAG,UAAUjc,KAAKF,GAAM,CACpB,IAAMgK,EAAQoS,SAASpc,GACK,OAAzBJ,KAAKka,iBAA4Bla,KAAKka,gBAAkB,EAEvDqC,EAAsB,GAAGvc,KAAKka,gBAAkB9P,EAE5CA,EAAQ,IACZmS,EAAsBnS,OAEd,MAARhK,IACJmc,GAAuB,GAC3Bvc,KAAKka,gBAAkBqC,I,kCAI3B,SAAqBE,EAAeC,GAChC,OAA4B,OAAzB1c,KAAKka,gBACGuC,EACHzc,KAAKka,gBAAkB,EACpBwC,EAEA1c,KAAKka,kB,sCAGpB,WACI,GAA4B,OAAzBla,KAAKka,iBAA4Bla,KAAKka,iBAAmB,EACxD,MAAM,IAAIpB,MAAM,4BAEhB,OAAO9Y,KAAKka,kB,oBAIpB,SAAOpc,GACH,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACM0T,EAAY1T,EAAMqG,KAAI,SAAAxJ,GAAI,OAAIA,EAAK6Q,WACzC,OAAO8B,EAAUG,SAAS3P,EAAMgJ,OAAO0K,M,oBAG3C,SAAOhf,GACH,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAE/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,gBACA,OAAOA,I,oBAGX,SAAO9a,GACH,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACA,OAAOwP,EAAUG,SAAS3P,EAAM1D,MAAM,M,qBAG1C,SAAQ5H,GACJ,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WAEA,OADAA,EAAM2T,UACCnE,EAAUG,SAAS3P,K,qBAK9B,SAAQtL,GACJ,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACM4T,EAAY5T,EAAMA,EAAM7E,OAAO,GACrC,OAAOqU,EAAUG,SAAS,CAACiE,EAAUlG,SAAS1E,OAAOhJ,M,qBAIzD,SAAQtL,GACJ,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACA,OAAOwP,EAAUG,SAAS3P,EAAMgJ,OAAO,CAAChJ,EAAM,GAAG0N,a,oBAGrD,SAAOhZ,GACH,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACM0T,EAAY1T,EAAM1D,MAAM,GAAG0M,OAAO,CAAChJ,EAAM,KAC/C,OAAOwP,EAAUG,SAAS+D,K,sBAG9B,SAAShf,GACL,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACM0T,EAAY1T,EAAM1D,OAAO,GAAG0M,OAAOhJ,EAAM1D,MAAM,GAAI,IACzD,OAAOkT,EAAUG,SAAS+D,K,0CAG9B,SAA6Bhf,EAAOmf,GAChC,IAAMC,EAASV,SAASS,GACxBjd,KAAK6Z,aAAe7Z,KAAKqG,UAAU3E,SAAS6X,kBAAkB2D,K,yCAIlE,SAA4Bpf,EAAOmf,GAC/B,IAAMC,EAASV,SAASS,GAClBpD,EAAe7Z,KAAKqG,UAAU3E,SAASyb,mBAAmBD,GAC7DrD,EACC7Z,KAAK6Z,aAAeA,EAEpB7Z,KAAKwb,yB,0BAGb,SAAa1d,GAAQ,IAAD,OAEVwK,EADqBtI,KAAK0Z,cAAc9S,MAAMwW,mBAChBtP,iBACpC,IAAIxF,EACA,OAAOtI,KAAKqd,gBAAgBvf,GAChCkC,KAAK0Z,cAAc9S,MAAM2D,iBAAiBmD,WACtC1N,KAAKqG,UAAWiC,GAChB,WACI,EAAKgV,OAAO,UAAYhV,GACxB,EAAKqR,SAASjZ,qBAAuB4H,EACrC,EAAKqR,SAAS4D,OACd,EAAKtD,qBAAuB,QAC5B,EAAKP,cAAc8D,uBAEvB,kBAAM,EAAKF,OAAO,gBAAkBhV,MAExCtI,KAAK+Z,YAAa,I,6BAItB,SAAgBjc,GAAQ,IAAD,OACf+Q,EAAe4O,OAAOC,OAAO,gCAAiC1d,KAAK2Z,SAAS7L,kBAChF,GAAIe,EAAJ,CAEA,IAAItE,EAAmBvK,KAAK0Z,cAAc9S,MAAM2D,iBAChDsE,EAAetE,EAAiBoT,kBAAkB9O,GAClDtE,EAAiBmD,WACb1N,KAAKqG,UAAWwI,GAChB,WACI,EAAKyO,OAAO,aAAezO,GAC3B,IAAIuO,EAAqB,EAAK1D,cAAc9S,MAAMwW,mBAClDA,EAAmBvP,kBAAoBuP,EAAmBtP,iBAAmBe,EAC7E,EAAK8K,SAASjZ,qBAAuBmO,EACrC,EAAK8K,SAAS4D,OACd,EAAKtD,qBAAuB,QAC5B,EAAKP,cAAc8D,uBAEvB,kBAAM,EAAKF,OAAO,iBAAmBzO,MAEzC7O,KAAK+Z,YAAa,K,mCAGtB,SAAsBjc,GAClB,IAAM+P,EAAoB7N,KAAK0Z,cAAc9S,MAAMwW,mBAAmBvP,kBACtE,OAAIA,EAED7N,KAAKqG,UAAUL,UACXyX,OAAOG,QAAQ,yDAMP5d,KAAK6d,aAAa/f,QAGjCkC,KAAK0Z,cAAcoE,uBAAuBjQ,GAX/B7N,KAAKwb,yB,+BAcpB,SAAkB1d,GACd,IAAIsf,EAAqBpd,KAAK0Z,cAAc9S,MAAMwW,mBAC9C7S,EAAmBvK,KAAK0Z,cAAc9S,MAAM2D,iBAC5CsE,EAAeuO,EAAmBW,yBAAyBX,EAAmBtP,kBAAoB,YAEtG,GADAe,EAAe4O,OAAOC,OAAO,wCAAyC7O,GACtE,CAEA,GADAA,EAAetE,EAAiBoT,kBAAkB9O,GAAgB,IAClE,CAMGuO,EAAmBtP,kBAElBvD,EAAiBmD,WAAW1N,KAAKqG,UAAW+W,EAAmBtP,kBAInE,IAAIvC,EAAY,IAAI1F,EAgBpB,OAVA7F,KAAK6Z,aAAetO,EAAU7J,SAE9B0b,EAAmBvP,kBAAoBuP,EAAmBtP,iBAAmBe,EAC7E7O,KAAK2Z,SAASjZ,qBAAuBmO,EACrC7O,KAAK2Z,SAAS4D,OACdvd,KAAKia,qBAAuB,QAC5Bja,KAAKsd,OAAO,qBAAuBzO,GACnC7O,KAAK8Z,eAAgB,EACrB9Z,KAAK+Z,YAAa,EAClB/Z,KAAKge,gBAAgBzS,EAAUzN,MAAO,SAC/ByN,EAAUzN,MA3BbqK,MAAM,4E,qCA8Bd,SAAwBrK,EAAOmgB,GAC3B,IAAMrP,EAAS4N,SAASyB,GACpBb,EAAqBpd,KAAK0Z,cAAc9S,MAAMwW,mBAC5CvO,EAAeuO,EAAmBc,uBAAuBd,EAAmBvP,kBAAmBe,GAClGC,IACCuO,EAAmBvP,kBAAoBgB,EACvC7O,KAAK8Z,eAAgB,K,qCAI7B,SAAwBhc,GAAQ,IAAD,OACvBsf,EAAqBpd,KAAK0Z,cAAc9S,MAAMwW,mBAC9C7S,EAAmBvK,KAAK0Z,cAAc9S,MAAM2D,iBAC1CjC,EAAW8U,EAAmBvP,kBACpC,IAAIvF,EAAU,OAAOtI,KAAKwb,uBACtBiC,OAAOG,QAAQ,kBAAqBtV,EAAW,OACnDiC,EAAiB4T,aACb7V,GACA,WACI,EAAKgV,OAAO,YAAchV,GAC1B,IAAMuG,EAAeuO,EAAmBc,uBAAuB5V,EAAU,GAEzE8U,EAAmBvP,kBAAoBgB,EACvC,EAAK8K,SAASjZ,qBAAuBmO,EACrC,EAAK8K,SAAS4D,OACd,EAAK7D,cAAc8D,uBAEvB,kBAAM,EAAKF,OAAO,mBAAqBhV,Q,gCAM/C,SAAmBxK,EAAOsgB,GAItB,IAHA,IAAMzB,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAC/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBAAO/D,EAAP,KAAqBxP,EAArB,WACIyQ,EAAe7Z,KAAKqG,UAAU3E,SAC1B+M,EAAI,EAAGA,EAAIrF,EAAM7E,OAAQkK,IAC7BoL,EAAeA,EAAaL,YAAYpQ,EAAMqF,GAAGqI,SAErD,OADA9W,KAAK6Z,aAAeA,EACbuE,EAAWxF,EAAUG,SAAS3P,GAASwP,I,sCAGlD,SAAyB9a,EAAOsgB,GAC5B,IAAMzB,EAAM3c,KAAK4c,qBAAqB,GAAI,GAC1C,GAAGD,GAAO,EAAG,OAAO7e,EACpB,IAAI+b,EAAe7Z,KAAKqG,UAAU3E,SAElC,GAAGmY,EAAaV,gBAAkBwD,EAC9B,OAAO3c,KAAKwb,uBAEhB,IADA,IAAIsB,EAAY,GACRrO,EAAI,EAAGA,EAAIkO,EAAKlO,IAAK,CACzB,IAAMxI,EAAO4T,EAAaR,gBAC1BQ,EAAeA,EAAaP,mBAC5BwD,EAAUtY,KAAKyB,EAAK6Q,SAKxB,OAHAgG,EAAUC,UACNqB,IACApe,KAAK6Z,aAAeA,GACjB/b,EAAMib,SAAS+D,K,iCAG1B,SAAoBhf,EAAO6Y,GACvB,OAAO7Y,EAAM0G,KAAK,IAAIkS,EAAcC,M,uBAGxC,SAAU7Y,EAAOuG,GAGb,OADAA,EAAOA,GAAQ,IACPmB,WAAW,MACR1H,EAAMme,UAAU,IAAIlM,EAAY1L,EAAKqB,MAAM,KAE3C5H,EAAMme,UAAU,IAAIpL,EAASxM,M,4BAG5C,SAAevG,GACX,OAAOkC,KAAKqe,UAAUvgB,EAAOkC,KAAKwa,iB,6BAGtC,SAAgB1c,GACZ,OAAOA,EAAMme,UAAU,IAAIrL,K,wBAM/B,SAAW9S,EAAOwgB,GACd,IAQIxO,EADJ,EAA0BhS,EAAM+a,UAAU,GAA1C,mBAAOD,EAAP,KAAkBnU,EAAlB,KAMA,OAHIqL,EADoB,SAArBrL,EAAK2K,YACO,IAAIyB,EAVA,SAAAyG,GACf,OAAOgH,GACP,IAAK,YAAa,OAAOhH,EAAOiH,cAChC,IAAK,YAAa,OAAOjH,EAAOlM,cAChC,QAAS,OAAOkM,GAMQkH,CAAW/Z,EAAKJ,OAE7BI,EACRmU,EAAUqD,UAAUnM,K,yBAI/B,SAAYhS,EAAO2gB,GAA6B,IAArBC,EAAoB,uDAAL,IAChCC,EAAQnC,SAASkC,GACvB,EAAqC5gB,EAAM+a,UAAU8F,GAArD,iBAAO/F,EAAP,KAAqBgG,EAArB,WACMC,EAAc,IAAI9O,EAAY0O,EAAQG,GAC5C,OAAOhG,EAAUqD,UAAU4C,K,+BAO/B,SAAkB/gB,EAAOghB,EAAUC,GAC/B,IAmBIta,EAnBJ,EAA4B3G,EAAM+a,UAAU,GAA5C,mBAAKD,EAAL,KAAgBoG,EAAhB,KACMC,EAAgBH,EACtB,QAAwBtP,IAArBuP,EAAgC,CAK/B,IAAIG,EAAa,IACdH,EAAiBvZ,WAAW,OAC3B0Z,EAAa,IACbH,EAAmBA,EAAiBrZ,MAAM,IAE3CqZ,EAAiBxa,OAAS,IACzBwa,EAAmB,CAAC,IAAKA,EAAkB,KAAK/Z,KAAK,KACzD8Z,EAAW,CAACA,EAAUI,EAAYH,GAAkB/Z,KAAK,IAW7D,OATAga,EAAWhO,EAAc8K,iBAAiBkD,GAKtCva,EADiB,SAAlBwa,GAA8C,SAAlBA,EACpB,IAAIlP,EAAY,eAAgB,CAAC,IAAIc,EAASiO,GAAWE,IAEzD,IAAIjP,EAAY+O,EAAU,CAACE,IAE/BpG,EAAUqD,UAAUxX,K,kCAM/B,SAAqB3G,EAAO2gB,EAAQU,GAChC,IACI9O,EADJ,EAAmCvS,EAAM+a,UAAU,GAAnD,mBAAOD,EAAP,KAAkBwG,EAAlB,KAGI/O,EADD8O,EACa,IAAIpP,EAAY,eAAgB,CAAC,IAAIc,EAAS4N,KAE9C,IAAI1O,EAAY0O,GAChC,IAAM3O,EAAW,IAAIC,EAAY,WAAY,CAACqP,EAAe/O,IAC7D,OAAOuI,EAAUqD,UAAUnM,K,0BAK/B,SAAahS,EAAOuhB,GAChB,MAAwBvhB,EAAM+a,UAAU,GAAxC,mBAAKD,EAAL,KAAgBnU,EAAhB,KACA,GAAwB,SAArBA,EAAK2K,aACU,MAAd3K,EAAKJ,MAA8B,MAAdI,EAAKJ,MAEzB,GAAwB,YAArBI,EAAK2K,aAAsD,IAAzB3K,EAAK+N,kBAChB,eAAtB/N,EAAKa,cAAuD,WAAtBb,EAAKa,cAA4B,CAC5E,IAAMga,EAAa7a,EAAKwL,cAAc,GACR,SAA3BqP,EAAWlQ,aACU,MAApBkQ,EAAWjb,MAAoC,MAApBib,EAAWjb,OACtCI,EAAO,IAAIsL,EACPtL,EAAKa,aACL,CAAC,IAAIyK,EAAgC,MAApBuP,EAAWjb,KAAe,QAAU,kBAR7DI,EAAO,IAAIsL,EAA0B,MAAdtL,EAAKJ,KAAe,QAAU,SAUzD,IAAMwa,EAAc,IAAI9O,EAAYsP,EAAQ,CAAC5a,IAC7C,OAAOmU,EAAUqD,UAAU4C,K,sBAG/B,SAAS/gB,EAAOyhB,GACZ,MAAwBzhB,EAAM+a,UAAU,GAAxC,mBAAKD,EAAL,KAAgBnU,EAAhB,KAGwB,YAArBA,EAAK2K,aACiB,cAAtB3K,EAAKa,cAAyD,IAAzBb,EAAK+N,kBACzC/N,EAAOA,EAAKwL,cAAc,IAE9B,IAAMH,EAAW,IAAIC,EAAY,YAAa,CAAC,IAAIc,EAAS0O,GAAY9a,IACxE,OAAOmU,EAAUqD,UAAUnM,K,0BAK/B,SAAahS,GACT,MAAwBA,EAAM+e,IAAI,GAAlC,mBAAKjE,EAAL,KAAgB3S,EAAhB,KACA,OAAO2S,EAAUpU,KAAKyB,EAAKwM,a,2BAK/B,SAAc3U,GACV,MAAwBA,EAAM+a,UAAU,GAAxC,mBAAKD,EAAL,KAAgBnU,EAAhB,KACIqL,EAAW,KAOf,OALIA,EADoB,YAArBrL,EAAK2K,aAAmD,eAAtB3K,EAAKa,cAA0D,IAAzBb,EAAK+N,gBACjE,IAAIzC,EAAY,OAAQtL,EAAKwL,eACf,YAArBxL,EAAK2K,aAAmD,WAAtB3K,EAAKa,aAChCb,EAEA,IAAIsL,EAAY,SAAU,CAACtL,IACnCmU,EAAUqD,UAAUnM,K,iCAG/B,SAAoBhS,EAAO0hB,GAEvB,OADAxf,KAAKsc,eAAe,qBAChBkD,EAMAxf,KAAKxB,kBAAkByE,KAMvBjD,KAAKxB,kBAAkB2T,OAY3BnS,KAAKxB,kBAAkBihB,OAASD,EACzBxf,KAAK0f,0BAA0B5hB,KAXlCkC,KAAKxB,kBAAkB2T,MAAQqN,EACH,OAAzBxf,KAAKka,iBAA4Bla,KAAKka,iBAAmB,EACjDla,KAAK0f,0BAA0B5hB,QAGtCkC,KAAKma,0BAA2B,KAXpCna,KAAKxB,kBAAkByE,KAAOuc,OAC9Bxf,KAAKma,0BAA2B,KAPhCna,KAAKxB,kBAAoB,QACzBwB,KAAKma,0BAA2B,M,uCAyBxC,SAA0Brc,GACtBkC,KAAKsc,eAAe,QACpB,IAAMqD,EAAI3f,KAAKxB,kBACXmgB,EAAQ3e,KAAKka,iBAAmB,EACjCyE,EAAQ,IAAGA,EAAQ,GACtB,MAA8B7gB,EAAM+a,UAAU8F,GAA9C,iBAAO/F,EAAP,KAAqB7H,EAArB,WACMjB,EAAW,IAAIkB,EAAc2O,EAAE1c,KAAM0c,EAAExN,MAAOwN,EAAEF,OAAQ1O,GAE9D,OADA/Q,KAAKxB,kBAAoB,GAClBoa,EAAUqD,UAAUnM,K,sBAK/B,SAAShS,EAAO2gB,GACZ,IAIQjO,EAJR,EAA2C1S,EAAM+e,IAAI,GAArD,mBAAOjE,EAAP,KAAkBgH,EAAlB,KAA6BC,EAA7B,KACM5O,EAAY2O,EAAUzJ,YAAajF,EAAa2O,EAAW1J,YACjE,GAAiB,SAAdlF,GAAuC,SAAfC,EAOvB,OAHIV,EADDiO,EAAOjZ,WAAW,MACD,IAAIuK,EAAY0O,EAAO/Y,MAAM,IAE7B,IAAImL,EAAS4N,GAC1B7F,EAAUqD,UAAU,IAAI1L,EAAUC,EAAeoP,EAAUnb,KAAMob,EAAWpb,OAElF,GAAkB,SAAdwM,GAAsC,SAAdA,GACT,SAAfC,GAAwC,SAAfA,EAM9B,OAAOpT,EAAM6a,aAJb,IAAMS,EAAWlT,EAAS4Z,kBAAkBF,EAAWC,EAAYpB,GACnE,OAAO7F,EAAUpU,KAAK4U,K,4BAQ9B,SAAetb,EAAOiiB,GAClB,MAA2CjiB,EAAM+e,IAAI,GAArD,mBAAOjE,EAAP,KAAkBgH,EAAlB,KAA6BC,EAA7B,KACM5O,EAAY2O,EAAUzJ,YAAajF,EAAa2O,EAAW1J,YACjE,GAAiB,SAAdlF,GAAuC,SAAfC,EAAuB,CAE9C,IAAMV,EAAgB,IAAIM,EAAa,CACnC,IAAIf,EAAY,QAChB,IAAIA,EAAY,OAAQ,CAAC,IAAIc,EAASkP,EAAOxX,WAAW,IAAK,QAC7D,IAAIwH,EAAY,UACpB,OAAO6I,EAAUqD,UAAU,IAAI1L,EAAUC,EAAeoP,EAAUnb,KAAMob,EAAWpb,OAElF,GAAkB,SAAdwM,GAAsC,SAAdA,GACT,SAAfC,GAAwC,SAAfA,EAQ9B,OAAOpT,EAAM6a,aANb,IAAMqH,EAAmB9Z,EAAS0Q,YAAY,IAAMmJ,EAAS,KACvD3G,EAAWlT,EAAS4Z,kBACtBF,EAAW1Z,EAAS4Z,kBAAkBE,EAAkBH,IAC5D,OAAOjH,EAAUpU,KAAK4U,K,uBAO9B,SAAUtb,EAAO2gB,GACb,IACIjO,EADJ,EAA+B1S,EAAM+a,UAAU,GAA/C,mBAAOD,EAAP,KAAkBvI,EAAlB,KAMA,OAHIG,EADDiO,EAAOjZ,WAAW,MACD,IAAIuK,EAAY0O,EAAO/Y,MAAM,IAE7B,IAAImL,EAAS4N,GAC1B7F,EAAUqD,UAAU,IAAI9L,EAAWE,EAAWG,M,4BAGzD,SAAe1S,GACX,MAAgCA,EAAM+a,UAAU,GAAhD,mBAAOD,EAAP,KAAkBqH,EAAlB,KACA,GAA8B,UAA3BA,EAAW7Q,YAAd,CAIA,IAAMuG,EAAasK,EAAWtP,MAC1BuC,EAAiB,KACMA,EAAT,UAAfyC,EAAyC,SACrB,WAAfA,EAA0C,KAC5B,QACtB,IAAMuK,EAAiBD,EAAWE,gBAAgBjN,GAClD,OAAO0F,EAAUqD,UAAUiE,GATvBlgB,KAAKkb,sB,6BAgBb,SAAgBpd,EAAOsiB,GACnB,IACItQ,EADJ,EAA6ChS,EAAM+a,UAAU,GAA7D,mBAAOD,EAAP,KAAkBvI,EAAlB,KAA6BgQ,EAA7B,KASA,OANIvQ,EADyB,UAA1BO,EAAUjB,YACE,IAAImB,EACX,IAAIR,EAAYqQ,EAAY,CAACC,EAAchQ,EAAUG,gBACrDH,EAAUI,UAAWJ,EAAUK,YAGxB,IAAIX,EAAYqQ,EAAY,CAACC,EAAchQ,IACnDuI,EAAUqD,UAAUnM,K,uBAG/B,c,uBAEA,SAAUhS,GACN,MAAyCA,EAAM+e,IAAI,GAAnD,mBAAKjE,EAAL,KAAgBgH,EAAhB,KAA2BC,EAA3B,KACM5O,EAAY2O,EAAUzJ,YAAajF,EAAa2O,EAAW1J,YACjE,GAAiB,SAAdlF,GAAuC,SAAfC,EAAuB,CAC9C,IAAIT,EAAYmP,EAAUnb,KAAMiM,EAAamP,EAAWpb,KAClDqL,EAAWb,EAAK4G,aAAapF,EAAWC,GAC9C,OAAOkI,EAAUqD,UAAUnM,GAE1B,GAAkB,SAAdmB,GAAsC,SAAdA,GACT,SAAfC,GAAwC,SAAfA,EAK9B,OAAOpT,EAAM6a,aAJb,IAAMS,EAAWlT,EAAS4Z,kBAAkBF,EAAWC,GACvD,OAAOjH,EAAUpU,KAAK4U,K,iCAQ9B,SAAoBtb,GAChB,MAAuCA,EAAM+a,UAAU,GAAvD,mBAAOD,EAAP,KAAkBpB,EAAlB,KACA,EAA4BoB,EAAUiE,IAAI,GAA1C,mBAAOyD,EAAP,KAAoBra,EAApB,KACA,GAAwB,SAArBA,EAAKkQ,YAAwB,CAC5B,IAAMoK,EAAgBta,EAAKxB,KACrBkT,EAAa4I,EAAc3I,aACjC,GAAGD,EAAY,CACX,IAAM7H,EAAWyQ,EAAczN,gBAAgB6E,EAAYH,GAC3D,OAAO8I,EAAYrE,UAAUnM,SAGhC,GAAwB,SAArB7J,EAAKkQ,YAAwB,CACjC,IAAMqK,EAAgBva,EAAKwa,qBAAqBjJ,GAChD,GAAGgJ,EACC,OAAOF,EAAY9b,KAAKgc,GAEhC,OAAO1iB,EAAM6a,e,mCAIjB,SAAsB7a,EAAO4iB,GAEzB,MAAgC5iB,EAAM+a,UAAU,GAAhD,mBAAkBoH,GAAlB,WACA,GAA8B,UAA3BA,EAAW7Q,YACV,OAAOtR,EAAM6a,aACjB,IAAMgI,EAAiC,UAAfD,EAClBT,EAAWvP,WAAauP,EAAWxP,UAGzC,OAAO3S,EAAMme,UAAU0E,K,iCAG3B,SAAoB7iB,EAAOuc,GAKvB,OAJAra,KAAK5B,WAAa,GAClB4B,KAAKqa,gBAAkBA,EACvBra,KAAKsc,eAAejC,GACpBra,KAAKia,qBAAuB,WACrBnc,I,kCAGX,SAAqBA,GAGjB,OAFAkC,KAAK4gB,oBACL5gB,KAAKia,qBAAuB,WACrBnc,I,+BAGX,WACIkC,KAAK5B,WAAa,KAClB4B,KAAKqa,gBAAkB,O,kCAG3B,SAAqBvc,GACjB,IAAMsC,EAAMJ,KAAKwa,cAGjB,GAFAxa,KAAKia,qBAAuB,WAC5Bja,KAAKsc,eAAetc,KAAKG,MACP,IAAfC,EAAImE,OAAc,CACjB,GAA4B,gBAAzBvE,KAAKqa,kBAKA,aAAa/Z,KAAKF,GAClB,OAAOJ,KAAKkb,oBAEpBlb,KAAK5B,YAAc4B,KAAK5B,YAAc,IAAMgC,EAEhD,OAAOtC,I,qCAMX,SAAwBA,EAAO+iB,GAC3B,IAAIxc,EAAOrE,KAAK5B,YAAc,GAe9B,OAdGiG,EAAKE,OAAS,GACbvE,KAAK5B,WAAaiG,EAAKqB,MAAM,GAAI,GACjC1F,KAAKsc,eAAetc,KAAKG,OAItB0gB,GACC7gB,KAAKqa,gBAAkBwG,EACvB7gB,KAAKsc,eAAeuE,IAGpB7gB,KAAK4gB,oBAEb5gB,KAAKia,qBAAuB,WACrBnc,I,kCASX,SAAqBA,EAAOgjB,GACxB,GAAuB,OAApB9gB,KAAK5B,WACJ,OAAON,EACX,GAA8B,IAA3BkC,KAAK5B,WAAWmG,OAEf,OADAvE,KAAK4gB,oBACE9iB,EAGX,GAAiB,SAAdgjB,GAAsC,YAAdA,EAAyB,CAChD,IAAI7a,EAAOC,EAAS6a,8BAA8B/gB,KAAK5B,YAGvD,MAFiB,YAAd0iB,IAAyB7a,EAAKwQ,YAAa,GAC9CzW,KAAK4gB,oBACE9iB,EAAM0G,KAAKyB,GAItB,IAAI6J,EAsBJ,OApBIA,EADa,eAAdgR,EACY,IAAI/Q,EAAY,SAAU,CACjC,IAAIc,EAAS7Q,KAAKmX,cAAcnX,KAAK5B,eAEvB,UAAd0iB,EAYO,IAAI/Q,EAAY/P,KAAK5B,YAGrB,IAAIyS,EAAS7Q,KAAKmX,cAAcnX,KAAK5B,aACpD4B,KAAK4gB,oBACE9iB,EAAMme,UAAUnM,K,2BAI3B,SAAczL,GACV,IAAM+S,EAAe,CACjB,IAAK,MACL,EAAK,MACL,IAAK,WACL,IAAK,MACL,IAAK,QACL,IAAK,QACL,EAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,SACL,KAAM,gBAEV,OAAO/S,EAAKkE,WAAW,qBAAqB,SAAA8O,GAAK,OAAID,EAAaC,Q,kCAGtE,SAAqBvZ,GACjB,MAAwBA,EAAM+e,IAAI,GAAlC,mBAAKjE,EAAL,KAAgB3S,EAAhB,KAKA,GAJwB,SAArBA,EAAKkQ,cAEJlQ,EAAOC,EAAS8R,UAAU/R,EAAKxB,OAEX,SAArBwB,EAAKkQ,YAGJ,OAFAlQ,EAAOA,EAAK6Q,SACPL,YAAcxQ,EAAKwQ,WACjBmC,EAAUpU,KAAKyB,GAGtBjG,KAAKkb,sB,yCAGb,SAA4Bpd,GACxBkC,KAAKoa,mBAAqBpa,KAAKoa,kBAC/Bpa,KAAKia,qBAAuB,a,2BAMhC,SAAcnc,EAAOmF,EAAMkP,EAAOsN,EAAQuB,GACtC,IAAMC,OAAoCzR,IAAtBwR,EAAmC,EAAIxE,SAASwE,GACpE,EAAoCljB,EAAM+a,UAAUoI,GAApD,iBAAOrI,EAAP,KAAqBxH,EAArB,WACMtB,EAAW,IAAIkB,EAAc/N,EAAMkP,EAAOsN,EAAQrO,GACxD,OAAOwH,EAAUqD,UAAUnM,K,6BAI/B,SAAgBhS,GACZ,MAAwBA,EAAM+a,UAAU,GAAxC,mBAAKD,EAAL,KAAgBnU,EAAhB,KAYA,MANwB,cAArBA,EAAK2K,aAAkD,MAAnB3K,EAAKwM,WACrB,MAApBxM,EAAKyM,YAAsBzM,EAAK2M,YAAY7M,OAAS,EACpDE,EAAO,IAAIuM,EAAc,IAAK,IAAKvM,EAAK0M,YAAa1M,EAAK2M,aACjC,cAArB3M,EAAK2K,cACT3K,EAAOuM,EAAcwC,aAAa/O,IAE/BmU,EAAUqD,UAAUxX,K,iCAK/B,SAAoB3G,EAAOkjB,GACvB,IAAMC,OAAoCzR,IAAtBwR,EAAmC,EAAIxE,SAASwE,GACpE,EAA8BljB,EAAM+e,IAAIoE,GAAxC,iBAAOrI,EAAP,KAAqBxP,EAArB,WACA,OAAGA,EAAMyK,OAAM,SAAA5N,GAAI,MAAyB,SAArBA,EAAKkQ,eACjByC,EAAUI,eACb5P,EAAMqG,KAAI,SAAAxJ,GAAI,OAAI+K,EAAc8K,iBAAiB7V,EAAKxB,UAEnD3G,I,+BAKf,SAAkBA,EAAOojB,GACrB,IAAMC,EAAY3E,SAAS0E,GAC3B,EAAoDpjB,EAAM+a,UAAUsI,EAAU,GAA9E,iBAAOvI,EAAP,KAAkBwI,EAAlB,KAAmCnR,EAAnC,WACA,GAAgC,YAA7BmR,EAAahS,aAA8D,IAAjCgS,EAAa5O,gBACtD,OAAOoG,EAAUqD,UACb,IAAIlM,EAAYqR,EAAa9b,aAAc2K,IAE/CjQ,KAAKkb,sB,4BAMb,SAAepd,GACX,MAAwDA,EAAM+a,UAAU,GAAxE,mBAAKD,EAAL,KAAgBnI,EAAhB,KAA2BC,EAA3B,KAAuCF,EAAvC,KACiC,YAA9BA,EAAcpB,aACiB,WAA/BoB,EAAclL,cACoB,IAAlCkL,EAAcgC,kBACbhC,EAAgB,IAAIM,EAAa,CAC7B,IAAIf,EAAY,QAASS,EAAe,IAAIT,EAAY,WAChE,IAAMD,EAAW,IAAIS,EAAUC,EAAeC,EAAWC,GACzD,OAAOkI,EAAUqD,UAAUnM,K,6BAI/B,SAAgBhS,EAAOujB,EAAaC,GAKhC,GAAgC,SAA7BthB,KAAK2Z,SAAShZ,WAAuB,CACpC,IAAMqC,EAAMtB,SAASC,eAAe,eACjCqB,GAAOA,EAAIue,YACVvhB,KAAK2Z,SAAS6H,gBAAkBxe,EAAIue,WAE5CvhB,KAAK2Z,SAAShZ,WACTX,KAAK2Z,SAAShZ,aAAe0gB,EAAe,KAAOA,EACxB,SAA7BrhB,KAAK2Z,SAAShZ,YAAyB2gB,IACtCthB,KAAK2Z,SAAS6H,gBAAkBF,GACpCthB,KAAK2Z,SAAS4D,OACdvd,KAAK0Z,cAAc+H,wB,uBAIvB,SAAU3jB,EAAO4jB,EAAetX,GAC5B,IAAIuP,EAAW3Z,KAAK2Z,SAChB/Y,EAAS+Y,EAAS/Y,OAClB+gB,GAAsB,EAC1B,OAAOD,GACP,IAAK,cACD,OAAOtX,GACP,IAAK,IAAKxJ,EAAOE,YAAc,EAAG,MAClC,IAAK,IAAKF,EAAOE,cAAe,MAChC,IAAK,IAAKF,EAAOE,cAGjB,MACJ,IAAK,aACD,OAAOsJ,GACP,IAAK,kBAAmBxJ,EAAOI,0BAA4BJ,EAAOI,yBAA0B,MAC5F,IAAK,eAAgBJ,EAAOG,uBAAyBH,EAAOG,sBAG5D,MACJ,IAAK,qBACDH,EAAOK,aAAeL,EAAOK,YAC7B0gB,GAAsB,EACtB,MACJ,IAAK,aACD/gB,EAAOM,WAAakJ,EACpB,MACJ,IAAK,cACDxJ,EAAOO,YAAcqb,SAASpS,GAC9B,MACJ,IAAK,QACDuP,EAASlZ,eAAiB2J,EAC1B,MACJ,IAAK,eACDuP,EAAS/Y,OAAS+Y,EAAS9Y,iBAC3B8gB,GAAsB,EAQ1B,GAHAhI,EAAS4D,OACTvd,KAAK0Z,cAAc+H,sBACnBzhB,KAAK4hB,oBACFD,EAGC,OADA3hB,KAAK6Z,aAAe7Z,KAAKqG,UAAU3E,SAASmgB,kBACrC/jB,EAAM+jB,oB,iCAMrB,SAAoB/jB,EAAOgkB,EAAanQ,GACpC,IAAMsP,EAAatP,EAAe6K,SAAS7K,GAAgB3R,KAAK+hB,2BAChE,EAA8BjkB,EAAM+a,UAAUoI,GAA9C,iBAAOrI,EAAP,KAAqB7H,EAArB,WACMiR,EAAc,IAAIxQ,EACnBsQ,GAAe,UAChB,EAAGb,EAAY,CAAClQ,IACpB,OAAO6H,EAAUqD,UAAU+F,K,6BAM/B,SAAgBlkB,GACZ,MAA4BA,EAAMmkB,WAAW,GAA7C,mBAAOrJ,EAAP,KAAkBsJ,EAAlB,KAAsBC,EAAtB,KACMC,EAAY5Q,EAAU6Q,aAAaH,EAAIC,GAC7C,OAAGC,EACQxJ,EAAUqD,UAAUmG,GAEpBxJ,EAAUD,e,4BAIzB,SAAe7a,GACX,MAAgCA,EAAMmkB,WAAW,GAAjD,mBAAOrJ,EAAP,KAAkB0J,EAAlB,KACA,OAAO1J,EAAUI,eAAesJ,EAAWC,gB,+BAI/C,SAAkBzkB,GAAQ,IAAD,EACrB,EAAiCA,EAAMmkB,WAAW,GAAlD,mBAAOrJ,EAAP,KAAkBoJ,EAAlB,KACIQ,GAAkB,MAAGpQ,OAAH,oBAAa4P,EAAYnQ,gBAC/C,OAAO+G,EAAUI,eAAewJ,K,uCAGpC,SAA0B1kB,GACtB,MAAiCA,EAAM2kB,aAAa,GAApD,mBAAO7J,EAAP,KAAkBoJ,EAAlB,KACA,OAAOpJ,EAAUqD,UAAU+F,EAAYU,mB,iCAG3C,SAAoB5kB,GAChB,MAAiCA,EAAM2kB,aAAa,GAApD,mBAAO7J,EAAP,KAAkBoJ,EAAlB,KACA,OAAOpJ,EAAUqD,UAAU+F,EAAYW,gB,mCAI3C,SAAsB7kB,EAAO8kB,GACzB,MAAiC9kB,EAAM2kB,aAAa,GAApD,mBAAO7J,EAAP,KAAkBoJ,EAAlB,KACA,OAAOpJ,EAAUqD,UAAU+F,EAAYa,gBAAgBD,M,gCAK3D,SAAmB9kB,EAAOglB,EAAkBnM,GACxC,MAAiC7Y,EAAM2kB,aAAa,GAApD,mBAAO7J,EAAP,KAAkBoJ,EAAlB,KACMzN,EAAiC,WAArBuO,EAEZpO,EAAOH,EAAYyN,EAAYrQ,aAAeqQ,EAAYtQ,UAC1D3C,EAAQ/O,KAAK4c,qBAAqB,EAAG,MAC3C,GAAa,OAAV7N,IAAmBA,EAAQ,GAAKA,EAAQ2F,EAAK,GAC5C,OAAO1U,KAAKkb,oBAEZ,IAAMpL,EAAWkS,EAAYe,eACzBxO,EAAqB,OAAVxF,EAAiB,KAAOA,EAAM,EAAG4H,GAAgB,GAChE,OAAOiC,EAAUqD,UAAUnM,K,4BAInC,SAAehS,EAAOklB,GAElB,IAEIrN,EAFEsL,EAAajhB,KAAK+hB,2BACxB,EAA8BjkB,EAAM+a,UAAUoI,GAA9C,iBAAOrI,EAAP,KAAqB7H,EAArB,WAEA,OAAOiS,GACP,IAAK,WAAY,IAAK,SAAUrN,EAAa,OAAQ,MACrD,IAAK,QAAS,IAAK,SAAUA,EAAa,QAAS,MACnD,IAAK,WAAYA,EAAa,WAAYqN,EAAa,QAAS,MAChE,IAAK,YAAarN,EAAa,WAAYqN,EAAa,SAAU,MAClE,QAASrN,EAAa,QAEtB,IAAM9D,EAAgBL,EAAUyR,eAAelS,EAAO4E,GAChD2M,EAAa,IAAI9Q,EACnBwR,EAAYnR,EAActN,OAAQsN,EAAc,GAAGtN,OAAQsN,GAC/D,OAAO+G,EAAUqD,UAAUqG,K,2BAK/B,SAAcxkB,EAAOia,EAAgBmL,GAIjC,IAHA,IAAMjC,EAAajhB,KAAK+hB,2BACxB,EAA8BjkB,EAAM+a,UAAUoI,GAA9C,iBAAOrI,EAAP,KAAqB7H,EAArB,WACItM,EAAOsM,EAAM,GACToD,EAAI,EAAGA,EAAI8M,EAAY9M,IAAK,CAChC,IAAMlQ,EAAKif,GAAwB/O,IAAM8M,EAAW,EAAKiC,EAAuBnL,EAChFtT,EAAOwK,EAAK4G,aAAapR,EAAM,IAAIoM,EAAS5M,IAC5CQ,EAAOwK,EAAK4G,aAAapR,EAAMsM,EAAMoD,IAEzC,OAAOyE,EAAUqD,UAAUxX,K,iCAM/B,SAAoB3G,EAAOqlB,EAAYD,GACnC,IAAMjC,EAAajhB,KAAK+hB,2BACxB,EAA8BjkB,EAAM+a,UAAUoI,GAA9C,iBAAOrI,EAAP,KAAqB7H,EAArB,WACMqS,EAAsB,IAAIvS,EAASsS,GACrC1e,EAAOsM,EAAMkQ,EAAW,GACzBiC,GAAwBjC,EAAa,IACpCxc,EAAO,IAAI8L,EAAU6S,EAAqB,IAAIvS,EAASqS,GAAuBze,IAClF,IAAI,IAAI0P,EAAI8M,EAAW,EAAG9M,GAAK,EAAGA,IAC9B1P,EAAO,IAAI8L,EAAU6S,EAAqBrS,EAAMoD,GAAI1P,GACxD,OAAOmU,EAAUqD,UAAUxX,K,+BAO/B,SAAkB3G,GACd,IAAMmjB,EAAajhB,KAAK+hB,2BACxB,EAA8BjkB,EAAM+a,UAAUoI,GAA9C,iBAAOrI,EAAP,KACMzL,EADN,WACsBsC,KAAI,SAAAhL,GAAI,OAAIA,EAAKiL,cAAY1K,KAAK,QAClD8K,EAAW,IAAIC,EAAY,WAAY,CAAC,IAAIc,EAAS1D,KAC3D,OAAOyL,EAAUqD,UAAUnM,K,0BAG/B,SAAahS,GACT,IAGIuY,EAHJ,EAAyCvY,EAAM+e,IAAI,GAAnD,mBAAKjE,EAAL,KAAgByK,EAAhB,KAA6BC,EAA7B,KACA,MAA+B,SAA5BD,EAAYlN,aAKsB,SAAzBmN,EAASnN,YAJVrY,EAAM6a,cAKbtC,EAAWiN,EAAS7e,KAGjBmU,EAAUpU,KAAK,IAAI4R,EAASiN,EAAY5e,KAAM4R,O,kCAMzD,SAAqBvY,GACjB,MAA0BA,EAAM+e,IAAI,GAApC,mBAAOjE,EAAP,KAAkB3S,EAAlB,KACMsd,EAAOvjB,KAAK4c,qBAAqB,EAAG,KAM1C,OALA5c,KAAK0Z,cAAc9S,MAAM4c,gBAAgBD,GAAQtd,EACrC,IAATsd,EACCvjB,KAAKsd,OAAO,uBAEZtd,KAAKsd,OAAO,4BAA8BiG,GACvC3K,EAAUpU,KAAKyB,K,qCAG1B,SAAwBnI,GACpB,IAAMylB,EAAOvjB,KAAK4c,qBAAqB,EAAG,KACpC3W,EAAOjG,KAAK0Z,cAAc9S,MAAM4c,gBAAgBD,GACtD,GAAGtd,EACC,OAAOnI,EAAM0G,KAAKyB,EAAK6Q,SAEvB9W,KAAKkb,sB,kCAMb,SAAqBpd,EAAO2lB,GACxB,IAAMC,EAAoBlH,SAASiH,GACnCzjB,KAAKia,qBAAuB,WAI5B,IAAI0J,EAAYjiB,SAASC,eAAe,sBACxC,GAAIgiB,EAAJ,CACA,IAAMC,EAAgBD,EAAUE,uBAAuB,YACvD,GAA4B,IAAzBD,EAAcrf,OAAjB,CACA,IAAMuf,EAAeF,EAAc,GAC7BG,EAAgBD,EAAaE,UAC7BC,EAAmBH,EAAaE,UAAYF,EAAaI,aAAeP,EAAUQ,aAClFC,EAAQV,EAAkB,IAC1BW,EAAgBxiB,KAAKC,MAAMiiB,GAAe,EAAEK,GAASH,EAAiBG,GAC5ET,EAAUpC,UAAY8C,M,uBAG1B,SAAUvmB,EAAOwmB,EAAYC,EAAkBC,GAC3C,IAAIC,EAAY/iB,SAASC,eAAe2iB,GACxC,GAAIG,EAAJ,CACA,IAAM7iB,EAAa4a,SAASgI,GAAqB,MAAQ,IACjC,eAArBD,EACCE,EAAUC,YAAc7iB,KAAKC,MAAM2iB,EAAUE,YAAc/iB,GAE3D6iB,EAAUlD,WAAa1f,KAAKC,MAAM2iB,EAAUN,aAAeviB,M,wCAGnE,SAA2B9D,GACvB,IAAM8mB,EAAgB5kB,KAAKqG,UAAU3E,SAASmV,UAC9CgO,UAAUC,UAAUC,UAAUH,GAC9B5kB,KAAKsd,OAAO,kC,2CAGhB,SAA8Bxf,GAC1B,IAAM6e,EAAM3c,KAAK4c,qBAAqB,EAAG9e,EAAMoL,SAE/C,EAA8BpL,EAAM+e,IAAIF,GAAxC,iBACMiI,GADN,gBAC4BnV,KAAI,SAAAxJ,GAAI,OAAIA,EAAK4Q,aAAW7R,KAAK,SAC7D6f,UAAUC,UAAUC,UAAUH,GAC9B5kB,KAAKsd,OAAO,UAAYX,EAAM,SAAmB,IAARA,EAAY,GAAK,KAAO,qB,KCx1CnEqI,EAAKC,IAAMC,cAGXC,E,kDACF,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GAIN,IAAIzL,EAAWpZ,EAAS8kB,0BALT,OAOf,EAAKze,MAAQ,CACTP,UAAW,IAAIR,EACf8T,SAAUA,EACVyD,mBAAoB,IAAIzP,EACxB2X,oBAAqB,IAAIhb,EACzBC,iBAAkB,IAAIzD,EACtBye,cAAe,IAAI9L,EAAJ,eAAuBE,GACtC6L,WAAY,IAAIjf,EAChBid,gBAAiB,IAErB,EAAK5c,MAAM4e,WAAWC,MAAM,EAAK7e,MAAMP,WACvC,EAAKO,MAAM0e,oBAAoB/a,iBAAmB,EAAK3D,MAAM2D,iBAC7D,EAAK3D,MAAM0e,oBAAoBxa,cAAgB,kBAAM,EAAK4a,+BAE1D,EAAKC,cAAgB,EAAKA,cAAcpe,KAAnB,gBACrB,EAAKqe,mBAAqB,EAAKA,mBAAmBre,KAAxB,gBAC1B,EAAKse,uBAAyB,EAAKA,uBAAuBte,KAA5B,gBAE9B,EAAKX,MAAM2D,iBAAiBub,cAAc,EAAKC,iBAAiBxe,KAAtB,iBAzB3B,E,oDA6BnB,WAEI,GADAvH,KAAKwd,oBACFxd,KAAK4G,MAAM+S,SAASjZ,qBACnBV,KAAK8d,uBAAuB9d,KAAK4G,MAAM+S,SAASjZ,0BAC/C,CACD,IAAI0c,EAAqBpd,KAAK4G,MAAMwW,mBAChCzD,EAAW3Z,KAAK4G,MAAM+S,SACpBrR,EAAW,WACjB8U,EAAmBtP,iBAAmBsP,EAAmBvP,kBAAoBvF,EAC7EqR,EAASjZ,qBAAuB4H,EAChCqR,EAAS4D,U,wCAIjB,WACIvd,KAAKgmB,SAAS,CAAC5I,mBAAoBpd,KAAK4G,MAAMwW,uB,yCAGlD,WACI,IAAMkI,EAAsBtlB,KAAK4G,MAAM0e,oBACvCtlB,KAAKgmB,SAAS,CAACV,oBAAqBA,IACjCA,EAAoBza,yBACnBya,EAAoBza,wBAAyB,EAC7C7K,KAAKwd,uB,+BAKb,WACIxd,KAAK4G,MAAM2D,iBAAiB0b,gBACxBjmB,KAAKkmB,2BAA2B3e,KAAKvH,MACrCA,KAAKmmB,wBAAwB5e,KAAKvH,S,wCAG1C,SAA2B4N,GACvB,IAAIwP,EAAqBpd,KAAK4G,MAAMwW,mBACpCA,EAAmBrP,aAAc,EACjCqP,EAAmBxP,UAAYA,EAC/BwP,EAAmBgJ,eAAe,YAAY,GAC9CpmB,KAAKgmB,SAAS,CAAC5I,mBAAoBA,M,qCAGvC,WACI,IAAIA,EAAqBpd,KAAK4G,MAAMwW,mBACpCA,EAAmBrP,aAAc,EACjC/N,KAAKgmB,SAAS,CAAC5I,mBAAoBA,M,oCAGvC,SAAuB9U,GACnBtI,KAAK4G,MAAM2D,iBAAiB8b,WACxB/d,EACAtI,KAAKsmB,mBAAmB/e,KAAKvH,MAC7BA,KAAKumB,gBAAgBhf,KAAKvH,S,gCAGlC,SAAmBsI,EAAU0S,GACzB,IAAMoC,EAAqBpd,KAAK4G,MAAMwW,mBAChCzD,EAAW3Z,KAAK4G,MAAM+S,SAC5ByD,EAAmBvP,kBAAoBuP,EAAmBtP,iBAAmBxF,EAC7EqR,EAASjZ,qBAAuB4H,EAChCqR,EAAS4D,OACTvd,KAAKgmB,SAAS,CAAC3f,UAAW2U,EAAeoC,mBAAoBA,IAC7Dpd,KAAK4G,MAAM4e,WAAWC,MAAMzK,GAC5Bhb,KAAK4G,MAAM2e,cAAcjI,OAAO,WAAahV,K,6BAMjD,SAAgBA,EAAUke,M,+BAI1B,WACIxmB,KAAKyhB,sBACLhE,OAAO9Q,iBAAiB,UAAW3M,KAAK2lB,eACxClI,OAAO9Q,iBAAiB,eAAgB3M,KAAK4lB,oBAC7CnI,OAAO9Q,iBAAiB,mBAAoB3M,KAAK6lB,wBAGjD7lB,KAAKwd,sB,iCAGT,WACOxd,KAAKymB,gBAAgBC,SAAW1mB,KAAK2mB,mBAAmBD,SACxD1mB,KAAK4mB,gBAAgBF,SACpB1mB,KAAK4G,MAAM+S,SAAS8H,oBAChBzhB,KAAKymB,gBAAgBC,QAAS1mB,KAAK2mB,mBAAmBD,QACtD1mB,KAAK4mB,gBAAgBF,W,gCAIjC,WAEI,IAAMpe,EAAWtI,KAAK4G,MAAMwW,mBAAmBtP,iBACzC+Y,EAAe,WACfC,EAAYxe,EAAYue,cAAuBve,EAAYue,EAC9DC,IAAcplB,SAASqlB,QACtBrlB,SAASqlB,MAAQD,K,kCAGzB,WACIrJ,OAAOuJ,oBAAoB,UAAWhnB,KAAK2lB,eAC3ClI,OAAOuJ,oBAAoB,eAAgBhnB,KAAK4lB,oBAChDnI,OAAOuJ,oBAAoB,mBAAoBhnB,KAAK6lB,0B,oBAKxD,WACI,IAAIxf,EAAYrG,KAAK4G,MAAMP,UAM3B,OAJArG,KAAKymB,gBAAkBxB,IAAMgC,YAC7BjnB,KAAK2mB,mBAAqB1B,IAAMgC,YAChCjnB,KAAK4mB,gBAAkB3B,IAAMgC,YAEtBjC,EACH,MAAO,CAACkC,GAAI,eAAgBC,UAAW,SAAWnnB,KAAK4G,MAAM+S,SAASlZ,gBACtEukB,EAAG,MAAO,CAACmC,UAAW,oBAAqBD,GAAI,cAAeE,IAAKpnB,KAAKymB,iBACrEzB,EAAGqC,GAAqB,CACpB1N,SAAU3Z,KAAK4G,MAAM+S,SACrB7b,MAAOuI,EAAUvI,MACjBynB,cAAevlB,KAAK4G,MAAM2e,gBAE9BP,EAAGsC,EAAwB,CAACjhB,UAAWA,EAAWkf,cAAevlB,KAAK4G,MAAM2e,iBAC/EP,EAAG,MAAO,CAACmC,UAAW,uBAAwBD,GAAI,iBAAkBE,IAAKpnB,KAAK2mB,oBAC3E3B,EAAG,MAAO,CAACkC,GAAI,sBACZlC,EAAGuC,GAAmB,CAClB5N,SAAU3Z,KAAK4G,MAAM+S,SACrBjY,SAAU2E,EAAU3E,SACpB4G,SAAUtI,KAAK4G,MAAMwW,mBAAmBtP,iBACxC9H,SAAUK,EAAUL,aAE9Bgf,EAAGwC,GAAqB,CACpB7N,SAAU3Z,KAAK4G,MAAM+S,SACrBiN,gBAAiB5mB,KAAK4mB,gBACtBtB,oBAAqBtlB,KAAK4G,MAAM0e,oBAChC/a,iBAAkBvK,KAAK4G,MAAM2D,iBAC7B6S,mBAAoBpd,KAAK4G,MAAMwW,wB,2BAK3C,SAAczV,GAEV,IAAGA,EAAM8f,SAAU9f,EAAM+f,QAAzB,CAEA,IAAMtnB,EAAMJ,KAAK2nB,oBAAoBhgB,GACrC,GAAW,SAARvH,GAA0B,iBAARA,EAArB,CAGA,IAAIiG,EAAYrG,KAAK4G,MAAMP,UAC3B,EAAmCrG,KAAK4G,MAAM2e,cAAcqC,WAAWvhB,EAAWjG,GAAlF,mBAAKynB,EAAL,KAAkB7M,EAAlB,KACA,GAAG6M,EAAa,CACZlgB,EAAMmgB,iBAEN,IAAMC,EAAU/nB,KAAKgoB,kBAAkBhN,GACpC+M,EACC/M,EAAgB+M,EAEhB/nB,KAAK4G,MAAM2e,cAAcrK,oBAE7B,IAAI+M,EAAgB,CAAC5hB,UAAW2U,GAC7Bhb,KAAK4G,MAAM2e,cAAczL,gBACxB9Z,KAAKwd,oBACLyK,EAAc7K,mBAAqBpd,KAAK4G,MAAMwW,oBAElDpd,KAAKgmB,SAASiC,Q,iCAItB,SAAoBtgB,GAChB,IAAIvH,EAAMuH,EAAMvH,IAWhB,OATIA,EAAIoF,WAAW,UAAoB,UAARpF,GAA2B,cAARA,IAAwBuH,EAAMugB,WAC5E9nB,EAAM,SAAWA,GAClBuH,EAAMwgB,UACL/nB,EAAM,QAAUA,GAMbA,I,gCAIX,SAAmBuH,GACf,IAAMW,EAAWtI,KAAK4G,MAAMwW,mBAAmBtP,iBAG/C,OAFGxF,GACCtI,KAAK4G,MAAM2D,iBAAiBmD,WAAW1N,KAAK4G,MAAMP,UAAWiC,GAC1D,O,oCAMX,SAAuBX,GACnB3H,KAAKgmB,SAAS,M,+BAIlB,SAAkBhL,GACd,IAAIwK,EAAaxlB,KAAK4G,MAAM4e,WAC5B,OAAOxlB,KAAK4G,MAAM2e,cAActL,sBAChC,IAAK,OAAQ,OAAOuL,EAAW4C,aAC/B,IAAK,OAAQ,OAAO5C,EAAW6C,aAC/B,IAAK,WAAY,OAAOrN,EACxB,IAAK,QAED,OADAwK,EAAWC,MAAMzK,GACVA,EACX,QAGI,OADAwK,EAAW8C,WAAWtN,GACfA,O,GApPDiK,IAAMsD,WA2PlBjB,E,4JACF,WACI,IAAM/B,EAAgBvlB,KAAKolB,MAAMG,cAC7BiD,OAAiBhZ,EACfwK,EAAoBuL,EAAcvL,kBACpCyO,EAAalD,EAAcplB,KAU/B,GATqC,OAAlColB,EAAcrL,kBAEbuO,EAAa,CACTA,EAAY,IACXlD,EAAcrL,gBAAkB,EAAI,IAAMqL,EAAcrL,gBAAgBjP,WAAa,KACxFjG,KAAK,KAIRgV,EAAmB,CAElB,IAAM0O,EAAQ1O,EAAkBrH,QAAQ,KAEpC6V,EADDE,GAAS,EACS1D,EACb,OAAQ,CAACmC,UAAW,gBACpBnC,EAAG,OAAQ,GAAIhL,EAAkBtU,MAAM,EAAGgjB,EAAM,IAChD1D,EAAG,OAAQ,CAACmC,UAAW,eAAgBnN,EAAkBtU,MAAMgjB,EAAM,KAExD1D,EAAG,OAAQ,CAACmC,UAAW,gBAAiBnN,OAE1C,SAAfyO,IACJD,EAAiBxD,EACb,OAAQ,CAACmC,UAAW,QACpBsB,EAAWlgB,WAAW,IAAK,OACnC,OAAOyc,EAAG,MAAO,CAACmC,UAAW,aAAcqB,O,GA9BdvD,IAAMsD,WAmCrClB,G,4JACF,WAAU,IAAD,OACD9B,EAAgBvlB,KAAKolB,MAAMG,cACzBoD,EAAkB3oB,KAAKolB,MAAMtnB,MAAMsL,MAAMqG,KAAI,SAACxJ,EAAM8I,GAGtD,IAAI6Z,EACuB,UAAvBrD,EAAcplB,OACTolB,EAAcrL,gBAAkB,GAChC,EAAKkL,MAAMtnB,MAAMsL,MAAM7E,OAAOwK,GAASwW,EAAcrL,iBAC9D,OAAGqL,EAAcnL,mBAAqBrL,IAAU,EAAKqW,MAAMtnB,MAAMsL,MAAM7E,OAAO,EAEnEygB,EACH6D,GAAsB,CAClB5iB,KAAMA,EACN7F,IAAK6F,EAAK6iB,UAAU/Z,KAGzBiW,EACH+D,GAAe,CACX9iB,KAAMA,EACN2iB,SAAUA,EACV3nB,YAAa,EAAKmkB,MAAMzL,SAAS/Y,OAAOK,YACxC+nB,SAAU/D,IAAMgC,YAChB7mB,IAAK6F,EAAK6iB,UAAU/Z,QAGhC,GAAgC,OAA7BwW,EAAcnnB,WAAqB,CAClC,IAAM6qB,EAAYjE,EACdkE,GAAoB,CAChB7kB,KAAMkhB,EAAcnnB,WACpB+qB,WAAY5D,EAAclL,gBAC1Bja,IAAK,cAEbuoB,EAAgBnkB,KAAKykB,GAEzB,IAAIG,EAAc,CAAC,eAGnB,OAFGppB,KAAKolB,MAAMzL,SAAS/Y,OAAOG,uBAC1BqoB,EAAY5kB,KAAK,mBACdwgB,EAAG,MAAO,CAACmC,UAAWiC,EAAYpkB,KAAK,MAAO2jB,O,GAvC3B1D,IAAMsD,WA4ClChB,G,4JACF,WAAU,IAAD,OACC7lB,EAAW1B,KAAKolB,MAAM1jB,SACtB2nB,EAAgB3nB,EAAS0H,MAAMqG,KAAI,SAACxJ,EAAM8I,GAC5C,IAAIia,EAAW/D,IAAMgC,YACfqC,EAAc5nB,EAASyX,kBAAoBpK,EAAM,EAEvD,OADGua,IAAa,EAAKC,kBAAoBP,GAClChE,EACH+D,GAAe,CACX9iB,KAAMA,EACN2iB,SAAUU,EACVroB,YAAa,EAAKmkB,MAAMzL,SAAS/Y,OAAOK,YACxC+nB,SAAUA,EACV5oB,IAAK6F,EAAK6iB,UAAU/Z,QAOhCsa,EAAc7kB,KACVwgB,EAAG,MAAO,CAACmC,UAAW,gBAAiB/mB,IAAK,mBAKhD,IAAMopB,EAA+C,IAA7B9nB,EAASyX,gBAC9BqQ,IACCxpB,KAAKupB,kBAAoBtE,IAAMgC,aACnC,IAAMwC,EAAazE,EACf,MAAO,CACHmC,UAAW,cAAgBqC,EAAkB,YAAc,IAC3DppB,IAAK,aACLgnB,IAAKoC,EAAkBxpB,KAAKupB,kBAAoB,OAGpDH,EAAc,CAAC,kBAGnB,OAFGppB,KAAKolB,MAAMzL,SAAS/Y,OAAOI,0BAC1BooB,EAAY5kB,KAAK,mBACdwgB,EAAG,MAAO,CAACmC,UAAWiC,EAAYpkB,KAAK,MACpC,CAACykB,GAAYrX,OAAOiX,M,gCAGlC,WACIrpB,KAAK0pB,6B,sCAGT,WACI,GAAI1pB,KAAKupB,kBAAT,CACA,IAAMtjB,EAAOjG,KAAKupB,kBAAkB7C,QACpC,GAAIzgB,EAAJ,CACA,IAAI0d,EAAYjiB,SAASC,eAAe,sBAClCgoB,EAAc1jB,EAAKie,aAAa,EACnCje,EAAK+d,UAAYL,EAAUpC,YAC1BoC,EAAUpC,UAAYtb,EAAK+d,UAAY2F,GACxC1jB,EAAK+d,UAAY/d,EAAKie,aAAeP,EAAUpC,UAAYoC,EAAUO,eACpEP,EAAUpC,UAAYtb,EAAK+d,UAAY/d,EAAKie,aAAeP,EAAUO,aAAeyF,S,GAxDhE1E,IAAMsD,WA+DhCW,G,4JACF,WACI,IAAMU,EAAa,cAAgB5pB,KAAKolB,MAAM+D,WAAa,QAC3D,OAAOnE,EAAG,MAAO,CAACmC,UAAWyC,GAAa5pB,KAAKolB,MAAM/gB,U,GAH5B4gB,IAAMsD,WAQjCsB,G,4JACF,WACI,IAAMC,GAAsB9pB,KAAKolB,MAAMhI,mBAAmBrP,YAE1D,OADA/N,KAAK+pB,eAAiB9E,IAAMgC,YACrBjC,EACH,MAAO,CAACmC,UAAW,cAAeD,GAAI,eACtClC,EAAG,KAAM,GAAI,gBACbhlB,KAAKgqB,0BACLhqB,KAAKiqB,oBACLjqB,KAAKkqB,mBACLJ,GAAsB9E,EAAG,KAAM,GAAI,iBACnC8E,GAAsB9pB,KAAKmqB,kC,0CAInC,WACI,IAAM7E,EAAsBtlB,KAAKolB,MAAME,oBACnC+D,EAAgB,GAgBpB,GAdAA,EAAc7kB,KACVwgB,EAAG,IAAK,GAAI,8JAEhBqE,EAAc7kB,KACVwgB,EAAG,IAAK,GACLA,EAAG,SAAU,GAAIM,EAAoB8E,mBAEX,SAA9B9E,EAAoB1e,OACnByiB,EAAc7kB,KACVwgB,EAAG,IAAK,GACLA,EAAG,IAAK,CACJqF,KAAM,IACNC,QAAStqB,KAAKuqB,gBAAgBhjB,KAAKvH,OACpC,oBACXslB,EAAoBkF,qBAAsB,CACzC,IAAMC,EAAkBnF,EAAoBoF,6BAC5CrB,EAAc7kB,KACVwgB,EAAG,IAAK,GACLA,EAAG,IAAK,CAACqF,KAAM/E,EAAoB3a,aAAcggB,SAAUF,GACxD,aAAeA,KA0B7B,MAtBiC,SAA9BnF,EAAoB1e,OACnByiB,EAAc7kB,KACVwgB,EAAG,IAAK,GACLA,EAAG,OAAQ,GAAI,qBACfA,EAAG,QAAS,CACRhZ,KAAM,OACNob,IAAKpnB,KAAK+pB,iBAEd/E,EAAG,QAAS,CACRhZ,KAAM,SACN5B,MAAO,SACPkgB,QAAStqB,KAAK4qB,mBAAmBrjB,KAAKvH,UAKpB,SAA9BslB,EAAoB1e,OAAoB0e,EAAoB1a,sBAC3Dye,EAAc7kB,KACVwgB,EAAG,IAAK,GACLA,EAAG,OAAQ,CAACzjB,MAAO,CAACspB,WAAY,SAAU,mBAC1C7F,EAAG,OAAQ,GAAIM,EAAoB1a,wBAEvCoa,EAAE,WAAF,GAAG,MAAO,IAAV,OAAiBqE,M,qCAG5B,WACI,IAAMvb,EAAmB9N,KAAKolB,MAAMhI,mBAAmBtP,iBACvD,OAAIA,EACGkX,EACH,MAAO,CAACmC,UAAW,gBACnBnC,EAAG,QAAS,GAAI,iBAChBA,EAAG,OAAQ,CAACmC,UAAW,YAAarZ,IAJX,O,+BAOjC,WAAqB,IAAD,OACVsP,EAAqBpd,KAAKolB,MAAMhI,mBACtC,OAAGA,EAAmBrP,YACXiX,EAAG,IAAK,GAAI,sKACf5H,EAAmBxP,WAAawP,EAAmBxP,UAAUrJ,OAAS,EACnEygB,EACH,MAAO,GACPA,EAAG,QAAS,CAACmC,UAAW,cACrBnC,EAAG,QAAS,GACTA,EAAG,KAAM,GACNA,EAAG,KAAM,CAACmC,UAAW,YAAa,YAClCnC,EAAG,KAAM,CAACmC,UAAW,WAAY2D,QAAS,KAAM,QAChD9F,EAAG,KAAM,CAACmC,UAAW,YAAa2D,QAAS,KAAM,mBACvD9F,EAAG,QAAS,GACT5H,EAAmBxP,UAAU6B,KACzB,SAAC3D,EAAMiD,GAAP,OAAiB,EAAKgc,sBAAsBjf,EAAMiD,SAE5DqO,EAAmBxP,UAChBoX,EAAG,IAAK,GAAI,yBAEZA,EAAG,IAAK,GAAI,2B,mCAG3B,SAAsBlZ,EAAMiD,GACxB,IAAMqO,EAAqBpd,KAAKolB,MAAMhI,mBAClCgM,EAAc,GACftd,EAAKxD,WAAa8U,EAAmBvP,mBAAmBub,EAAY5kB,KAAK,iBACzEsH,EAAKxD,WAAa8U,EAAmBtP,kBAAkBsb,EAAY5kB,KAAK,gBAC3E,IAAMwmB,EAAalf,EAAK3C,oBAAsB2C,EAAK7C,iBACnD,OAAO+b,EACH,KAAM,CAACmC,UAAWiC,EAAYpkB,KAAK,KAAM5E,IAAK,QAAU0L,EAAKxD,UAC7D0c,EAAG,KAAM,CAACmC,UAAW,YAAarb,EAAKxD,UACvC0c,EAAG,KAAM,CAACmC,UAAW,YAClBtlB,KAAKopB,OAAOnf,EAAK/C,SAAS,MAAM,MAAQ,OAC3Cic,EAAG,KAAM,CAACmC,UAAW,YAClB6D,EAAa,WAA4B,IAAfA,EAAmB,GAAK,MACrDhG,EAAG,KAAM,CAACmC,UAAW,aAAcrb,EAAKzC,UAAU6hB,sBAClDlG,EAAG,KAAM,CAACmC,UAAW,aAAcrb,EAAKzC,UAAU8hB,yB,8BAG1D,WACI,IASMC,EATa,CACf,CAAC,SAAU,sBACX,CAAC,SAAU,6BACX,CAAC,QAAS,sBACV,CAAC,IAAK,wBACN,CAAC,IAAK,0BACN,CAAC,IAAK,qBACN,CAAC,IAAK,eAE0B3b,KAAI,SAAA4b,GACpC,kBAA4BA,EAA5B,GAAOC,EAAP,KAAgBC,EAAhB,KACA,OAAOvG,EACH,KAAM,GACNA,EAAG,OAAQ,CAACmC,UAAW,cAAemE,GACtCtG,EAAG,OAAQ,GAAI,IAAMuG,OAE7B,OAAOvG,EAAE,WAAF,GAAG,KAAM,CAACmC,UAAW,gBAArB,mBAAwCiE,O,gCAGnD,SAAmBzjB,GACf,IAAM6jB,EAAiBxrB,KAAK+pB,eAAerD,QAC3C,GAAI8E,EAAJ,CACA,IAAM5d,EAAY4d,EAAe5tB,MACT,IAArBgQ,EAAUrJ,OACTvE,KAAKyrB,gBAAgB7d,EAAU,IAC3BA,EAAUrJ,OAAS,EACvB4D,MAAM,+CAENA,MAAM,2C,6BAGd,SAAgB2D,GACZ,IAAMwZ,EAAsBtlB,KAAKolB,MAAME,oBACN,SAA9BA,EAAoB1e,OACnB0e,EAAoBmG,gBAAgB3f,K,6BAG5C,WACI,IAAMwZ,EAAsBtlB,KAAKolB,MAAME,oBACN,SAA9BA,EAAoB1e,OACnB0e,EAAoBiF,sB,GA7JGtF,IAAMsD,WAoKnCQ,G,4JACF,WACI,IAAI9iB,EAAOjG,KAAKolB,MAAMnf,KAClBmhB,EAAMpnB,KAAKolB,MAAM4D,SACjB7B,EAAYnnB,KAAKolB,MAAMwD,SAAW,YAAc,GAGpD,OAFwB,SAArB3iB,EAAKkQ,aAA0BlQ,EAAKwQ,aACnC0Q,EAAY,iBAAmBA,GAC5BlhB,EAAKkQ,aACZ,IAAK,OACD,OAAGlQ,EAAKoQ,UACJrW,KAAK0rB,QAAUzG,IAAMgC,YACdjC,EACH,MAAO,CAACmC,UAAW,aACnBnC,EAAG,MAAO,CAACmC,UAAW,WAAYC,IAAKpnB,KAAK0rB,SAAU,IACtD1G,EAAG,MAAO,CAACmC,UAAWA,EAAY,iBAAkBC,IAAKA,GAAM,MAG5DpC,EACH,MAAO,CAACmC,UAAW,aACnBnC,EAAG,MAAO,CAACmC,UAAWA,EAAY,iBAAkBC,IAAKA,GAAM,KAC3E,IAAK,OAED,OAAOpC,EACH,MAAO,CAACmC,UAAW,aACnBnC,EAAG,MAAO,CAACmC,UAAWA,EAAY,kBAC/BnC,EAAG,MAAO,CAACmC,UAAW,uBAAwBC,IAAKA,GAAM,MACpE,IAAK,YACD,OAAOpC,EACH,MAAO,CAACmC,UAAWA,EAAY,kBAC/BnC,EAAG,OACX,QACI,OAAOA,EAAG,MAAO,GAAI,W,+BAI7B,WACI,IAAM/e,EAAOjG,KAAKolB,MAAMnf,KAClB0lB,EAAO3rB,KAAKolB,MAAM4D,SAAStC,QAC7BiF,IACoB,SAArB1lB,EAAKkQ,aAEJnW,KAAK4rB,mBAAmB3lB,EAAKxB,KAAKiL,WAAYic,GAAO3rB,KAAKolB,MAAMnkB,aAC7DgF,EAAKoQ,UAAYrW,KAAK0rB,QAAQhF,SAC7B1mB,KAAK4rB,mBAAmB3lB,EAAKoQ,SAAS3G,WAAY1P,KAAK0rB,QAAQhF,SAAS,IAEnD,SAArBzgB,EAAKkQ,aAITnW,KAAK4rB,mBAAmB3lB,EAAKyJ,WAAYic,GAAM,M,gCAIvD,SAAmBE,EAAYF,EAAMG,GACf,KAAfD,GAAoC,QAAfA,IAEpBA,EAAa,mBAEjB,IAEIE,IAAMC,OACFH,EAAYF,EACZ,CAAEM,cAAc,EAAOC,YAAaJ,EAAcK,OAAO,EAAMC,OAAO,IAE9E,MAAM3e,GAGF,IAAM4e,EAAM5e,EAAExC,WACd0gB,EAAKW,UAAY,2BAA6BD,EAAM,c,GApEpCpH,IAAMsD,WA0E5BM,G,4JACF,WACI,IAAI5iB,EAAOjG,KAAKolB,MAAMnf,KACtB,OAAO+e,EACH,MAAO,CAACmC,UAAW,qBACnBnC,EAAG,MAAO,CAACmC,UAAW,gBAAiBlhB,EAAK4Q,gB,GALrBoO,IAAMsD,WAUnCf,G,4JACF,WACIxnB,KAAKusB,KAAO,CACR1uB,KAAMonB,IAAMgC,YACZuF,aAAcvH,IAAMgC,aAExB,IACIwF,EAAe,KAUnB,MATkB,UAFCzsB,KAAKolB,MAAMzL,SAAShZ,aAGnC8rB,EAAezH,EACX,MAAO,CAACkC,GAAI,mBACZlC,EAAG6E,GAAsB,CACrBvE,oBAAqBtlB,KAAKolB,MAAME,oBAChC/a,iBAAkBvK,KAAKolB,MAAM7a,iBAC7B6S,mBAAoBpd,KAAKolB,MAAMhI,uBAGpC4H,EACH,MAAO,CAACkC,GAAI,cAAeE,IAAKpnB,KAAKolB,MAAMwB,iBAC3C6F,EACAzH,EAAG,MAAO,CAACkC,GAAI,iBAAkBE,IAAKpnB,KAAKusB,KAAK1uB,MAC7CmnB,EAAG,MAAO,CAACmC,UAAW,OAAQC,IAAKpnB,KAAKusB,KAAKC,mB,+BAGxD,WACI,IAAME,EAAkBhrB,SAASC,eAAe,YAC1CgrB,EAAgB3sB,KAAKusB,KAAKC,aAAa9F,QAC1CgG,IACCA,EAAgBnrB,MAAMC,QAAU,QAChCxB,KAAK4sB,mBAAmBF,GACxBA,EAAgBG,WAAWC,YAAYJ,GACvCC,EAAcI,YAAYL,M,gCAIlC,WACI,IAAMvsB,EAAOH,KAAKolB,MAAMzL,SAAShZ,WAC9BX,KAAKusB,KAAK1uB,KAAK6oB,UACd1mB,KAAKusB,KAAK1uB,KAAK6oB,QAAQnlB,MAAMC,QAAoB,SAATrB,EAAkB,QAAU,QAC5D,SAATA,QACwCqP,IAAxCxP,KAAKolB,MAAMzL,SAAS6H,iBACpBxhB,KAAKolB,MAAMwB,gBAAgBF,UACyB,kBAAzC1mB,KAAKolB,MAAMzL,SAAS6H,gBAE1B/D,OAAOuP,SAASC,KAAO,IAAMjtB,KAAKolB,MAAMzL,SAAS6H,gBAIjDxhB,KAAKolB,MAAMwB,gBAAgBF,QAAQnF,UAAYvhB,KAAKolB,MAAMzL,SAAS6H,gBAEvExhB,KAAKolB,MAAMzL,SAAS6H,qBAAkBhS,K,gCAK9C,SAAmB0d,GAEf,IADA,IAAMC,EAAWD,EAASE,qBAAqB,QACvCjZ,EAAI,EAAGA,EAAIgZ,EAAS5oB,OAAQ4P,IAAK,CACrC,IAAIkZ,EAAWF,EAAShZ,GAClB0X,EAAawB,EAASC,YACzBzB,GACCE,IAAMC,OAAOH,EAAYwB,EACZ,CAAEpB,cAAc,EAAOC,aAAa,EAAOE,OAAO,S,GA9D7CnH,IAAMsD,WAoEzBpD,KCntBToI,GAAcC,QACW,cAA7B/P,OAAOuP,SAASS,UAEe,UAA7BhQ,OAAOuP,SAASS,UAEhBhQ,OAAOuP,SAASS,SAASpW,MAAM,2DAqCnC,SAASqW,GAAgBC,EAAO5vB,GAC9B8mB,UAAU+I,cACPC,SAASF,GACT1hB,MAAK,SAAC6hB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBljB,cAAgB,WACA,cAA3BkjB,EAAiBpnB,QACfie,UAAU+I,cAAcM,YAI1BC,QAAQC,IACN,+GAKErwB,GAAUA,EAAOswB,UACnBtwB,EAAOswB,SAASP,KAMlBK,QAAQC,IAAI,sCAGRrwB,GAAUA,EAAOuwB,WACnBvwB,EAAOuwB,UAAUR,WAO5BS,OAAM,SAAC/H,GACN2H,QAAQ3H,MAAM,4CAA6CA,M,aCvFpDgI,IAAeC,WAAW/sB,SAASC,eAAe,SAC1DqqB,OAAO,eAAC,GAAD,KDYL,SAAkBjuB,GACvB,GAA6C,kBAAmB8mB,UAAW,CAGzE,GADkB,IAAIzY,IAAIsiB,IAAwBjR,OAAOuP,SAAS3C,MACpDsE,SAAWlR,OAAOuP,SAAS2B,OAIvC,OAGFlR,OAAO9Q,iBAAiB,QAAQ,WAC9B,IAAMghB,EAAK,UAAMe,IAAN,sBAEPnB,KAgEV,SAAiCI,EAAO5vB,GAEtC6wB,MAAMjB,EAAO,CACXkB,QAAS,CAAE,iBAAkB,YAE5B5iB,MAAK,SAAC6iB,GAEL,IAAMC,EAAcD,EAASD,QAAQjmB,IAAI,gBAEnB,MAApBkmB,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYpc,QAAQ,cAG5CkS,UAAU+I,cAAcqB,MAAMhjB,MAAK,SAAC6hB,GAClCA,EAAaoB,aAAajjB,MAAK,WAC7BwR,OAAOuP,SAASmC,eAKpBzB,GAAgBC,EAAO5vB,MAG1BwwB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVgB,CAAwBzB,EAAO5vB,GAI/B8mB,UAAU+I,cAAcqB,MAAMhjB,MAAK,WACjCkiB,QAAQC,IACN,+GAMJV,GAAgBC,EAAO5vB,OCtC/BsxB,K","file":"static/js/main.69e78ad3.chunk.js","sourcesContent":["\nconst EditorKeymap = {\n    base: {\n        // Self-insert keys\n        '[alnum]': \"self_insert\",\n        '#': \"insert \\\\#\",\n        '@': \"insert @\",\n        '*': \"insert *\",\n        '~': \"insert \\\\sim\",\n\n        // Immediate action special keys\n        '!': \"autoparenthesize;insert !;concat\",\n        'Enter': \"subscript\",\n        '_': \"subscript\",\n        '^': \"superscript\",\n        'Backspace': \"pop\",\n        \"`\": \"superscript\",\n        ' ': \"autoparenthesize 2;concat\",\n        '=': \"mode relational\",\n        '<': \"infix <\",\n        '>': \"infix >\",\n        '+': \"infix +\",\n        '-': \"infix -\",\n        ']': \"make_bold\",\n        '[': \"delimiters [ ]\",\n        '(': \"delimiters ( )\",\n        '{': \"delimiters \\\\{ \\\\}\",\n\n        // Document commands\n        'ArrowUp': \"change_document_selection -1\",\n        'Shift+ArrowUp': \"shift_document_selection -1\",\n        'ArrowDown': \"change_document_selection +1\",\n        'Shift+ArrowDown': \"shift_document_selection +1\",\n        'PageUp': \"change_document_selection -5\",  // TODO: scroll based on viewport height instead\n        'PageDown': \"change_document_selection +5\",\n        'Home': \"change_document_selection -10000\",\n        'End': \"change_document_selection +10000\",\n\n        // Stack scrolling commands\n        'ArrowRight': \"scroll stack_panel horizontal 75\",\n        'ArrowLeft': \"scroll stack_panel horizontal -75\",\n\n        // Prefix keys\n        'Tab': \"mode stack\",\n        \"'\": \"mode symbol\",\n        '.': \"mode decoration\",\n        ',': \"mode infix\",\n        ')': \"mode delimiters\",\n        '}': \"custom_delimiter\",\n        ';': \"mode lowercase_greek\",\n        ':': \"mode uppercase_greek\",\n        '%': \"mode calligraphic\",\n        '&': \"mode script\",\n        '/': \"mode operator\",\n        \"\\\\\": \"start_text_entry math_text_entry\",\n        \"\\\"\": \"start_text_entry text_entry\",\n        '|': \"mode array\",\n        '$': \"mode config\",\n        '?': \"toggle_popup help\",\n\n        // Other Ctrl-based shortcuts\n        'Ctrl+0': \"insert 0;subscript\",\n        'Ctrl+1': \"insert -1;superscript\",\n        'Ctrl+2': \"insert 2;superscript\",\n        'Ctrl+3': \"insert 3;superscript\",\n        'Ctrl+4': \"insert 4;superscript\",\n        'Ctrl+a': \"swap\",\n        'Ctrl+b': \"make_bold\",\n        'Ctrl+c': \"copy_to_clipboard\",\n        'Ctrl+e': \"insert e;operator mathrm;swap;superscript\",  // exp(x) - same as [/][e]\n        'Ctrl+i': \"pop_to_document\",\n        'Ctrl+j': \"extract_from_document\",\n        'Ctrl+k': \"infix \\\\,\",\n        'Ctrl+l': \"recenter_document 50\",\n        'Ctrl+m': \"prefix -\",\n        'Ctrl+n': \"insert 1;subscript\",\n        'Ctrl+o': \"parenthesize;swap;operator mathopen;swap;concat\",  // -> f(x): same as [/][o]\n        'Ctrl+p': \"delimiters ( )\",\n        'Ctrl+r': \"infix ,;parenthesize;swap;operator mathopen;swap;concat\",  // -> f(x,y): same as [/][r]\n        'Ctrl+s': \"save_file\",\n        'Ctrl+t': \"insert 2;subscript\",\n        'Ctrl+u': \"superscript\",\n        'Ctrl+v': \"paste_from_clipboard\",\n        'Ctrl+y': \"redo\",\n        'Ctrl+z': \"undo\",\n        'Ctrl+ ': \"infix \\\\,\",\n        'Ctrl+,': \"infix ,\",\n        'Ctrl+ArrowRight': \"scroll document_container horizontal 75\",\n        'Ctrl+ArrowLeft': \"scroll document_container horizontal -75\",\n        'Ctrl+/': \"operator frac 2\"\n    },\n\n    // File Manager mode\n    files: {\n        'default': \"toggle_popup files\",\n        'd': \"delete_selected_file\",\n        'n': \"start_new_file\",\n        'Enter': \"load_selected_file\",\n        's': \"save_file\",\n        'S': \"save_file_as\",\n        'ArrowUp': \"select_adjacent_file -1\",\n        'ArrowDown': \"select_adjacent_file 1\"\n    },\n\n    // User Manual mode\n    help: {\n        'ArrowDown': 'scroll popup_panel vertical 25',\n        'ArrowUp': 'scroll popup_panel vertical -25',\n        'j': 'scroll popup_panel vertical 25',\n        'k': 'scroll popup_panel vertical -25',\n        'ArrowLeft': 'do_cancel',\n        'ArrowRight': 'do_cancel',\n        'PageUp': 'scroll popup_panel vertical -95',\n        'PageDown': 'scroll popup_panel vertical 95',\n        'default': \"toggle_popup help\"\n    },\n\n    // Tab prefix: stack/misc operations\n    stack: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"swap\",\n        'c': \"copy_to_clipboard\",\n        'd': \"pop\",\n        'i': \"pop_to_document\",\n        'I': \"pop_to_document preserve\",\n        'f': \"toggle_popup files\",\n        'j': \"extract_from_document\",\n        'J': \"extract_from_document preserve\",\n        'l': \"recenter_document 50\",\n        'n': \"nip\",\n        'o': \"over\",\n        'r': \"rot\",\n        's': \"save_file\",\n        't': \"tuck\",\n        'u': \"unrot\",\n        'v': \"paste_from_clipboard\",\n        'Enter': \"dup\",\n        'Backspace': \"pop\",\n        'Tab': \"undo\",\n        '.': \"redo\",\n        '!': \"export_document_as_text\",\n        '@': \"export_stack_items_as_text\",\n        '$': \"toggle_show_latex_source\",\n        'ArrowRight': \"scroll document_container horizontal 75\",\n        'ArrowLeft': \"scroll document_container horizontal -75\",\n        '?': \"toggle_popup help stack\"\n    },\n\n    // $ prefix: configuration\n    config: {\n        'i': \"config toggle_inline_math\",\n        'm': \"mode config_math_alignment\",\n        'r': \"config reset_layout\",\n        's': \"mode config_stack\",\n        't': \"mode config_theme\",\n        'z': \"mode config_zoom\",\n        '$': \"insert \\\\$\",\n        '?': \"toggle_popup help configuration\"\n    },\n    // $m\n    config_math_alignment: {\n        'd': \"config math_align toggle_document\",\n        's': \"config math_align toggle_stack\",\n        '?': \"toggle_popup help configuration\"\n    },\n    // $s\n    config_stack: {\n        '0': \"config stack_split 0\",\n        '1': \"config stack_split 10\",\n        '2': \"config stack_split 20\",\n        '3': \"config stack_split 30\",\n        '4': \"config stack_split 40\",\n        '5': \"config stack_split 50\",\n        '6': \"config stack_split 60\",\n        '7': \"config stack_split 70\",\n        '8': \"config stack_split 80\",\n        '9': \"config stack_split 90\",\n        '*': \"config stack_split 100\",\n        'ArrowLeft': \"config stack_side left\",\n        'ArrowRight': \"config stack_side right\",\n        'ArrowUp': \"config stack_side top\",\n        'ArrowDown': \"config stack_side bottom\",\n        '?': \"toggle_popup help configuration\"\n    },\n    // $t\n    config_theme: {\n        '0': \"config theme default\",\n        '1': \"config theme dawn\",\n        '2': \"config theme dusk\",\n        '3': \"config theme dark\",\n        '?': \"toggle_popup help configuration\"\n    },\n    // $z\n    config_zoom: {\n        '0': \"config zoom_factor 0\",\n        '+': \"config zoom_factor +\",\n        '-': \"config zoom_factor -\",\n        '?': \"toggle_popup help configuration\"\n    },\n\n    // \" prefix (TextItem text)\n    text_entry: {\n        'Enter': \"finish_text_entry text\",\n        'Shift+Enter': \"finish_text_entry heading\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // \\ prefix (math text)\n    math_text_entry: {\n        'Enter': \"finish_text_entry math\",\n        'Shift+Enter': \"finish_text_entry roman_math\",\n        \"\\\\\": \"start_text_entry latex_entry\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // double \\ prefix (latex command)\n    latex_entry: {\n        'Enter': \"finish_text_entry latex\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry math_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // right-parenthesis prefix: special delimiters\n    delimiters: {\n        'b': \"delimiters \\\\langle \\\\vert\",  //  <x| Dirac bra\n        'c': \"delimiters \\\\lceil \\\\rceil\",\n        'f': \"delimiters \\\\lfloor \\\\rfloor\",\n        'g': \"delimiters \\\\lgroup \\\\rgroup\",\n        'i': \"delimiters \\\\langle \\\\rangle \\\\vert 2\",  // <x|y>; mnemonic: [i]nner product\n        'I': \"delimiters \\\\langle \\\\rangle \\\\vert 3\",  // <x|y|z>\n        'k': \"delimiters \\\\vert \\\\rangle\",  // |x> Dirac ket\n        'm': \"delimiters \\\\lmoustache \\\\rmoustache\",\n        'n': \"delimiters \\\\lVert \\\\rVert\",  // n = Norm\n        'N': \"delimiters \\\\lVert \\\\rVert\",  // alias for n\n        'w': \"delimiters . \\\\vert\",  // \"where\"\n        'W': \"delimiters . \\\\vert\",  // alias for w\n        '|': \"delimiters \\\\vert \\\\vert\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '(': \"delimiters ( )\",\n        '[': \"delimiters [ ]\",\n        ']': \"insert \\\\llbracket;swap;concat;insert \\\\rrbracket;concat\",\n        '{': \"delimiters \\\\{ \\\\}\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // right-curly-brace prefix: custom delimiter builder mode\n    custom_delimiters: {\n        '[digit]': \"prefix_argument\",\n        'c': \"custom_delimiter \\\\lceil\",\n        'C': \"custom_delimiter \\\\rceil\",\n        'f': \"custom_delimiter \\\\lfloor\",\n        'F': \"custom_delimiter \\\\rfloor\",\n        'g': \"custom_delimiter \\\\lgroup\",\n        'G': \"custom_delimiter \\\\rgroup\",\n        'm': \"custom_delimiter \\\\lmoustache\",\n        'M': \"custom_delimiter \\\\rmoustache\",\n        'v': \"custom_delimiter \\\\Vert\",\n        '<': \"custom_delimiter \\\\langle\",\n        '>': \"custom_delimiter \\\\rangle\",\n        '(': \"custom_delimiter (\",\n        ')': \"custom_delimiter )\",\n        '[': \"custom_delimiter [\",\n        ']': \"custom_delimiter ]\",\n        '{': \"custom_delimiter \\\\{\",\n        '}': \"custom_delimiter \\\\}\",\n        '.': \"custom_delimiter .\",\n        ' ': \"custom_delimiter .\",\n        '/': \"custom_delimiter /\",\n        \"\\\\\": \"custom_delimiter \\\\backslash\",\n        '|': \"custom_delimiter |\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // forward-slash prefix: assorted functions/operators\n    operator: {\n        '1': \"insert 1;swap;operator frac 2\",\n        '2': \"mode squared\",\n        'a': \"apply_operator 1\",\n        'A': \"apply_operator 2\",\n        'b': \"operator binom 2\",\n        'c': \"named_function cos\",\n        'C': \"named_function csc\",\n        'd': \"mode derivative\",\n        'D': \"named_function det\",\n        'e': \"insert e;operator mathrm;swap;superscript\",  // exp(x)\n        'E': \"named_function exp\",\n        'f': \"mode named_operator\",\n        'g': \"mode named_underset_operator\",\n        'h': \"mode hyperbolic\",\n        'i': \"mode integral_limits\",\n        'k': \"delimiters . . \\\\vert 2;parenthesize;swap;operator mathopen;swap;concat\",  // f x y -> f(x|y)\n        'l': \"insert \\\\limits;swap;subscript;insert \\\\lim;swap;concat\",  // lim_{x}\n        'L': \"infix \\\\to;insert \\\\limits;swap;subscript;insert \\\\lim;swap;concat\",  // lim_{y \\to x}\n        'n': \"named_function ln\",\n        'N': \"named_function log\",\n        'o': \"parenthesize;swap;operator mathopen;swap;concat\",   // f x -> f(x)  \"of\"; \\mathopen closes up the spacing after 'f'\n        'O': \"overunderset overset\",\n        'p': \"parenthesize;operator Pr\",  // Pr(x) (probability)\n        'P': \"insert \\\\,;swap;concat;swap;insert \\\\,;concat;swap;delimiters . . \\\\vert 2;parenthesize;operator Pr\",  // Pr(y|x)\n        'q': \"operator sqrt\",\n        'Q': \"operator sqrt[3]\",\n        'r': \"infix ,;parenthesize;swap;operator mathopen;swap;concat\",  // f x y -> f(x,y)\n        's': \"named_function sin\",\n        'S': \"named_function sec\",\n        't': \"named_function tan\",\n        'T': \"named_function cot\",\n        'u': \"overunderset underset\",\n        'v': \"parenthesize;insert Var;operator operatorname;swap;concat\",\n        'V': \"swap;insert ,;concat;swap;concat;parenthesize;insert Cov;operator operatorname;swap;concat\",\n        'x': \"insert E;operator mathbb;operator mathopen;swap;delimiters [ ];concat\",  // E[x] (expectation)\n        'X': \"insert E;operator mathbb;swap;subscript;operator mathopen;swap;delimiters [ ];concat\",  // E_x[y] (with subscript)\n        ';': \"apply_tag\",\n        ',': \"split_infix\",\n        '/': \"operator frac 2\",\n        '[': \"delimiters [ ];swap;operator mathopen;swap;concat\",  // f x -> f[x]\n        ']': \"delimiters \\\\{ \\\\};swap;operator mathopen;swap;concat\",  // f x -> f{x}\n        '}': \"swap;operator underbrace;swap;subscript\",\n        '{': \"swap;operator overbrace;swap;superscript\",\n        '<': \"extract_infix_side left\",\n        '>': \"extract_infix_side right\",\n        '-': \"mode inverse\",\n        '=': \"unrot;infix =;insert \\\\sum;swap;subscript;swap;superscript\",\n        '+': \"infix \\\\ge;insert \\\\sum;swap;subscript\",\n        \"'\": \"substitute_defer\",\n        \"\\\"\": \"toggle_is_heading\",\n        'Enter': \"unrot;subscript;swap;superscript\",  // apply superscript and subscript at once\n        '?': \"toggle_popup help operators\"\n    },\n\n    named_operator: {\n        'a': \"insert \\\\arg\",\n        'c': \"insert \\\\gcd\",\n        'd': \"insert \\\\dim\",\n        'e': \"insert \\\\deg\",\n        'f': \"insert \\\\liminf\",\n        'g': \"insert \\\\argmax\",\n        'h': \"insert \\\\hom\",\n        'i': \"insert \\\\inf\",\n        'j': \"insert \\\\injlim\",\n        'k': \"insert \\\\ker\",\n        'l': \"insert \\\\lim\",\n        'm': \"insert \\\\min\",\n        'n': \"insert \\\\argmin\",\n        'o': \"insert Cov;operator operatorname\",\n        'p': \"insert \\\\Pr\",\n        'r': \"insert \\\\projlim\",\n        's': \"insert \\\\sup\",\n        't': \"insert \\\\det\",\n        'u': \"insert \\\\limsup\",\n        'v': \"insert Var;operator operatorname\",\n        'x': \"insert \\\\max\"\n    },\n\n    named_underset_operator: {\n        'a': \"underset_operator arg\",\n        'c': \"underset_operator gcd\",\n        'd': \"underset_operator dim\",\n        'e': \"underset_operator deg\",\n        'f': \"underset_operator liminf\",\n        'g': \"underset_operator argmax\",\n        'h': \"underset_operator hom\",\n        'i': \"underset_operator inf\",\n        'j': \"underset_operator injlim\",\n        'k': \"underset_operator ker\",\n        'l': \"underset_operator lim\",\n        'm': \"underset_operator min\",\n        'n': \"underset_operator argmin\",\n        'o': \"underset_operator Cov true\",\n        'p': \"underset_operator Pr\",\n        'r': \"underset_operator projlim\",\n        's': \"underset_operator sup\",\n        't': \"underset_operator det\",\n        'u': \"underset_operator limsup\",\n        'v': \"underset_operator Var true\",\n        'x': \"underset_operator max\"\n    },\n\n    // TODO: maybe make a more general way of doing these\n    hyperbolic: {\n        's': \"named_function sinh\",\n        'S': \"named_function sech\",\n        'c': \"named_function cosh\",\n        'C': \"named_function csch\",\n        't': \"named_function tanh\",\n        'T': \"named_function coth\",\n        '2': \"mode squared_hyperbolic\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n    inverse: {\n        's': \"named_function sin -1\",\n        'S': \"named_function sec -1\",\n        'c': \"named_function cos -1\",\n        'C': \"named_function csc -1\",\n        't': \"named_function tan -1\",\n        'T': \"named_function cot -1\",\n        'h': \"mode inverse_hyperbolic\",\n        '2': \"mode squared\"\n    },\n    inverse_hyperbolic: {\n        's': \"named_function sinh -1\",\n        'S': \"named_function sech -1\",\n        'c': \"named_function cosh -1\",\n        'C': \"named_function csch -1\",\n        't': \"named_function tanh -1\",\n        'T': \"named_function coth -1\",\n        '2': \"mode squared_hyperbolic\"\n    },\n    squared: {\n        's': \"named_function sin 2\",\n        'S': \"named_function sec 2\",\n        'c': \"named_function cos 2\",\n        'C': \"named_function csc 2\",\n        't': \"named_function tan 2\",\n        'T': \"named_function cot 2\",\n        'n': \"named_function lg\",  // [n][N] are special cases for base-2 log\n        'N': \"named_function log _2\",\n        'h': \"mode squared_hyperbolic\",\n        '-': \"mode inverse\"\n    },\n    squared_hyperbolic: {\n        's': \"named_function sinh 2\",\n        'S': \"named_function sech 2\",\n        'c': \"named_function cosh 2\",\n        'C': \"named_function csch 2\",\n        't': \"named_function tanh 2\",\n        'T': \"named_function coth 2\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n\n    // /i prefix\n    integral_limits: {\n        'r': \"insert -\\\\infty;subscript;insert \\\\infty;superscript\",  // -oo..oo : [r]eals\n        'n': \"insert -\\\\infty;subscript;insert 0;superscript\",  // -oo..0 : [n]egative \n        'p': \"insert 0;subscript;insert \\\\infty;superscript\",  // 0..oo : [p]ositive\n        'u': \"insert 0;subscript;insert 1;superscript\",  // 0..1 : [u]nit\n        'U': \"insert -1;subscript;insert 1;superscript\",  // -1..1 : symmetric [U]nit\n        't': \"insert 0;subscript;insert 2\\\\pi;superscript\",  // 0..2pi : [t]rigonometric\n        'T': \"insert -\\\\pi;subscript;insert \\\\pi;superscript\",  // -pi..pi : symmetric [T]rigonometric\n        '?': \"toggle_popup help integrals\"\n    },\n\n    // /d prefix: derivative operations\n    derivative: {\n        // \\partial y / \\partial x\n        'j': \"insert \\\\partial;swap;concat;swap;insert \\\\partial;swap;concat;swap;operator frac 2\",\n        // \\partial^2 y / \\partial x^2\n        'J': \"insert 2;superscript;insert \\\\partial;swap;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // dy/dx\n        'k': \"insert d;operator mathrm;swap;concat;swap;insert d;operator mathrm;swap;concat;swap;operator frac 2\",\n        // d^2(y) / dx^2\n        'K': \"insert 2;superscript;insert d;operator mathrm;swap;concat;swap;insert d;operator mathrm;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // \\partial / \\partial x\n        'q': \"insert \\\\partial;swap;concat;insert \\\\partial;swap;operator frac 2\",\n        // \\partial^2 / \\partial x^2\n        'Q': \"insert 2;superscript;insert \\\\partial;swap;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // d/dx\n        'x': \"insert d;operator mathrm;swap;concat;insert d;operator mathrm;swap;operator frac 2\",\n        // d^2 / dx^2\n        'X': \"insert 2;superscript;insert d;operator mathrm;swap;concat;insert d;operator mathrm;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 / \\partial x\\,\\partial y\n        'm': \"insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 z / \\partial x\\,\\partial y\n        'M': \"insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // gradient\n        'g': \"insert \\\\nabla;swap;concat\",\n        // gradient with respect to x\n        'G': \"insert \\\\nabla;swap;subscript;swap;concat\",\n        // divergence\n        '.': \"insert \\\\nabla;insert \\\\cdot;concat;swap;concat\",\n        // curl\n        'c': \"insert \\\\nabla;insert \\\\times;concat;swap;concat\",\n        // Laplacian\n        'l': \"insert \\\\nabla;insert 2;superscript;swap;concat\",\n        // d'Alembertian\n        'L': \"insert \\\\Box;insert 2;superscript;swap;concat\",\n        // x -> dx\n        'd': \"insert d;operator mathrm;swap;concat\",\n        // x -> d^2x\n        '2': \"insert d;operator mathrm;insert 2;superscript;swap;concat\",\n        '3': \"insert d;operator mathrm;insert 3;superscript;swap;concat\",\n        '4': \"insert d;operator mathrm;insert 4;superscript;swap;concat\",\n        // y x -> y dx\n        'i': \"swap;insert \\\\,;concat;swap;insert d;operator mathrm;swap;concat;concat\",\n        // y x -> ydx (with thinspace after the dx)\n        'I': \"insert d;operator mathrm;swap;concat;concat;insert \\\\,;concat\",\n        // y x -> ydx (no spacing around the dx)\n        ' ': \"insert d;operator mathrm;swap;concat;concat\",\n\n        '?': \"toggle_popup help derivatives\"\n    },\n\n    // comma prefix: combine two objects with an infix operation\n    infix: {\n        'a': \"apply_infix\",\n        'b': \"infix \\\\bullet\",\n        'c': \"infix \\\\cap\",\n        'd': \"infix \\\\setminus\",  // (set [d]ifference)\n        'e': \"infix ,\\\\dots,\",\n        'f': \"conjunction if\",\n        'F': \"conjunction iff\",\n        'g': \"infix \\\\gets\",\n        'k': \"insert \\\\,;swap;concat;swap;insert \\\\,;concat;swap;delimiters . . \\\\vert 2\",  // x | y  ([k]onditional)\n        'l': \"infix \\\\parallel\",\n        'm': \"infix \\\\mapsto\",\n        'M': \"infix \\\\mp\",\n        'n': \"conjunction when\",\n        'o': \"infix \\\\circ\",\n        'p': \"infix \\\\perp\",\n        'P': \"infix \\\\pm\",\n        'q': \"conjunction and\",\n        'Q': \"conjunction or\",\n        'r': \"conjunction for\",\n        's': \"infix \\\\,\",\n        't': \"infix \\\\to\",\n        'T': \"infix \\\\longrightarrow\",\n        'u': \"infix \\\\cup\",\n        'v': \"infix \\\\vee\",\n        'w': \"infix \\\\wedge\",\n        'x': \"infix \\\\times\",\n        'X': \"infix \\\\otimes\",\n        '[': \"infix \\\\llcorner\",  // right-contraction\n        ']': \"infix \\\\lrcorner\",  // left-contraction\n        '|': \"delimiters . . \\\\vert 2\",  // \"infix |\",\n        '=': \"infix \\\\Rightarrow\",\n        '-': \"infix \\\\ominus\",\n        '+': \"infix \\\\oplus\",\n        '.': \"infix \\\\cdot\",\n        ',': \"infix ,\",  // comma without thinspace\n        ' ': \"infix ,\\\\,\",  // comma plus thinspace\n        ':': \"infix :\",\n        ';': \"infix semicolon\\\\:\",\n        '`': \"swap;insert T;superscript;swap;concat\",  // xTy\n        '%': \"infix \\\\pmod\",  // y (mod x)\n        '*': \"infix *\",\n        \"\\\\\": \"autoparenthesize;swap;autoparenthesize;swap;delimiters . . / 2\",\n        '/': \"autoparenthesize;swap;autoparenthesize;swap;infix /\",\n        '>': \"infix \\\\cdots\",\n        '?': \"toggle_popup help infix\"\n    },\n\n    // = prefix: relational operators\n    relational: {\n        'a': \"infix \\\\approx\",\n        'c': \"infix \\\\cong\",  // =~  congruent\n        'e': \"infix \\\\equiv\",\n        'E': \"infix \\\\iff\",\n        'g': \"infix >\",\n        'G': \"infix \\\\gg\",\n        'i': \"infix \\\\in\",\n        'I': \"infix \\\\notin\",\n        'l': \"infix <\",\n        'L': \"infix \\\\ll\",\n        'n': \"infix \\\\ne\",\n        '!': \"infix \\\\ne\",\n        'p': \"infix \\\\propto\",\n        'q': \"infix =\",\n        's': \"infix \\\\subseteq\",\n        'S': \"infix \\\\subset\",\n        't': \"infix \\\\sim\",\n        '=': \"infix =\",\n        '<': \"infix \\\\le\",\n        '>': \"infix \\\\ge\",\n        '[': \"infix \\\\le\",\n        ']': \"infix \\\\ge\",\n        ':': \"infix \\\\coloneqq\",\n        '~': \"infix \\\\sim\",\n        '|': \"infix \\\\vDash\",\n        '?': \"toggle_popup help relational\"\n    },\n\n    // apostrophe prefix: assorted standalone math symbols\n    symbol: {\n        '0': \"insert \\\\varnothing\",\n        '1': \"insert -1\",\n        '2': \"insert 1;insert 2;operator frac 2\",  // 1/2 (display)\n        '3': \"insert 1;insert 2;infix /\",  // 1/2 (inline)\n        '8': \"insert \\\\infty\",\n        'a': \"insert \\\\forall\",\n        'c': \"insert \\\\cdot\",\n        'C': \"insert \\\\bigcap\",\n        'd': \"insert \\\\partial\",\n        'e': \"insert \\\\exists\",\n        'h': \"insert \\\\hslash\",\n        'i': \"insert \\\\int\",\n        'I': \"insert \\\\iint\",\n        'l': \"insert \\\\ell\",\n        'M': \"insert \\\\mp\",\n        'o': \"insert \\\\circ\",\n        'p': \"insert \\\\prod\",\n        'P': \"insert \\\\pm\",\n        's': \"insert \\\\sum\",\n        't': \"insert \\\\therefore\",\n        'U': \"insert \\\\bigcup\",\n        'v': \"insert \\\\vee\",\n        'w': \"insert \\\\wedge\",\n        'y': \"insert \\\\oint\",\n        'Y': \"insert \\\\oiint\",\n        '.': \"insert \\\\dots\",\n        '>': \"insert \\\\cdots\",\n        '-': \"insert -\",\n        '+': \"insert +\",\n        '*': \"insert \\\\star\",\n        '|': \"insert |\",\n        '=': \"insert_separator hrule\",\n        '?': \"insert ?\",  // NOTE: no mode-sensitive help shortcut for symbols because of this\n        '!': \"insert !\",\n        ',': \"insert ,\",\n        ';': \"insert semicolon\",\n        ':': \"insert :\",\n        '`': \"insert `\",\n        \"'\": \"insert_defer\",\n        ' ': \"insert \",  // \"nothing\", e.g. when you don't want something on one side of an infix\n        'ArrowUp': \"insert \\\\uparrow\",\n        'ArrowDown': \"insert \\\\downarrow\"\n    },\n\n    // . prefix: expression decorators (fonts, hats, etc)\n    decoration: {\n        '0': \"insert 0;subscript\",\n        '1': \"insert -1;superscript\",\n        '2': \"insert 2;superscript\",\n        '3': \"insert 3;superscript\",\n        '4': \"insert 4;superscript\",\n        '8': \"insert \\\\infty;infix \\\\to\",\n        'A': \"operator acute\",\n        'b': \"operator mathbb\",\n        'c': \"autoparenthesize;insert 1;swap;infix -\",\n        'C': \"mode color\",\n        'd': \"insert \\\\dagger;superscript\",\n        'D': \"insert \\\\ddagger;superscript\",\n        'e': \"operator bold\",  // bold roman (sort of)\n        'f': \"autoparenthesize;insert 2;infix /\",  // x/2\n        'F': \"autoparenthesize;insert 2;delimiters . . / 2\",  // x/2 (variable-size)\n        'g': \"operator mathring\",\n        'G': \"operator grave\",\n        'h': \"apply_hat hat\",\n        'H': \"apply_hat widehat\",\n        'i': \"insert -;superscript\",\n        'I': \"insert +;superscript\",\n        'k': \"operator mathfrak\",\n        'l': \"insert \\\\parallel;subscript\",\n        'm': \"operator mathtt\",\n        'M': \"prefix \\\\mp\",\n        'o': \"operator bar\",\n        'O': \"operator overline\",\n        'p': \"insert \\\\perp;subscript\",\n        'P': \"prefix \\\\pm\",\n        'r': \"make_roman\",\n        's': \"operator mathsf\",  // sans-serif\n        't': \"prefix \\\\to\",\n        'T': \"operator widetilde\",\n        'u': \"apply_hat breve\",\n        'U': \"operator utilde\",\n        'v': \"operator vec\",\n        'V': \"apply_hat check\",\n        'w': \"apply_hat widehat\",\n        'W': \"apply_hat widecheck\",\n        'x': \"operator boxed\",\n        'X': \"operator sout\",  // strikeout\n        '.': \"apply_hat dot\",\n        \"\\\"\": \"apply_hat ddot\",\n        ' ': \"insert \\\\,;concat\",  // append thin space\n        \"'\": \"autoparenthesize;prime\",\n        '*': \"insert *;superscript\",\n        '~': \"apply_hat tilde\",\n        '=': \"prefix \\\\Rightarrow\",\n        '-': \"prefix -\",\n        '+': \"prefix +\",\n        '`': \"insert T;superscript\",  // transpose\n        '/': \"operator cancel\",\n        \"\\\\\": \"insert 1;swap;autoparenthesize;delimiters . . / 2\",  // variable-size 1/x\n        '_': \"operator underline\",\n        '?': \"toggle_popup help decorations\"\n    },\n\n    // .C prefix: set colors\n    color: {\n        'b': \"color blue\",\n        'g': \"color green\",\n        'h': \"color #888\",  // grey: [h]alf black\n        'k': \"color black\",\n        'o': \"color orange\",\n        'p': \"color purple\",\n        'r': \"color red\",\n        'y': \"color #ff0\"\n    },\n\n    // | prefix: array/matrix operations\n    array: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"build_align aligned\",\n        'c': \"build_align cases\",\n        'C': \"build_align rcases\",\n        'd': \"dissolve_array\",\n        'e': \"build_list ,\\\\,;insert ,\\\\,\\\\dots;concat\",\n        'E': \"insert_matrix_ellipses\",\n        'f': \"build_align cases_if\",\n        'F': \"build_align rcases_if\",\n        'g': \"build_align gathered\",\n        'h': \"transpose_matrix;swap;transpose_matrix;swap;stack_arrays;transpose_matrix\",  // i.e., stack horizontally\n        'k': \"build_substack\",\n        'm': \"build_matrix_row matrix\",\n        'p': \"build_list +;insert +\\\\cdots;concat\",\n        's': \"split_array\",\n        't': \"mode change_matrix_type\",\n        'T': \"transpose_matrix\",\n        'v': \"build_matrix_row vmatrix\",\n        'V': \"build_matrix_row Vmatrix\",\n        '|': \"stack_arrays\",\n        ',': \"build_list ,\",\n        ' ': \"build_list ,\\\\,\",\n        '.': \"build_list ,\\\\, ,\\\\,\\\\dots,\\\\,\",\n        ';': \"build_list semicolon\\\\,\",\n        '+': \"build_infix_list + \\\\cdots\",\n        '(': \"build_matrix_row pmatrix\",\n        '[': \"build_matrix_row bmatrix\",\n        '{': \"build_matrix_row Bmatrix\",\n        '@': \"build_matrix_row bmatrix 2;transpose_matrix\",\n        '#': \"build_matrix_row bmatrix 3;transpose_matrix\",\n        '$': \"build_matrix_row bmatrix 2;unrot;build_matrix_row bmatrix 2;swap;stack_arrays\",\n        ':': \"array_separator column dashed\",\n        '!': \"array_separator column solid\",\n        '-': \"array_separator row dashed\",\n        '_': \"array_separator row solid\",\n        '?': \"toggle_popup help arrays\",\n        'Enter': \"stack_arrays\"\n    },\n\n    change_matrix_type: {\n        'm': \"change_matrix_type matrix\",\n        'v': \"change_matrix_type vmatrix\",\n        'V': \"change_matrix_type Vmatrix\",\n        '(': \"change_matrix_type pmatrix\",\n        '[': \"change_matrix_type bmatrix\",\n        '{': \"change_matrix_type Bmatrix\"\n    },\n\n    // & prefix\n    script: {\n        '[alpha]': \"self_insert;to_case uppercase;operator mathscr\",\n        '&': \"insert \\\\&\"\n    },\n\n    // % prefix\n    calligraphic: {\n        '[alpha]': \"self_insert;to_case uppercase;operator mathcal\",\n        '%': \"insert \\\\%\"\n    },\n\n    // ; prefix: lowercase Greek letters\n    lowercase_greek: {\n        'a': \"insert \\\\alpha\",     'b': \"insert \\\\beta\",\n        'c': \"insert \\\\chi\",       'd': \"insert \\\\delta\",\n        'e': \"insert \\\\epsilon\",   'f': \"insert \\\\phi\",\n        'g': \"insert \\\\gamma\",     'h': \"insert \\\\eta\",\n        'i': \"insert \\\\iota\",      'j': \"insert \\\\varphi\",\n        'k': \"insert \\\\kappa\",     'l': \"insert \\\\lambda\",\n        'm': \"insert \\\\mu\",        'n': \"insert \\\\nu\",\n        'o': \"insert \\\\omega\",     'p': \"insert \\\\pi\",\n        'q': \"insert \\\\vartheta\",  'r': \"insert \\\\rho\",\n        's': \"insert \\\\sigma\",     't': \"insert \\\\tau\",\n        'u': \"insert \\\\upsilon\",   'v': \"insert \\\\theta\",\n        'w': \"insert \\\\omega\",     'x': \"insert \\\\xi\",\n        'y': \"insert \\\\psi\",       'z': \"insert \\\\zeta\",\n\n        ':': \"mode variant_greek\",\n        ';': \"infix semicolon\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // : prefix: uppercase Greek letters\n    uppercase_greek: {\n        'd': \"insert \\\\Delta\",     'e': \"insert \\\\varepsilon\",\n        'f': \"insert \\\\Phi\",       'g': \"insert \\\\Gamma\",\n        'k': \"insert \\\\varkappa\",  'l': \"insert \\\\Lambda\",\n        'm': \"insert \\\\varpi\",     'o': \"insert \\\\Omega\",\n        'p': \"insert \\\\Pi\",        'q': \"insert \\\\vartheta\",\n        'r': \"insert \\\\varrho\",    's': \"insert \\\\Sigma\",\n        't': \"insert \\\\varsigma\",  'u': \"insert \\\\Upsilon\",\n        'v': \"insert \\\\Theta\",     'w': \"insert \\\\Omega\",\n        'x': \"insert \\\\Xi\",        'y': \"insert \\\\Psi\",\n        '6': \"insert \\\\digamma\",   '^': \"insert \\\\digamma\",\n        'n': \"insert \\\\nabla\",  // special case\n\n        // TODO: support for case-insensitive keybindings in general\n        'D': \"insert \\\\Delta\",     'E': \"insert \\\\varepsilon\",\n        'F': \"insert \\\\Phi\",       'G': \"insert \\\\Gamma\",\n        'K': \"insert \\\\varkappa\",  'L': \"insert \\\\Lambda\",\n        'M': \"insert \\\\varpi\",     'O': \"insert \\\\Omega\",\n        'P': \"insert \\\\Pi\",        'Q': \"insert \\\\vartheta\",\n        'R': \"insert \\\\varrho\",    'S': \"insert \\\\Sigma\",\n        'T': \"insert \\\\varsigma\",  'U': \"insert \\\\Upsilon\",\n        'V': \"insert \\\\Theta\",     'W': \"insert \\\\Omega\",\n        'X': \"insert \\\\Xi\",        'Y': \"insert \\\\Psi\",\n        'N': \"insert \\\\nabla\",\n\n        ':': \"infix :\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // \"variant\" uppercase Greek letters - these are italic versions of the normal ones\n    variant_greek: {\n        'd': \"insert \\\\varDelta\",    'D': \"insert \\\\varDelta\",\n        'f': \"insert \\\\varPhi\",      'F': \"insert \\\\varPhi\",\n        'g': \"insert \\\\varGamma\",    'G': \"insert \\\\varGamma\",\n        'l': \"insert \\\\varLambda\",   'L': \"insert \\\\varLambda\",\n        'o': \"insert \\\\varOmega\",    'O': \"insert \\\\varOmega\",\n        'p': \"insert \\\\varPi\",       'P': \"insert \\\\varPi\",\n        'q': \"insert \\\\varTheta\",    'Q': \"insert \\\\varTheta\",\n        's': \"insert \\\\varSigma\",    'S': \"insert \\\\varSigma\",\n        'u': \"insert \\\\varUpsilon\",  'U': \"insert \\\\varUpsilon\",\n        'x': \"insert \\\\varXi\",       'X': \"insert \\\\varXi\",\n        'y': \"insert \\\\varPsi\",      'Y': \"insert \\\\varPsi\",\n\n        '?': \"toggle_popup help greek\"\n    }\n};\n\n\nexport default EditorKeymap;\n","\n\nimport KeybindingTable from './Keymap';\nimport JSZip from 'jszip';\n\n\nclass Keymap {\n    constructor() {\n        this.bindings = KeybindingTable;\n    }\n    \n    lookup_binding(mode, key) {\n        const mode_map = this.bindings[mode];\n        if(!mode_map) return null;\n        if(mode_map[key]) return mode_map[key];\n        if(mode_map['[alpha]'] && /^[a-zA-Z]$/.test(key)) return mode_map['[alpha]'];\n        if(mode_map['[digit]'] && /^[0-9]$/.test(key)) return mode_map['[digit]'];\n        if(mode_map['[alnum]'] && /^[a-zA-Z0-9]$/.test(key)) return mode_map['[alnum]'];\n        if(mode_map['default']) return mode_map['default'];\n        if(mode === 'base' || mode === 'editor')\n            return null;\n        else\n            return 'cancel';\n    }\n}\n\n\nclass Settings {\n    static load_from_local_storage() {\n        const serialized_string = localStorage.getItem('settings');\n        if(serialized_string)\n            return Settings.from_json(JSON.parse(serialized_string));\n        else\n            return new Settings();\n    }\n    \n    static from_json(json) {\n        let s = new Settings();\n        Settings.saved_keys.forEach(key => { s[key] = json[key]; });\n        return s;\n    }\n    \n    constructor() {\n        this.current_keymap = new Keymap();\n        this.selected_theme = 'default';\n        this.last_opened_filename = null;\n        this.popup_mode = null;  // null, 'help', 'files'\n        this.layout = this.default_layout();\n    }\n\n    default_layout() {\n        return {\n            zoom_factor: 0,\n            stack_rightalign_math: false,\n            document_rightalign_math: false,\n            inline_math: false,\n            stack_side: 'left',\n            stack_split: 50\n        };\n    }\n\n    apply_layout_to_dom(stack_panel_elt, document_panel_elt, popup_panel_elt) {\n        const layout = this.layout;\n\n        // Show or hide popup panel.\n        popup_panel_elt.style.display = this.popup_mode ? 'block' : 'none';\n\n        // Set overall scale factor.\n        const root_elt = document.getElementById('root');\n        const percentage = Math.round(100*Math.pow(1.05, layout.zoom_factor || 0));\n        root_elt.style.fontSize = percentage + '%';\n\n        // Set up panel layout.\n        let [stack_bounds, document_bounds] = this._split_rectangle(\n            {x: 0, y: 0, w: 100, h: 100}, layout.stack_side, layout.stack_split);\n\n        this._apply_bounds(stack_panel_elt, stack_bounds);\n        this._apply_bounds(document_panel_elt, document_bounds);\n    }\n\n    // Split a parent bounding rectangle into \"primary\" and \"secondary\"\n    // subrectangles according to the given 'side' and split %.\n    _split_rectangle(bounds, side, split_percent) {\n        const w1 = Math.round(split_percent*bounds.w/100);\n        const w2 = bounds.w - w1;\n        const h1 = Math.round(split_percent*bounds.h/100);\n        const h2 = bounds.h - h1;\n        switch(side) {\n        case 'left':\n            return [{x: bounds.x,    y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x+w1, y: bounds.y, w: w2, h: bounds.h}];\n        case 'right':\n            return [{x: bounds.x+w2, y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x,    y: bounds.y, w: w2, h: bounds.h}];\n        case 'top':\n            return [{x: bounds.x, y: bounds.y,    w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y+h1, w: bounds.w, h: h2}];\n        case 'bottom':\n            return [{x: bounds.x, y: bounds.y+h2, w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y,    w: bounds.w, h: h2}];\n        default:\n            return [bounds, bounds];\n        }\n    }\n\n    _apply_bounds(elt, bounds) {\n        elt.style.left = bounds.x + '%';\n        elt.style.top = bounds.y + '%';\n        elt.style.width = bounds.w + '%';\n        elt.style.height = bounds.h + '%';\n    }\n\n    save() {\n        const serialized_string = JSON.stringify(this.to_json());\n        localStorage.setItem('settings', serialized_string);\n    }\n\n    to_json() {\n        let json = {};\n        Settings.saved_keys.forEach(key => { json[key] = this[key]; });\n        return json;\n    }\n}\n\nSettings.saved_keys = [\n    'selected_theme', 'last_opened_filename', 'popup_mode', 'layout'\n];\n\n\n// Helper for generating LaTeX strings from Expr objects.\nclass LatexEmitter {\n    constructor() {\n        this.tokens = [];\n        this.last_token_type = null;\n    }\n\n    emit_token(text, token_type) {\n        if(text.length > 0)\n            this.tokens.push(text);\n        this.last_token_type = token_type;\n    }\n\n    expr(expr) { expr.emit_latex(this); }\n\n    grouped_expr(expr, force_braces) { this.grouped(() => this.expr(expr), force_braces); }\n\n    grouped(fn, force_braces) {\n        let [old_tokens, old_last_token_type] = [this.tokens, this.last_token_type];\n        [this.tokens, this.last_token_type] = [[], null];\n\n        fn();\n\n        const [tokens, last_token_type] = [this.tokens, this.last_token_type];\n        this.tokens = old_tokens;\n        this.last_token_type = old_last_token_type;\n\n        // The only real 'special' case is a group with exactly 1 token.\n        // In that case we may be able to omit the surrounding braces if\n        // it's a 1-character string or a single \\latexcommand.  In all other\n        // cases the braces need to be included.\n        if(force_braces === 'force' || tokens.length === 0 || tokens.length > 1) {\n            this.text('{');\n            this.text(tokens.join(''));\n            this.text('}');\n        }\n        else {  // tokens.length === 1 && !force_braces\n            if(last_token_type === 'text') {\n                if(tokens[0].length === 1)\n                    this.text(tokens[0]);\n                else {\n                    this.text('{');\n                    this.text(tokens[0]);\n                    this.text('}');\n                }\n            }\n            else if(force_braces === 'force_commands') {\n                this.text('{');\n                this.emit_token(tokens[0], 'command');\n                this.text('}');\n            }\n            else\n                this.emit_token(tokens[0], 'command');\n        }\n    }\n\n    // Emit 'raw' LaTeX code.\n    text(text) {\n        if(this.last_token_type === 'command') {\n            // Determine if a space is needed after the last command; this depends\n            // on whether two non-special characters are adjacent.\n            const last_token = this.tokens[this.tokens.length-1];\n            if(this._is_latex_identifier_char(last_token.charAt(last_token.length-1)) &&\n               (this._is_latex_identifier_char(text.charAt(0)) /*|| text.charAt(0) === '{'*/))\n                this.emit_token(' ', 'text');\n        }\n        this.emit_token(text, 'text');\n    }\n\n    _is_latex_identifier_char(ch) {\n        return /^[a-zA-Z]$/.test(ch);\n    }\n\n    // \\latexcommand (something that isn't a single special-character command like \\,)\n    command(command_name, command_options) {\n        if(command_options)\n            command_name = command_name + '[' + command_options + ']';\n        this.emit_token(\"\\\\\" + command_name, 'command');\n    }\n\n    // Treated like text or a command depending on whether it starts with a backslash.\n    text_or_command(text) {\n        if(text.startsWith(\"\\\\\"))\n            this.command(text.slice(1));\n        else\n            this.text(text);\n    }\n\n    // environment_argument is an optional string to be placed directly after the \\begin{...}.\n    // This is used for array environments with a specified column layout, for example\n    // \\begin{matrix}{c:c:c}\n    begin_environment(envname, environment_argument) {\n        this.text(\"\\\\begin{\" + envname + \"}\");\n        if(environment_argument) this.text(environment_argument);\n        this.text(\"\\n\");\n    }\n\n    end_environment(envname) { this.text(\"\\n\\\\end{\" + envname + \"}\\n\"); }\n\n    align_separator() { this.text(' & '); }\n\n    // Table row separators for e.g. \\begin{matrix}\n    row_separator() {\n        // Give a little more space between rows, for fractions.\n        // See KaTeX \"common issues\" page.\n        this.text(\"\\\\\\\\[0.1em]\\n\");\n        // this.text(\"\\\\\\\\\\n\");\n    }\n\n    finished_string() { return this.tokens.join(''); }\n}\n\n\n// Overall app state, holding the stack and document.\nclass AppState {\n    static from_json(json) {\n        return new AppState(\n            Stack.from_json(json.stack),\n            Document.from_json(json.document)\n        );\n    }\n    \n    constructor(stack, document) {\n        this.stack = stack || this._default_stack();\n        this.document = document || new Document([], 0);\n        this.is_dirty = false;\n    }\n\n    _default_stack() {\n        const item = new TextItem([\n            new TextItemTextElement(\"Welcome to the editor. Press \"),\n            new TextItemTextElement(\"[?]\", true),\n            new TextItemTextElement(\" to view the User Guide.\")]);\n        return new Stack([item]);\n    }\n\n    same_as(app_state) {\n        // NOTE: AppState stuff is never modified in-place, so all that needs to be\n        // done here is check object identities.\n        return this.stack === app_state.stack && this.document === app_state.document;\n    }\n\n    to_json() {\n        return {\n            stack: this.stack.to_json(),\n            document: this.document.to_json(),\n            format: 1\n        };\n    }\n}\n\n\nclass UndoStack {\n    constructor() {\n        // Stack of saved AppState instances (most recent one at the end).\n        this.state_stack = [];\n\n        // Maximum size of this.state_stack\n        this.max_stack_depth = 100;\n        \n        // Number of consecutive undo operations that have been performed so far.\n        // If this is greater that zero, 'redo' operations can revert the undos.\n        this.undo_count = 0;\n    }\n\n    clear(initial_app_state) {\n        this.state_stack = [initial_app_state];\n        this.undo_count = 0;\n    }\n\n    push_state(state) {\n        // Only save state if it differs from the state we'd be undoing to.\n        if(this.state_stack.length > this.undo_count &&\n           this.state_stack[this.state_stack.length - this.undo_count - 1].same_as(state))\n            return null;\n\n        if(this.undo_count > 0) {\n            // Truncate already-undone saved states.  This means that 'redo' will no longer work\n            // until some more undos are performed.\n            this.state_stack = this.state_stack.slice(0, this.state_stack.length - this.undo_count);\n            this.undo_count = 0;\n        }\n\n        this.state_stack.push(state);\n\n        // Prevent the undo list from growing indefinitely.\n        if(this.state_stack.length > this.max_stack_depth)\n            this.state_stack = this.state_stack.slice(this.state_stack.length - this.max_stack_depth);\n\n        return state;\n    }\n\n    undo_state() {\n        if(this.state_stack.length-1 > this.undo_count) {\n            this.undo_count++;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n\n    redo_state() {\n        if(this.undo_count > 0) {\n            this.undo_count--;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n}\n\n\n// Interface to the browser's IndexedDB storage.\n// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\nclass DocumentStorage {\n    constructor() {\n        this.open_request = null;\n        this.database = null;\n    }\n\n    open_database(onsuccess) {\n        if(!indexedDB) return;\n        this.on_open_success = onsuccess;\n        this.open_request = indexedDB.open('rpnlatex', 1);\n        this.open_request.onupgradeneeded = this.handle_upgrade_database.bind(this);\n        this.open_request.onsuccess = this.handle_open_success.bind(this);\n        this.open_request.onerror = this.handle_open_error.bind(this);\n    }\n\n    handle_upgrade_database(event) {\n        this.database = this.open_request.result;\n        switch(event.oldVersion) {\n        case 0: this.build_initial_schema(); break;\n        default: break;\n        }\n    }\n\n    // 'documents' is a map of filename->json document content\n    // 'documents_metadata' is a map of filename->filesize, etc.\n    // The metadata is needed because otherwise the entire file contents have to be loaded and parsed\n    // just to show the filesize and object count in the file selector.\n    // IndexedDB indexes could probably be used for this instead (by having the index key be\n    // \"filename:filesize:object_counts:timestamp:etc\").\n    build_initial_schema() {\n        this.database.createObjectStore('documents', {keyPath: 'filename'});\n        this.database.createObjectStore('documents_metadata', {keyPath: 'filename'});\n    }\n\n    handle_open_error(event) {\n        //alert(\"Unable to open IndexedDB for document storage.  You will be unable to save or load documents.\\nThis may happen in Private Browsing mode on some browsers.\\nError message: \" + this.open_request.error);\n        this.open_request = null;\n    }\n\n    handle_open_success(event) {\n        this.database = this.open_request.result;\n        this.open_request = null;\n        this.database.onversionchange = function () {\n            this.database.close();\n            this.database = null;\n            alert('Warning: database is outdated, please reload the page.');\n        };\n        if(this.on_open_success) this.on_open_success();\n    }\n\n    create_transaction(readwrite) {\n        return this.database.transaction(\n            ['documents', 'documents_metadata'],\n            readwrite ? 'readwrite' : 'readonly');\n    }\n\n    sanitize_filename(filename) {\n        const fn = filename.replaceAll(/[^a-zA-Z0-9_ ]/g, '').trim();\n        return (fn.length === 0 || fn.length > 200) ? null : fn;\n    }\n\n    load_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let document_store = transaction.objectStore('documents');\n        let request = document_store.get(filename);\n        request.onsuccess = () => {\n            // NOTE: request.result will be undefined if the filename key wasn't\n            // found.  This still counts as a 'success'.\n            const json = request.result;\n            if(json) {\n                const app_state = AppState.from_json(request.result);\n                onsuccess(filename, app_state);\n            }\n            else\n                onerror(filename, '???');  // TODO\n        };\n        request.onerror = () => {\n            onerror(filename, '???');  // TODO\n        };\n    }\n\n    save_state(app_state, filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let serialized_json = app_state.to_json();\n        serialized_json.filename = filename;\n\n        // Estimate the file size by serializing JSON.\n        // IndexedDB also does this serialization itself, but there doesn't\n        // seem to be any way to reuse that result directly.\n        const filesize = JSON.stringify(serialized_json).length;\n\n        const metadata_json = {\n            filename: filename,\n            filesize: filesize,\n            description: '',  // TODO\n            stack_item_count: app_state.stack.depth(),\n            document_item_count: app_state.document.items.length,\n            timestamp: new Date()\n        };\n        \n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').put(serialized_json);\n        transaction.objectStore('documents_metadata').put(metadata_json);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    delete_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').delete(filename);\n        transaction.objectStore('documents_metadata').delete(filename);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    fetch_file_list(onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let request = transaction.objectStore('documents_metadata').getAll();\n        request.onsuccess = () => {\n            request.result.forEach(row => {\n                // Parse the timestamp\n                const ts_value = Date.parse(row.timestamp);\n                row.timestamp = ts_value ? new Date(ts_value) : null;\n            });\n            onsuccess(request.result);\n        };\n        request.onerror = onerror;\n    }\n\n    // Fetch all documents using a cursor.  'onrowfetched' is invoked once per document\n    // and then 'onfinished' is invoked at the end.\n    fetch_all_documents(onrowfetched, onfinished, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let cursor = transaction.objectStore('documents').openCursor();\n        cursor.onsuccess = (event) => {\n            const c = event.target.result;\n            if(c) {\n                onrowfetched(c.value);\n                c.continue();\n            }\n            else\n                onfinished();\n        };\n        cursor.onerror = onerror;\n    }\n}\n\n\n// Manage state of importing/exporting zip archives.\nclass ImportExportState {\n    constructor() {\n        // States:\n        //   'idle' - if this.download_url is populated, an export download is ready\n        //   'error' - export failed, this.error_message is populated\n        //   'loading' - in the process of loading from the database cursor\n        //   'zipping' - creation of zip file in progress\n        //   'uploading' - user is uploading an archive zipfile\n        //   'importing' - uploaded zipfile is being processed/imported\n        this.state = 'idle';\n\n        this.document_storage = null;  // will be initialized by AppState\n\n        // Number of imported documents handled so far.\n        this.import_count = 0;\n\n        // Number of failures noted this import (if >0, this.error_message will also be set).\n        this.failed_count = 0;\n        this.error_message = null;\n\n        // Holds the last-generated blob download URL, if any.\n        this.download_url = null;\n\n        // This will be set on a successful import.\n        this.import_result_string = null;\n\n        // This will be set to true if the main file list (FileManagerState) needs to be refreshed from the DB.\n        this.file_list_needs_update = false;\n\n        // This can be set to a function to monitor state changes.\n        this.onstatechange = null;\n    }\n\n    // TODO: -> state_description()\n    textual_state() {\n        switch(this.state) {\n        case 'idle': return this.download_url ? 'Download Ready' : 'Ready for export or import';\n        case 'error': return 'Error: ' + this.error_message;\n        case 'loading': return 'Extacting database...';\n        case 'zipping': return 'Compressing files...';\n        case 'uploading': return 'Uploading data...';\n        case 'importing': return 'Importing documents: ' + this.import_count + ' so far';\n        default: return '???';\n        }\n    }\n\n    download_available() {\n        return this.state === 'idle' && this.download_url;\n    }\n\n    generate_download_filename() {\n        const date = new Date();\n        return [\n            'rpnlatex_', date.getFullYear().toString(), '_',\n            date.toLocaleString('default', {month: 'short'}).toLowerCase(),\n            '_', date.getDate().toString().padStart(2, '0'), '.zip'\n        ].join('');\n    }\n\n    change_state(new_state) {\n        this.state = new_state;\n        if(this.onstatechange)\n            this.onstatechange(this);\n    }\n    \n    start_exporting() {\n        let document_storage = this.document_storage;\n        this.zip = new JSZip();\n        document_storage.fetch_all_documents(\n            (row) => this.add_document_json_to_zip(row),\n            () => this.start_compressing(),\n            () => {\n                this.error_message = 'Unable to export the document database.';\n                this.change_state('error');\n            });\n        this.change_state('loading');\n    }\n\n    add_document_json_to_zip(json) {\n        this.zip.file(json.filename + '.json', JSON.stringify(json));\n    }\n\n    start_compressing() {\n        this.change_state('zipping');\n        this.zip.generateAsync({type: 'blob'}).then(content_blob => {\n            this.finished_compressing(content_blob);\n        });\n    }\n\n    clear_download_url() {\n        if(this.download_url) {\n            URL.revokeObjectURL(this.download_url);\n            this.download_url = null;\n        }\n    }\n\n    finished_compressing(content_blob) {\n        this.clear_download_url();\n        this.download_url = URL.createObjectURL(content_blob);\n        this.zip = null;\n        this.change_state('idle');\n    }\n\n    // zipfile is a File object from a <input type=\"file\"> element.\n    start_importing(zipfile) {\n        this.clear_download_url();\n        this.import_result_string = null;\n        if(zipfile.type !== 'application/zip') {\n            alert('Import files must be zip archives.');\n            return;\n        }\n        this.change_state('uploading');\n        let reader = new FileReader();\n        reader.addEventListener(\n            'load',\n            event => this.process_uploaded_data(event.target.result));\n        reader.readAsArrayBuffer(zipfile);\n    }\n\n    process_uploaded_data(data) {\n        this.import_count = 0;\n        this.failed_count = 0;\n        this.error_message = null;\n        this.change_state('importing');\n        JSZip.loadAsync(data).then(zipfile => {\n            let promises = [];\n            for(let filename in zipfile.files) {\n                const file = zipfile.files[filename];\n                if(filename.endsWith('.json')) {\n                    promises.push(\n                        file.async('string').then(\n                            content => this.import_file(file.name.slice(0, file.name.length-5), content)));\n                }\n                else {\n                    this.error_message = 'Invalid filename in archive: ' + filename;\n                    this.failed_count++;\n                }\n            }\n            Promise.all(promises).then(\n                () => {\n                    if(this.failed_count > 0)\n                        this.import_result_string = 'Errors encountered: ' + this.error_message;\n                    else\n                        this.import_result_string = 'Successfully imported ' + this.import_count + ' document' + (this.import_count === 1 ? '' : 's');\n                    this.change_state('idle');\n                    this.file_list_needs_update = true;\n                });\n        });\n    }\n\n    import_file(filename, content) {\n        let document_storage = this.document_storage;\n        let parsed, app_state;\n        try {\n            parsed = JSON.parse(content);\n            app_state = AppState.from_json(parsed);\n        } catch(e) {\n            this.error_message = 'Invalid document found in zip file: ' + filename;\n            this.failed_count++;\n            return;\n        }\n        document_storage.save_state(app_state, filename);\n        this.import_count++;\n        this.change_state('importing');\n    }\n}\n\n\nclass FileManagerState {\n    constructor(file_list, selected_filename, current_filename) {\n        this.file_list = file_list;\n        this.selected_filename = selected_filename;\n        this.current_filename = current_filename;\n        this.unavailable = false;  // set to true if there's a database error\n    }\n\n    sort_file_list(field, ascending) {\n        this.file_list.sort((a, b) => {\n            const a_value = a[field], b_value = b[field];\n            return (ascending ? 1 : -1)*(a_value === b_value ? 0 : (a_value < b_value ? -1 : 1));\n        });\n    }\n\n    // basename -> basename_1\n    // basename_1 -> basename_2\n    // The first available name is used, so basename_50 -> basename_2\n    // if basename_2 is available but basename_1 is taken.\n    generate_unused_filename(basename) {\n        if(this.unavailable || !this.file_list)\n            return basename;\n        basename = basename.replace(/_\\d+$/, '')\n        for(let n = 1; n < 1000; n++) {\n            const candidate = basename + '_' + n;\n            if(!this.file_list.some(file => file.filename === candidate))\n                return candidate;\n        }\n        return basename + '_toomany';\n    }\n\n    // For moving up or down in the list of files.\n    find_adjacent_filename(filename, offset) {\n        if(this.unavailable || !this.file_list) return null;\n        let new_filename = null;\n        let file_list = this.file_list;\n        file_list.forEach((f, index) => {\n            if(f.filename === filename) {\n                let new_index = index+offset;\n                if(new_index < 0) new_index = 0;\n                if(new_index >= file_list.length) new_index = file_list.length-1;\n                new_filename = file_list[new_index].filename;\n            }\n        });\n        if(!new_filename && file_list.length > 0)\n            new_filename = file_list[0].filename;\n        return new_filename;\n    }\n}\n\n\n// Abstract superclass for expression trees.\nclass Expr {\n    static from_json(json) {\n        switch(json.expr_type) {\n        case 'command':\n            return new CommandExpr(json.command_name, this._list(json.operand_exprs), json.options);\n        case 'prefix':\n            return new PrefixExpr(this._expr(json.base_expr), this._expr(json.prefix_expr));\n        case 'infix':\n            return new InfixExpr(\n                this._expr(json.operator_expr), this._expr(json.left_expr),\n                this._expr(json.right_expr), json.split || null);\n        case 'defer':\n            return new DeferExpr();\n        case 'text':\n            return new TextExpr(json.text);\n        case 'sequence':\n            return new SequenceExpr(this._list(json.exprs));\n        case 'delimiter':\n            return new DelimiterExpr(\n                json.left_type, json.right_type, json.middle_type,\n                this._list(json.inner_exprs));\n        case 'subscriptsuperscript':\n            return new SubscriptSuperscriptExpr(\n                this._expr(json.base_expr),\n                this._expr(json.subscript_expr),\n                this._expr(json.superscript_expr));\n        case 'array':\n            return new ArrayExpr(\n                json.array_type, json.row_count, json.column_count, this._list2d(json.element_exprs),\n                json.row_separators, json.column_separators);\n        default:\n            return new TextExpr('invalid expr type ' + json.expr_type);\n        }\n    }\n\n    // Helper routines for from_json\n    static _expr(json) { return json ? Expr.from_json(json) : null; }\n    static _list(json_array) { return json_array.map(expr_json => Expr.from_json(expr_json)); }\n    static _list2d(json_array) { return json_array.map(row_exprs => Expr._list(row_exprs)); }\n    \n    // Concatenate two Exprs into one.  This will merge Sequence and Text\n    // nodes when possible, instead of creating nested SequenceExprs.\n    static combine_pair(left, right) {\n        const left_type = left.expr_type(), right_type = right.expr_type();\n        if(left_type === 'sequence' && right_type === 'sequence')\n            return new SequenceExpr(left.exprs.concat(right.exprs));\n        else if(left_type === 'text' && right_type === 'text')\n            return new TextExpr(left.text + right.text);\n        else if(left_type === 'sequence' && right_type === 'text' &&\n                left.exprs[left.exprs.length-1].expr_type() === 'text') {\n            // Left sequence ends in a Text; merge it with the new Text.\n            return new SequenceExpr(\n                left.exprs.slice(0, -1).concat([\n                    new TextExpr(left.exprs[left.exprs.length-1].text + right.text)\n                ]));\n        }\n        else if(left_type === 'text' && right_type === 'text' &&\n                right.exprs[0].expr_type() === 'text') {\n            // Right sequence starts with a Text; merge it with the new Text.\n            return new SequenceExpr(\n                [new TextExpr(left.text + right.exprs[0].text)\n                ].concat(right.exprs.slice(1)));\n        }\n        else if(left_type === 'sequence') {\n            // Sequence + anything => longer Sequence\n            return new SequenceExpr(left.exprs.concat([right]));\n        }\n        else if(right_type === 'sequence') {\n            // Anything + Sequence => longer Sequence\n            return new SequenceExpr([left].concat(right.exprs));\n        }\n        else if(left_type === 'command' && right_type === 'command')\n            return Expr.combine_command_pair(left, right);\n        else if(right_type === 'prefix') {\n            // X + prefix(Y) -> infix(X, Y) (this should always be OK to do)\n            return new InfixExpr(right.prefix_expr, left, right.base_expr);\n        }\n        else\n            return new SequenceExpr([left, right]);\n    }\n\n    // Combine two CommandExprs with some special-casing for some particular command pairs.\n    static combine_command_pair(left, right) {\n        const left_name = left.command_name, right_name = right.command_name;\n\n\t// Try combining \\boldsymbol{X...} + \\boldsymbol{Y...} -> \\boldsymbol{X...Y...}\n\t// Combining in this way fixes (or at least improves) some edge-case spacing problems with KaTeX.\n\t// Compare: \\boldsymbol{W}\\boldsymbol{A} vs. \\boldsymbol{WA}\n\tif(left_name === 'boldsymbol' && right_name === 'boldsymbol' &&\n\t   left.operand_count() === 1 && right.operand_count() === 1) {\n\t    return new SequenceExpr(\n\t\t[left.operand_exprs[0], right.operand_exprs[0]]\n\t    ).as_bold();\n\t}\n\n\t// Try combining adjacent integral symbols into multiple-integral commands.\n        let new_command_name = null;\n        if(left_name === 'int' && right_name === 'int') new_command_name = 'iint';\n        if(left_name === 'iint' && right_name === 'int') new_command_name = 'iiint';\n        if(left_name === 'int' && right_name === 'iint') new_command_name = 'iiint';\n        if(left_name === 'oint' && right_name === 'oint') new_command_name = 'oiint';\n        if(left_name === 'oiint' && right_name === 'oint') new_command_name = 'oiiint';\n        if(left_name === 'oint' && right_name === 'oiint') new_command_name = 'oiiint';\n        if(new_command_name)\n            return new CommandExpr(new_command_name);\n\n\t// Everything else just becomes a SequenceExpr.\n        return new SequenceExpr([left, right]);\n    }\n    \n    expr_type() { return '???'; }\n\n    to_latex() {\n        let emitter = new LatexEmitter();\n        this.emit_latex(emitter);\n        return emitter.finished_string();\n    }\n\n    emit_latex(emitter) { emitter.text('INVALID'); }\n\n    // Return a list of property names on this object that should be serialized\n    json_keys() { return []; }\n\n    // Subclasses can extend this if they need special handling.\n    to_json() {\n        let json = { expr_type: this.expr_type() };\n        this.json_keys().forEach(json_key => {\n            const obj = this[json_key];\n            let value;\n            if(obj === null || obj === undefined)\n                value = null;\n            else if(typeof(obj) === 'object' && obj instanceof Expr)\n                value = obj.to_json();\n            else if(typeof(obj) === 'object') {\n                // Assume it's an Array.  It could also be a 2-dimensional array, in which case the subclasses\n                // need to extend to_json() instead of relying on this default.\n                value = obj.map(elt => elt.to_json());\n            }\n            else // Strings, numbers, etc.\n                value = obj;\n            json[json_key] = value;\n        });\n        return json;\n    }\n\n    to_text() { return \"$$\\n\" + this.to_latex() + \"\\n$$\"; }\n\n    // Invoke fn once for each subexpression in this expression tree (including 'this').\n    // The visiting is performed depth-first, left-to-right, so should correspond visually\n    // to the left-to-right rendering of the expression.\n    visit(fn) { fn(this); }\n\n    // Find the first DeferExpr that exists in this expression.  Returns null if none.\n    find_defer() {\n        let found = null;\n        this.visit(expr => {\n            if(expr.expr_type() === 'defer' && !found)\n                found = expr;\n        });\n        return found;\n    }\n\n    // Return a (possibly) new Expr with old_expr substituted for new_expr, if old_expr is present.\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr)\n            return new_expr;\n        else\n            return this;\n    }\n\n    // NOTE: CommandExpr overrides this\n    as_bold() { return new CommandExpr('boldsymbol', [this]); }\n\n    is_command_with_name(command_name) { return false; }\n}\n\n\n// Represents a \"raw\" LaTeX command such as \\sqrt plus optional operand expressions.\nclass CommandExpr extends Expr {\n    // NOTES:\n    //   - 'command_name' does not include the initial \\ character\n    //   - 'options', if provided, is a plain string that becomes \"\\command_name[options]{...}\"\n    //   - 'command_name' itself can include the options in [brackets], in which case it is\n    //     automatically split off into 'options' (this is used for keybindings).\n    //     (e.g.: command_name='sqrt[3]' -> command_name='sqrt', options='3'\n    constructor(command_name, operand_exprs, options) {\n        super();\n        if(command_name.endsWith(']')) {\n            const index = command_name.indexOf('[');\n            this.command_name = command_name.slice(0, index);\n            this.options = command_name.slice(index+1, command_name.length-1);\n        }\n        else {\n            this.command_name = command_name;\n            this.options = options === undefined ? null : options;\n        }\n        this.operand_exprs = operand_exprs || [];\n    }\n\n    operand_count() { return this.operand_exprs.length; }\n    expr_type() { return 'command'; }\n    json_keys() { return ['command_name', 'operand_exprs', 'options']; }\n\n    emit_latex(emitter) {\n        emitter.command(this.command_name, this.options);\n        // Braces need to be forced around each operand, even single-letter operands.\n        this.operand_exprs.forEach(operand_expr => emitter.grouped_expr(operand_expr, 'force'));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.operand_exprs.forEach(operand_expr => operand_expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new CommandExpr(\n            this.command_name,\n            this.operand_exprs.map(operand_expr => operand_expr.substitute_expr(old_expr, new_expr)),\n            this.options);\n    }\n\n    // Wrap this expression in a \\boldsymbol{...} command if it's not already.\n    // LaTeX has different ways of expressing 'bold' so this is not quite trivial.\n    // TextItem implements as_bold() in yet another way.\n    as_bold() {\n        if(this.command_name === 'boldsymbol')\n            return this;\n        else if(this.command_name === 'mathrm') {\n            // Replace \\mathrm with \\bold (as if it were originally created with [.][e] (operator bold))\n            if(this.operand_count() === 1)\n                return new CommandExpr('bold', this.operand_exprs);\n            else\n                return this;\n        }\n        else if(this.command_name === 'mathtt') {\n            // Special case for monospace text: there is no monospace bold font, so wrap\n            // it in \\pmb{} instead.  Since KaTeX v.0.16.2, \\pmb is rendered better\n            // (via CSS shadows) which makes this feasible.\n            // TODO: add an action do_make_monospace() similar to do_make_roman to handle\n            // the inverse case (making an existing bold item monospace).\n            // TODO: also allow this for other text styles like Blackboard, etc.\n            if(this.operand_count() === 1)\n                return new CommandExpr('pmb', [this]);\n            else\n                return this;\n        }\n        else\n            return super.as_bold();\n    }\n\n    is_command_with_name(command_name) {\n        return this.command_name === command_name;\n    }\n}\n\n\n// Represents one expression in front of another.  Similar to InfixExpr.\nclass PrefixExpr extends Expr {\n    constructor(base_expr, prefix_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.prefix_expr = prefix_expr;\n    }\n\n    expr_type() { return 'prefix'; }\n\n    json_keys() { return ['base_expr', 'prefix_expr']; }\n\n    emit_latex(emitter) {\n        emitter.expr(this.prefix_expr);\n        emitter.expr(this.base_expr);\n    }\n\n    visit(fn) {\n        this.prefix_expr.visit(fn);\n        fn(this);\n        this.base_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new PrefixExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.prefix_expr.substitute_expr(old_expr, new_expr));\n    }\n}\n\n\n// Represents two expressions joined by textual infix (something like + or \\wedge).\n// This is similar to concatenated TextNodes, but using InfixExpr lets things like ArrayExpr\n// automatically detect where to put alignments when the contents are InfixExprs.\nclass InfixExpr extends Expr {\n    // split can be null, 'before', or 'after'.\n    // If it's non-null, the equation is split via \\\\ and \\qquad, either before or after the infix.\n    constructor(operator_expr, left_expr, right_expr, split) {\n        super();\n        this.operator_expr = operator_expr;\n        this.left_expr = left_expr;\n        this.right_expr = right_expr;\n        this.split = split || null;  // to avoid 'undefined's in the JSON\n    }\n\n    expr_type() { return 'infix'; }\n\n    json_keys() { return ['operator_expr', 'left_expr', 'right_expr', 'split']; }\n\n    // If the infix operator is a simple command like '+' or '\\cap', return it\n    // (without the initial \\ if it has one).  If it's anything more complex, return null.\n    operator_text() {\n        const op_expr = this.operator_expr;\n        if(op_expr.expr_type() === 'command' && op_expr.operand_count() === 0)\n            return op_expr.command_name;\n        else if(op_expr.expr_type() === 'text')\n            return op_expr.text;\n        else\n            return null;\n    }\n\n    // Check if this is a low-precedence infix expression like x+y\n    // This is mostly for convenience so it doesn't need to be that precise.\n    needs_autoparenthesization() {\n        const op = this.operator_text();\n        return op && (op === '+' || op === '-');\n    }\n\n    emit_latex(emitter) {\n        emitter.expr(this.left_expr);\n        if(this.split === 'before') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.operator_expr);\n        if(this.split === 'after') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.right_expr);\n    }\n\n    visit(fn) {\n        this.left_expr.visit(fn);\n        this.operator_expr.visit(fn);\n        fn(this);\n        this.right_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new InfixExpr(\n            this.operator_expr.substitute_expr(old_expr, new_expr),\n            this.left_expr.substitute_expr(old_expr, new_expr),\n            this.right_expr.substitute_expr(old_expr, new_expr),\n            this.split);\n    }\n\n    // Returns an InfixExpr like this one, but with the specified split mode set.\n    with_split_mode(new_split_mode) {\n        return new InfixExpr(\n            this.operator_expr, this.left_expr, this.right_expr, new_split_mode);\n    }\n}\n\n\n// Represents a \"defer marker\" that can be used with the 'substitute_defer' command.\nclass DeferExpr extends Expr {\n    expr_type() { return 'defer'; }\n    json_keys() { return []; }\n\n    emit_latex(emitter) {\n        const expr = new CommandExpr('htmlClass', [\n            new TextExpr('defer_expr'), new TextExpr(\"\\\\blacksquare\")]);\n        emitter.expr(expr);\n    }\n}\n\n\n// Represents a snippet of LaTeX code; these are the \"leaves\" of Expr-trees.\nclass TextExpr extends Expr {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n\n    expr_type() { return 'text'; }\n    json_keys() { return ['text']; }\n\n    emit_latex(emitter) { emitter.text(this.text); }\n}\n\n\n// Represents a sequence of expressions all concatenated together.\n// Adjacent SequenceExprs can be merged together; see Expr.combine_pair().\nclass SequenceExpr extends Expr {\n    constructor(exprs) {\n        super();\n        this.exprs = exprs;\n    }\n\n    expr_type() { return 'sequence'; }\n    json_keys() { return ['exprs']; }\n\n    emit_latex(emitter) {\n        // Emit each subexpression in order, with a special case for a large operator\n        // like \\sum followed by a \\mathopen{} (e.g. f(x) created with [/][o]).\n        // KaTeX renders this case with too little spacing between the two, so\n        // explicitly insert a thinspace here.\n        //\n        // NOTE: \\int (and related symbols like \\oint) have the same problem, but\n        // because of the shape of these operators it looks fine and there's no need\n        // for this workaround.\n        const problematic_large_operators = ['sum', 'prod', 'bigcup', 'bigcap'];\n        let last_was_large_op = false;\n        this.exprs.forEach(expr => {\n            if(last_was_large_op && expr.is_command_with_name('mathopen'))\n                emitter.command(',');\n            emitter.expr(expr);\n            last_was_large_op = problematic_large_operators.some(op => expr.is_command_with_name(op));\n        });\n    }\n\n    visit(fn) {\n        fn(this);\n        this.exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SequenceExpr(\n            this.exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents an expression enclosed in (flexible) left/right delimiters.\n// \\left( ... \\right)\n// If there is more than one inner_expr, they'll be separated with this.middle_type\n// e.g.: \\left( x \\middle| y \\right)\nclass DelimiterExpr extends Expr {\n    static parenthesize(expr) {\n        return new DelimiterExpr('(', ')', null, [expr]);\n    }\n\n    // Parenthesize 'expr' only if it's a low-precedence InfixExpr like 'x+y'.\n    static autoparenthesize(expr) {\n        if(expr.expr_type() === 'infix' && expr.needs_autoparenthesization())\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n\n    // Parenthesize 'expr' only if it's a \"fraction\", which could mean one of:\n    //   \\frac{x}{y}\n    //   x/y\n    //   \\left.x\\middle/\\right.  (as created by e.g. [,][\\])\n    static autoparenthesize_frac(expr) {\n        const needs_parenthesization = (\n            // \\frac{x}{y}\n            (expr.expr_type() === 'command' &&\n             expr.command_name === 'frac' &&\n             expr.operand_count() === 2) ||\n\n            // x/y\n            (expr.expr_type() === 'infix' && expr.operator_text() === '/') ||\n\n            // \\left.x\\middle/\\right.\n            (expr.expr_type() === 'delimiter' &&\n             expr.left_type === '.' &&\n             expr.middle_type === '/' &&\n             expr.right_type === '.')\n        );\n        if(needs_parenthesization)\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n    \n    constructor(left_type, right_type, middle_type, inner_exprs) {\n        super();\n        this.left_type = left_type;\n        this.right_type = right_type;\n        this.middle_type = middle_type || null;  // to avoid 'undefined's in the JSON\n        this.inner_exprs = inner_exprs || [];\n    }\n\n    expr_type() { return 'delimiter'; }\n    json_keys() { return ['left_type', 'right_type', 'middle_type', 'inner_exprs']; }\n\n    emit_latex(emitter) {\n        emitter.command('left');\n        emitter.text_or_command(this.left_type);\n        this.inner_exprs.forEach((expr, index) => {\n            if(index > 0) {\n                emitter.command('middle');\n                emitter.text_or_command(this.middle_type || '|');\n            }\n            emitter.expr(expr);\n        });\n        emitter.command('right');\n        emitter.text_or_command(this.right_type);\n    }\n\n    visit(fn) {\n        fn(this);\n        this.inner_exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents a base expression with either a subscript or superscript, or both.\nclass SubscriptSuperscriptExpr extends Expr {\n    constructor(base_expr, subscript_expr, superscript_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.subscript_expr = subscript_expr;\n        this.superscript_expr = superscript_expr;\n    }\n\n    expr_type() { return 'subscriptsuperscript'; }\n    json_keys() { return ['base_expr', 'subscript_expr', 'superscript_expr']; }\n\n    emit_latex(emitter) {\n        // If the base_expr is a command, don't put it inside grouping braces.\n        // This accounts for attaching subscripts or superscripts to commands\n        // with arguments such as \\underbrace{xyz}_{abc}.\n        if(this.base_expr.expr_type() === 'command')\n            emitter.expr(this.base_expr);\n        else\n            emitter.grouped_expr(this.base_expr);\n        if(this.subscript_expr) {\n            emitter.text('_');\n            // 'force_commands' ensures that single LaTeX commands are still grouped, even\n            // though single-letter super/subscripts are still OK to leave ungrouped.\n            // e.g.: x^{\\sum} instead of x^\\sum, but x^2 is fine.\n            emitter.grouped_expr(this.subscript_expr, 'force_commands');\n        }\n        if(this.superscript_expr) {\n            emitter.text('^');\n            emitter.grouped_expr(this.superscript_expr, 'force_commands');\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.base_expr.visit(fn);\n        if(this.subscript_expr) this.subscript_expr.visit(fn);\n        if(this.superscript_expr) this.superscript_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SubscriptSuperscriptExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.subscript_expr ? this.subscript_expr.substitute_expr(old_expr, new_expr) : null,\n            this.superscript_expr ? this.superscript_expr.substitute_expr(old_expr, new_expr) : null);\n    }\n\n    is_command_with_name(command_name) {\n        return this.base_expr.is_command_with_name(command_name);\n    }\n}\n\n\n// \\begin{bmatrix} ... etc\nclass ArrayExpr extends Expr {\n    // Stack two ArrayExprs on top of each other.\n    // If there is an incompatibility such as mismatched column counts, null is returned.\n    static stack_arrays(expr1, expr2) {\n        if(expr1.column_count !== expr2.column_count)\n            return null;\n        return new ArrayExpr(\n            expr2.array_type,\n            expr1.row_count + expr2.row_count,\n            expr1.column_count,\n            expr1.element_exprs.concat(expr2.element_exprs),\n            expr1.row_separators.concat([null], expr2.row_separators),\n            expr2.column_separators);\n    }\n    \n    // split_mode:  (for placing alignment markers automatically for \"\\cases\" and such)\n    //    'none': do nothing, just put each entry_expr in its own row\n    //    'infix': place alignment markers before infix, if any\n    //    'colon': if there is a ':' infix, remove it and place alignment marker where it was\n    //    'colon_if': like 'colon', but place the word \"if\" before the right-hand side if there\n    //                is a ':' infix.  If there is no ':' infix, the right-hand side becomes 'otherwise'.\n    static split_elements(exprs, split_mode) {\n        return exprs.map(expr => ArrayExpr._split_expr(expr, split_mode));\n    }\n\n    // Split up 'expr' into separately-aligned 'columns'.\n    static _split_expr(expr, split_mode) {\n        switch(split_mode) {\n        case 'none':\n            return [expr];\n        case 'infix':\n            if(expr.expr_type() === 'infix')\n                return [expr.left_expr, new PrefixExpr(expr.right_expr, expr.operator_expr)];\n            else\n                return [expr, null];\n        case 'colon':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [expr.left_expr, expr.right_expr];\n            else\n                return [expr, null];\n        case 'colon_if':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [\n                    expr.left_expr,\n                    Expr.combine_pair(\n                        Expr.combine_pair(\n                            new CommandExpr('mathrm', [new TextExpr('if')]),\n                            new CommandExpr('enspace'), []),\n                        expr.right_expr)];\n            else\n                return [\n                    expr,\n                    new CommandExpr('mathrm', [new TextExpr('otherwise')])];\n        default:\n            return [expr];\n        }\n    }\n\n    // row_separators and column_separators can either be null or an array of N-1\n    // items (where N is the row or column count respectively).  Each item can be\n    // one of: [null, 'solid', 'dashed'] indicating the type of separator to put\n    // between the corresponding row or column.\n    constructor(array_type, row_count, column_count, element_exprs,\n                row_separators, column_separators) {\n        super();\n        this.array_type = array_type;\n        this.row_count = row_count;\n        this.column_count = column_count;\n        this.element_exprs = element_exprs;\n        this.row_separators = row_separators || new Array(row_count-1).fill(null);\n        this.column_separators = column_separators || new Array(column_count-1).fill(null);\n    }\n\n    expr_type() { return 'array'; }\n    json_keys() { return ['array_type', 'row_count', 'column_count']; }\n\n    is_matrix() {\n        const t = this.array_type;\n        // TODO: t.endsWith('matrix')?\n        return (t === 'bmatrix' || t === 'Bmatrix' || t === 'matrix' ||\n                t === 'pmatrix' || t === 'vmatrix' || t === 'Vmatrix');\n    }\n\n    // Return a copy of this expression but with a different array_type (e.g. 'pmatrix').\n    // is_matrix() should be true before calling this.\n    with_array_type(new_array_type) {\n        return new ArrayExpr(\n            new_array_type, this.row_count, this.column_count,\n            this.element_exprs, this.row_separators, this.column_separators);\n    }\n\n    as_bold() {\n        return new ArrayExpr(\n            this.array_type,\n            this.row_count,\n            this.column_count,\n            this.element_exprs.map(row_exprs =>\n                row_exprs.map(expr => expr.as_bold())),\n            this.row_separators,\n            this.column_separators);\n    }\n\n    to_json() {\n        let json = super.to_json();\n        json.element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(expr => expr.to_json()));\n        // Don't emit row/column separators if they are all turned off (to keep the JSON smaller).\n        if(!this.row_separators.every(s => s === null))\n            json.row_separators = this.row_separators;\n        if(!this.column_separators.every(s => s === null))\n            json.column_separators = this.column_separators;\n        return json;\n    }\n\n    // Return a new ArrayExpr like this one, but with ellipses inserted before the\n    // last row and column, and along the diagonal.\n    // NOTE: is_matrix() should be true before calling this.\n    // NOTE: this does not preserve column/row separators.  There's not really a\n    // consistent way of doing this automatically.\n    with_ellipses() {\n        const make_cell = (content) => new TextExpr(content);\n        let new_row_count = this.row_count, new_column_count = this.column_count;\n        let new_element_exprs;\n        if(this.column_count > 1) {\n            new_element_exprs = this.element_exprs.map((row_exprs, index) => [\n                ...row_exprs.slice(0, -1),\n                make_cell((index === 0 || index === this.row_count-1) ? \"\\\\cdots\" : ''),\n                row_exprs[this.column_count-1]\n            ]);\n            new_column_count++;\n        }\n        else\n            new_element_exprs = [...this.element_exprs];\n        if(this.row_count > 1) {\n            let inserted_row_exprs = [make_cell(\"\\\\vdots\")];\n            for(let i = 0; i < this.column_count-2; i++)\n                inserted_row_exprs.push(make_cell(''));\n            if(this.column_count > 1) {\n                inserted_row_exprs.push(make_cell(\"\\\\ddots\"));\n                inserted_row_exprs.push(make_cell(\"\\\\vdots\"));\n            }\n            new_element_exprs.splice(this.row_count-1, 0, inserted_row_exprs);\n            new_row_count++;\n        }\n        // TODO: preserve row/column separators\n        return new ArrayExpr(this.array_type, new_row_count, new_column_count, new_element_exprs);\n    }\n\n    // Return a new ArrayExpr with rows and columns interchanged.\n    // NOTE: is_matrix() should be true before calling this.\n    transposed() {\n        let new_element_exprs = [];\n        for(let i = 0; i < this.column_count; i++)\n            new_element_exprs.push(this.element_exprs.map(\n                row_exprs => this._transpose_cell(row_exprs[i])));\n        return new ArrayExpr(\n            this.array_type, this.column_count, this.row_count, new_element_exprs,\n            this.column_separators, this.row_separators);\n    }\n\n    // When transposing a matrix, we generally want to flip vertical and horizontal ellipses\n    // within the cells.\n    _transpose_cell(cell_expr) {\n        if(cell_expr.expr_type() === 'text') {\n            switch(cell_expr.text) {\n            case \"\\\\vdots\": return new TextExpr(\"\\\\cdots\");\n            case \"\\\\cdots\": return new TextExpr(\"\\\\vdots\");\n            default: break;\n            }\n        }\n        return cell_expr;\n    }\n\n    // Return an array of 1xN ArrayExprs, one for each row in this matrix.\n    split_rows() {\n        return this.element_exprs.map(\n            row_exprs => new ArrayExpr(\n                this.array_type, 1, this.column_count, [row_exprs],\n                this.column_separators, null));\n    }\n\n    // Return a copy with a changed row or column separator at the specified location.\n    // 'index'=0 means right after the first row or column, etc.\n    // 'index'=null means apply separators to ALL rows or columns.\n    // 'type' is one of: [null, 'solid', 'dashed'].\n    // If 'toggle' is true, that indicates that if the current separator is already\n    // of the requested type, the separator will be turned off instead.\n    with_separator(is_column, index, type, toggle) {\n        const row_separators = [...this.row_separators];\n        const column_separators = [...this.column_separators];\n        const separators = is_column ? column_separators : row_separators;\n        const size = is_column ? this.column_count : this.row_count;\n        if(index === null) {\n            if(toggle && separators.every(s => s === type))\n                type = null;\n            for(let i = 0; i < size-1; i++)\n                separators[i] = type;\n        }\n        else {\n            if(index < 0 || index >= size-1)\n                return this;  // out of bounds\n            if(toggle && separators[index] === type)\n                type = null;\n            separators[index] = type;\n        }\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, this.element_exprs,\n            row_separators, column_separators);\n    }\n\n    // This is a matrix with at least one column separator specified.\n    // Unfortunately, with LaTeX/KaTeX, the {array} environment has to be used\n    // which doesn't support the surrounding matrix delimiters, so we have to\n    // explicitly put out the delimiters here.  But this also throws off the matrix\n    // spacing - \\kern is used to compensate for that.  But the spacing after \\kern\n    // is too small to accomodate horizontal rules (row separators) so if those are\n    // present, the (default) larger spacing is used.\n    _emit_array_with_separators(emitter) {\n        // Determine which delimiters to explicitly emit based on the matrix type.\n        let left_delim = null, right_delim = null;\n        switch(this.array_type) {\n        case 'bmatrix': left_delim = '['; right_delim = ']'; break;\n        case 'Bmatrix': left_delim = \"\\\\{\"; right_delim = \"\\\\}\"; break;\n        case 'matrix': left_delim = null; right_delim = null; break;\n        case 'pmatrix': left_delim = '('; right_delim = ')'; break;\n        case 'vmatrix': left_delim = right_delim = '|'; break;\n        case 'Vmatrix': left_delim = right_delim = \"\\\\Vert\"; break;\n        default: break;\n        }\n\n        // Assemble the LaTeX column separator \"specification\" string\n        // (the {c:c:c} part in: \\begin{array}{c:c:c}).\n        let pieces = ['{'];\n        for(let i = 0; i < this.column_count; i++) {\n            pieces.push('c');  // centered (only mode that's supported currently)\n            if(i < this.column_count-1) {\n                const s = this.column_separators[i];\n                if(s === 'solid') pieces.push('|');\n                else if(s === 'dashed') pieces.push(':');\n            }\n        }\n        pieces.push('}');\n        const column_layout_string = pieces.join('');\n\n        if(left_delim) {\n            emitter.command('left');\n            emitter.text_or_command(left_delim);\n        }\n        const has_row_separators = !this.row_separators.every(s => s === null);\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        emitter.begin_environment('array', column_layout_string);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0) {\n                emitter.row_separator();\n                const separator = this.row_separators[row_index-1];\n                if(separator) {\n                    if(separator === 'solid') emitter.command('hline')\n                    else if(separator === 'dashed') emitter.command('hdashline');\n                    emitter.text(\"\\n\");\n                }\n            }\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment('array');\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        if(right_delim) {\n            emitter.command('right');\n            emitter.text_or_command(right_delim);\n        }\n    }\n\n    emit_latex(emitter) {\n        // Matrices with row or column separators require special handling in LaTeX.\n        if(this.is_matrix() &&\n           !(this.column_separators.every(s => s === null) &&\n             this.row_separators.every(s => s === null)))\n            return this._emit_array_with_separators(emitter);\n\n        emitter.begin_environment(this.array_type);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0)\n                emitter.row_separator();\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment(this.array_type);\n    }\n\n    visit(fn) {\n        fn(this);\n        this.element_exprs.forEach(\n            row_exprs => row_exprs.forEach(expr => expr.visit(fn)));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        const new_element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(\n                expr => expr.substitute_expr(old_expr, new_expr)));\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, new_element_exprs,\n            this.row_separators, this.column_separators);\n    }\n}\n\n\n// Represents an entry in the stack or document.\nclass Item {\n    // Used for React collection keys.  Each entry in a React component list is\n    // supposed to have a unique ID.\n    // NOTE: iOS Safari doesn't seem to like static variables like this?\n    // As a workaround, this will be initialized after the class definition instead.\n    //static serial_number = 1;\n    static next_serial() { return Item.serial_number++; }\n\n    static from_json(json) {\n        switch(json.item_type) {\n        case 'expr':\n            return new ExprItem(\n                Expr.from_json(json.expr),\n                json.tag_expr ? Expr.from_json(json.tag_expr) : null);\n        case 'text':\n            return new TextItem(\n                json.elements.map(element_json => TextItemElement.from_json(element_json)),\n                !!json.is_heading);\n        case 'separator':\n            return new SeparatorItem(json.separator_type);\n        default:\n            return TextItem.from_string('invalid item type ' + json.item_type);\n        }\n    }\n\n    // // Create an appropriate Item subclass instance for the given string.\n    // // If string is wrapped in $$ pairs, it's treated as an ExprItem containing raw LaTeX code.\n    // // Otherwise, it's treated as Markdown text.\n    // static from_string(string) {\n    //     string = (string || '').trim();\n    //     // NOTE: .slice(2) here is to avoid pathological cases '$$', '$$$'\n    //     if(string.startsWith('$$') && string.slice(2).endsWith('$$')) {\n    //         const latex = string.slice(2, -2);\n    //         return new ExprItem(new TextExpr(latex));\n    //     }\n    //     else\n    //         return new MarkdownItem(string);\n    // }\n    \n    constructor() {\n        this.serial = Item.next_serial();\n    }\n\n    react_key(prefix) { return prefix + '_' + this.serial; }\n\n    // Subclasses need to override these:\n    item_type() { return '???'; }\n    to_json() { return {}; }\n    to_text() { return '???'; }\n\n    // Return a new Item of the same type and contents (shallow copy) but with a new serial_number.\n    // This is mainly needed for React, which needs a distinct React key for each item in\n    // a list (like the list of stack items).  Things like 'dup' that can duplicate objects\n    // need to make sure to use clone() so that every Item in the stack/document is distinct.\n    clone() { return null; }\n}\n\n// iOS Safari workaround\nItem.serial_number = 1;\n\n\n// Represents a math expression (Expr instance) in the stack or document.\nclass ExprItem extends Item {\n    // tag_expr is an optional tag shown to the right of the item.\n    constructor(expr, tag_expr) {\n        super()\n        this.expr = expr;\n        this.tag_expr = tag_expr;\n    }\n\n    item_type() { return 'expr'; }\n\n    to_json() {\n        let json = {item_type: 'expr', expr: this.expr.to_json()};\n        if(this.tag_expr) json.tag_expr = this.tag_expr.to_json();\n        return json;\n    }\n\n    to_text() { return this.expr.to_text(); }\n\n    clone() { return new ExprItem(this.expr, this.tag_expr); }\n\n    as_bold() { return new ExprItem(this.expr.as_bold(), this.tag_expr); }\n}\n\n\n// Item that visually separates parts of the document.\n// Currently the only supported separator_type is 'hrule'.\nclass SeparatorItem extends Item {\n    constructor(separator_type) {\n        super();\n        this.separator_type = separator_type;\n    }\n\n    item_type() { return 'separator'; }\n    to_json() { return {item_type: 'separator', separator_type: this.separator_type}; }\n    to_text() { return \"\\\\rule\"; }\n    clone() { return new SeparatorItem(this.separator_type); }\n    as_bold() { return this.clone(); }\n}\n\n\n// A TextItem contains a list of TextItemElement subclass instances.\n//   - TextItemExprElement - wraps a Expr object to be rendered inline with the text\n//   - TextItemTextElement - a string of text to be rendered as \\text{...} command(s)\n//   - TextItemRawElement - a string of text to be rendered directly (mostly a special\n//     case to support combining math and text with infix operators)\nclass TextItemElement {\n    static from_json(json) {\n        if(json.expr)\n            return new TextItemExprElement(Expr.from_json(json.expr));\n        else if(json.text)\n            return new TextItemTextElement(json.text, !!json.is_bold);\n        else\n            return new TextItemRawElement(json.raw);\n    }\n\n    is_text() { return false; }\n    is_expr() { return false; }\n    is_raw() { return false; }\n}\n\n\nclass TextItemTextElement extends TextItemElement {\n    // Bold font is handled specially for text items.\n    // Within a \\text{...}, bold is switched on and off via \\bf{} and \\rm{} commands.\n    constructor(text, is_bold) {\n        super();\n        this.text = text;\n        this.is_bold = !!is_bold;\n    }\n\n    is_text() { return true; }\n\n    as_bold() { return new TextItemTextElement(this.text, true); }\n\n    to_json() {\n        let json = { 'text': this.text };\n        if(this.is_bold) json.is_bold = true;\n        return json;\n    }\n\n    // TODO: respect is_bold here\n    to_text() { return this.text; }\n\n    to_latex() {\n        // This is a little messy because of how KaTeX handles line breaks.\n        // Normally, breaks are only allowed after operators like +, but when\n        // rendering TextItems, we want to allow breaks after each word.\n        // As a workaround, a separate \\text{...} command is created for each\n        // word followed by \\allowbreak commands.  \\allowbreak does not work\n        // inside the actual \\text{...}, otherwise we could presumably just output\n        // \\text{word1\\allowbreak word2\\allowbreak}.\n        const tokens = this.text.split(/ +/);\n        let pieces = [];\n        for(let i = 0; i < tokens.length; i++) {\n            pieces.push(\"\\\\text{\");\n            if(this.is_bold)\n                pieces.push(\"\\\\bf{}\");\n            pieces.push(this._latex_escape(tokens[i]));\n            if(i < tokens.length-1)\n                pieces.push(' ');  // preserve spacing between words\n            pieces.push(\"}\\\\allowbreak \");\n        }\n        return pieces.join('');\n    }\n\n    // Special escape sequences are needed within \\text{...} commands.\n    // This is a quirk of TeX/LaTeX.\n    _latex_escape(text) {\n        // TODO: make this table a global (or switch statement) so it doesn't constantly get remade\n        // NOTE: not sure how to properly get ^ and ~ inside \\text{...} with KaTeX.\n        // Fortunately, \\char\" always works.\n        const replacements = {\n            '_': \"\\\\_\",\n            '^': \"\\\\char\\\"005e{}\",\n            '%': \"\\\\%\",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\char\\\"223c{}\",\n            \"\\\\\": \"\\\\textbackslash \"\n        };\n        return text.replaceAll(/[_^%$&#}{~\\\\]/g, match => replacements[match]);\n    }\n}\n\nclass TextItemExprElement extends TextItemElement {\n    constructor(expr) { super(); this.expr = expr; }\n    is_expr() { return true; }\n    as_bold() { return new TextItemExprElement(this.expr.as_bold()); }\n    to_json() { return { 'expr': this.expr.to_json() }; }\n    to_text() { return '$' + this.expr.to_latex() + '$'; }\n    to_latex() { return this.expr.to_latex(); }\n}\n\n\n// Represents a \"raw\" piece of LaTeX text (similar to TextExpr) within a TextItem.\n// This is used for things like combining a TextItem and ExprItem with an infix operator.\n// TextItemTextElement can't be used for the infix itself because we don't want to wrap it\n// in a \\text{...} and we don't want to escape the operator's actual LaTeX command.\nclass TextItemRawElement extends TextItemElement {\n    constructor(string) { super(); this.string = string; }\n    is_raw() { return true; }\n    as_bold() { return this; }\n    to_json() { return { 'raw': this.string }; }\n    to_text() { return this.string; }\n    to_latex() { return this.string; }\n    is_explicit_space() { return this.string === \"\\\\,\"; }\n}\n\n\nclass TextItem extends Item {\n    static from_expr(expr) { return new TextItem([new TextItemExprElement(expr)]); }\n\n    static from_string(string) { return new TextItem([new TextItemTextElement(string)]); }\n\n    // Like from_string, but if the string contains \"[]\" sequences, these are parsed out\n    // and converted into DeferExpr placeholders.\n    static from_string_with_placeholders(string) {\n        const pieces = string.split('[]');\n        let elements = [];\n        for(let i = 0; i < pieces.length; i++) {\n            elements.push(new TextItemTextElement(pieces[i]));\n            if(i < pieces.length-1)\n                elements.push(new TextItemExprElement(new DeferExpr()));\n        }\n        return new TextItem(elements);\n    }\n\n    // item1/2 can each be TextItems or ExprItems.\n    static concatenate_items(item1, item2, separator_text) {\n        if(item1.item_type() === 'expr') item1 = TextItem.from_expr(item1.expr);\n        if(item2.item_type() === 'expr') item2 = TextItem.from_expr(item2.expr);\n        const elements = item1.elements.concat(\n            separator_text ? [new TextItemRawElement(separator_text)] : [],\n            item2.elements);\n        // Coalesce adjacent elements.  Rules are:\n        //   - Adjacent TextElements are concatenated directly as long as their is_bold flags match.\n        //   - A RawElement representing an explicit space character (\\,) is absorbed into an\n        //     adjacent TextElement as a normal space character (this is to make the spacing\n        //     less weird when attaching a text and expression via an infix space).\n        let merged_elements = [elements[0]];\n        for(let i = 1; i < elements.length; i++) {\n            const last_index = merged_elements.length-1;\n            const last_merged_element = merged_elements[last_index];\n            if(last_merged_element.is_text() && elements[i].is_text() &&\n               last_merged_element.is_bold === elements[i].is_bold) {\n                // Two adjacent TextElements with the same is_bold flag.\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + elements[i].text, elements[i].is_bold);\n            }\n            else if(last_merged_element.is_raw() && last_merged_element.is_explicit_space() &&\n                    elements[i].is_text()) {\n                // raw space + TextElement\n                merged_elements[last_index] =\n                    new TextItemTextElement(' ' + elements[i].text, elements[i].is_bold);\n            }\n            else if(last_merged_element.is_text() &&\n                    elements[i].is_raw() && elements[i].is_explicit_space()) {\n                // TextElement + raw space\n                merged_elements[last_index] =\n                    new TextItemTextElement(last_merged_element.text + ' ', last_merged_element.is_bold);\n            }\n            else {\n                // Any other combinations are left alone.\n                merged_elements.push(elements[i]);\n            }\n        }\n        return new TextItem(merged_elements, item1.is_heading || item2.is_heading);\n    }\n\n    constructor(elements, is_heading) {\n        super();\n        this.elements = elements;\n        this.is_heading = !!is_heading;\n    }\n\n    item_type() { return 'text'; }\n\n    to_json() {\n        let json = {\n            item_type: 'text',\n            elements: this.elements.map(element => element.to_json())\n        };\n        // avoid lots of useless is_heading: false in the JSON\n        if(this.is_heading) json.is_heading = true;\n        return json;\n    }\n\n    to_text() { return this.elements.map(element => element.to_text()).join(''); }\n    to_latex() { return this.elements.map(element => element.to_latex()).join(''); }\n    clone() { return new TextItem(this.elements, this.is_heading); }\n\n    // Return a clone of this with all elements bolded.\n    as_bold() {\n        return new TextItem(\n            this.elements.map(element => element.as_bold()),\n            this.is_heading);\n    }\n\n    // If there is any DeferExpr among the elements in this TextItem, substitute\n    // the first one for substitution_expr and return the new TextItem.\n    // If there are no DeferExprs available, return null.\n    try_substitute_defer(substitution_expr) {\n        let new_elements = [...this.elements];  // make a shallow copy\n        for(let i = 0; i < new_elements.length; i++) {\n            if(new_elements[i].is_expr()) {\n                const defer_expr = new_elements[i].expr.find_defer();\n                if(defer_expr) {\n                    const new_expr = new_elements[i].expr.substitute_expr(defer_expr, substitution_expr);\n                    new_elements[i] = new TextItemExprElement(new_expr);\n                    return new TextItem(new_elements, this.is_heading);\n                }\n            }\n        }\n        return null;\n    }\n}\n\n\n// NOTE: All stack operations return a new Stack with the modified\n// items, leaving the original untouched.\nclass Stack {\n    static from_json(json) {\n        return new Stack(\n            json.items.map(item_json => Item.from_json(item_json)));\n    }\n    \n    constructor(items) { this.items = items; }\n\n    depth() { return this.items.length; }\n    check(n) { return this.depth() >= n; }\n\n    // Check that at least n items are available and that they are all ExprItems\n    check_exprs(n) {\n        if(!this.check(n)) return false;\n        for(let i = 0; i < n; i++)\n            if(this.items[this.items.length-1-i].item_type() !== 'expr')\n                return false;\n        return true;\n    }\n\n    // Fetch item at position n (stack top = 1, next = 2, etc)\n    peek(n) {\n        if(!this.check(1)) this.underflow();\n        return this.items[this.items.length - n];\n    }\n\n    // Returns [new_stack, item1, item2, ...]\n    pop(n) {\n        if(n === undefined) n = 1;\n        if(!this.check(n)) this.underflow();\n        return this._unchecked_pop(n);\n    }\n\n    // Like pop(n) but all the items have to be ExprItems, and the wrapped Expr\n    // instances are returned, not the ExprItems.\n    pop_exprs(n) {\n        if(!this.check(n)) this.underflow();\n        if(!this.check_exprs(n)) this.type_error();\n        const [new_stack, ...items] = this._unchecked_pop(n);\n        return [new_stack, ...items.map(item => item.expr)];\n    }\n\n    pop_arrays(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array'))\n            return [new_stack, ...exprs];\n        else\n            this.type_error();\n    }\n\n    pop_matrices(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array' && expr.is_matrix()))\n            return [new_stack, ...exprs];\n        else\n            this.type_error();\n    }\n\n    _unchecked_pop(n) {\n        return [new Stack(this.items.slice(0, -n))].concat(this.items.slice(-n));\n    }\n    \n    push_all(items) {\n        if(!items.every(item => item instanceof Item))\n            throw new Error('pushing invalid item onto stack');\n        return new Stack(this.items.concat(items));\n    }\n    \n    push_all_exprs(exprs) { return this.push_all(exprs.map(expr => new ExprItem(expr))); }\n    push(item) { return this.push_all([item]); }\n    push_expr(expr) { return this.push_all_exprs([expr]); }\n\n    // Return a new Stack with cloned copies of all the items.\n    // The cloned items will have new React IDs, which will force a re-render of the items.\n    // This is used for things like changing between display and inline math mode, where\n    // the item content doesn't change but the way it's rendered does.\n    clone_all_items() { return new Stack(this.items.map(item => item.clone())); }\n\n    underflow() { throw new Error('stack_underflow'); }\n    type_error() { throw new Error('stack_type_error'); }\n\n    to_json() {\n        return {\n            object_type: 'stack',\n            items: this.items.map(item => item.to_json())\n        };\n    }\n}\n\n\n// NOTE: Like Stack, all Document operations are non-destructive and return a new\n// Document reflecting the changes.\nclass Document {\n    static from_json(json) {\n        return new Document(\n            json.items.map(item_json => Item.from_json(item_json)),\n            json.selection_index || 0);\n    }\n\n    // NOTE: selection_index can be in the range 0..items.length (inclusive).\n    constructor(items, selection_index) {\n        this.items = items || [];\n        this.selection_index = selection_index;\n    }\n\n    selected_item() {\n        if(this.selection_index > 0)\n            return this.items[this.selection_index-1];\n        else\n            return null;\n    }\n\n    // Insert a new item below the current selection, and select the inserted item.\n    // Returns a modified Document; does not alter this one.\n    insert_item(new_item) {\n        const index = this.selection_index;\n        const new_items = this.items.slice(0, index).concat([new_item], this.items.slice(index));\n        return new Document(new_items, index+1);\n    }\n\n    // Return the new Document if the selection was deleted successfully.\n    // Selects the item that was before this one (or select the 'document top' if this was the first).\n    // Return null if the selection is \"invalid\" (e.g., empty document).\n    delete_selection() {\n        const index = this.selection_index;\n        if(index > 0) {\n            const new_items = this.items.slice(0, index-1).concat(this.items.slice(index));\n            return new Document(new_items, index-1);\n        }\n        else\n            return null;\n    }\n\n    move_selection_by(offset) {\n        let new_index = this.selection_index + offset;\n        if(new_index < 0) new_index = 0;\n        if(new_index > this.items.length) new_index = this.items.length;\n        return new Document(this.items, new_index);\n    }\n\n    // If there is a current selection, move it by the given offset.\n    // Returns the changed document if anything was done.\n    shift_selection_by(offset) {\n        const item = this.selected_item();\n        if(!item ||\n           this.selection_index + offset <= 0 ||\n           this.selection_index + offset > this.items.length)\n            return null;\n        else\n            return this.delete_selection().move_selection_by(offset).insert_item(item);\n    }\n\n    // See Stack.clone_all_items()\n    clone_all_items() {\n        return new Document(this.items.map(item => item.clone()), this.selection_index);\n    }\n\n    to_json() {\n        return {\n            object_type: 'document',\n            items: this.items.map(item => item.to_json()),\n            selection_index: this.selection_index\n        };\n    }\n\n    to_text() {\n        return this.items.map(item => item.to_text()).join(\"\\n\\n\");\n    }\n}\n\n\nexport {\n    Keymap, Settings, AppState, UndoStack, DocumentStorage, ImportExportState, FileManagerState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, DeferExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    Item, ExprItem, TextItem, SeparatorItem, Stack, Document\n};\n\n","\nimport {\n    AppState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, DeferExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    ExprItem, TextItem, SeparatorItem\n} from './Models';\n\n\n// This acts as a sort of extension to the main App component.\n// TODO: rename -> EditorActions or something\nclass InputContext {\n    constructor(app_component, settings) {\n        this.app_component = app_component;\n        this.settings = settings;\n\n        // Current keymap mode.\n        this.mode = 'base';\n\n        // do_* actions can set this to switch into a new mode after the action (see switch_to_mode()).\n        this.new_mode = null;\n\n        // do_* actions can set this to update the document state.\n        this.new_document = null;\n        \n        this.files_changed = false;\n        this.file_saved = false;\n\n        // If set, this will be displayed as a transient notification in\n        // the stack area.  Cleared after every keypress.\n        this.notification_text = null;\n\n        // Special indicator to help control the undo stack:\n        //    null - save state to undo stack after this action as normal\n        //    'undo' - request an undo\n        //    'redo' - request a redo of saved undo states\n        //    'suppress' - perform action as normal, but don't save state to the undo state\n        //                 (used for 'minor' actions that don't warrant undo tracking)\n        //    'clear' - undo stack will be reset (e.g. when loading a new document)\n        this.perform_undo_or_redo = null;\n\n        // Current prefix argument for commands like Swap; can be one of:\n        //   null - no current prefix argument\n        //   >= 1 - normal prefix argument\n        //   -1   - \"all\" prefix argument (apply to all available items)\n        // Prefix arguments are cleared after any normal command is executed\n        // or if there's an error.  \"Normal\" command means anything that's not\n        // another prefix argument key.\n        this.prefix_argument = null;\n\n        // do_* actions can set this to true to keep the prefix_argument from being reset after the action.\n        this.preserve_prefix_argument = false;\n\n        // If true, display the stack top's LaTeX code rather than rendering it with KaTeX.\n        this.show_latex_source = false;\n\n        // If non-null, text-entry mode is active and the entry line will appear at the\n        // bottom of the stack panel.\n        this.text_entry = null;\n\n        // Type of text entry currently being performed.\n        //   'text_entry': [\"] - text entry will become a TextItem\n        //   'math_text_entry': [\\] - text entry will become a ExprItem with either normal italic math text\n        //               (if Enter is used) or \\mathrm roman math text (if Shift+Enter)\n        //   'latex_entry': [\\][\\] - text entry will become a ExprItem with an arbitrary LaTeX command\n        this.text_entry_mode = null;\n\n        // Tracks multi-part custom_delimiters commands.\n        this.custom_delimiters = {};\n    }\n\n    // Returns [was_handled, new_app_state]\n    // NOTE: was_handled just indicates that a keybinding was found; it doesn't necessarily mean\n    // that the command succeeded without error.\n    handle_key(app_state, key) {\n        if(key === 'Shift' || key === 'Alt' || key === 'Control')\n            return [false, app_state];\n\n        // If the popup panel is active, always use its dedicated keymap.\n        const effective_mode = this.settings.popup_mode || this.mode;\n        const command = this.settings.current_keymap.lookup_binding(effective_mode, key);\n        if(command) {\n            this.last_keypress = key;\n            const new_app_state = this.process_command(command, app_state);\n            return [true, new_app_state || app_state];\n        }\n        else\n            return [false, app_state];\n    }\n\n    // Returns the new AppState, or null if anything failed.\n    process_command(command, app_state) {\n        // Command strings are of the form:\n        //   'piece1;piece2;piece3'\n        // where the pieces are subcommands to be executed as a batch.\n        // Each piece in turn is a space-separated list where the first item\n        // is the command name and the remainder are arguments to the command.\n        // To put a literal semicolon into a command, write out 'semicolon'.\n        const commands = command.split(';').map(\n            piece => piece.split(' ').map(\n                token => token.replaceAll('semicolon', ';')));\n        return this.process_command_batch(commands, app_state);\n    }\n\n    // Process a batch of commands as a unit, returning the new AppState (or null if any of them failed).\n    // Each command is of the form [command_name, param1, param2, ...]\n    process_command_batch(commands, app_state) {\n        this.perform_undo_or_redo = null;\n        for(let i = 0; i < commands.length; i++) {\n            const [command_name, ...parameters] = commands[i];\n            const handler_function = this['do_' + command_name];\n            if(!handler_function)\n                return null;\n            try {\n                // Set up context variables for the handler functions to use:\n                this.app_state = app_state;\n\n                // TODO: maybe have this.changed.mode, this.changed.document etc.\n\n                // Watch to see if the handler sets new_mode.  If it does, switch to that\n                // mode after the command is finished, but otherwise switch back to base mode.\n                this.new_mode = null;\n\n                // The handler function will set this if the document changes.\n                // (Stack changes are expected to be returned by the handler function.)\n                this.new_document = null;\n\n                // Likewise this will be set to true if anything changed about the file list / file selection.\n                this.files_changed = false;  // TODO: rename -> selected_file_changed\n\n                // This will be set to true if the current file was saved by this action.\n                // This indicates that the app state's dirty flag should be cleared.\n                this.file_saved = false;\n\n                // If this is set to true, the prefix_argument will be kept as it as (otherwise it's reset to\n                // null after each action).\n                this.preserve_prefix_argument = false;\n\n                this.notification_text = null;\n\n                // Execute the handler and assemble the new state.\n                const new_stack = (handler_function.bind(this))(app_state.stack, ...parameters);\n                let new_app_state = new AppState(\n                    new_stack || app_state.stack,\n                    this.new_document || app_state.document\n                );\n                new_app_state.is_dirty = app_state.is_dirty || !new_app_state.same_as(app_state);\n                if(this.file_saved)  // Current file was saved; explicitly clear the dirty flag.\n                    new_app_state.is_dirty = false;\n                app_state = new_app_state;\n\n                // Switch back into base mode if the mode was not explicitly set by the handler.\n                this.mode = this.new_mode || 'base';\n\n                // Clear the prefix argument if the last command was not explicitly 'prefix_argument'.\n                if(!this.preserve_prefix_argument)\n                    this.prefix_argument = null;\n            } catch(e) {\n                if(e.message === 'stack_underflow' || e.message === 'stack_type_error' ||\n                   e.message === 'prefix_argument_required') {\n                    this.error_flash_stack();\n                    this.perform_undo_or_redo = null;\n                    this.mode = 'base';\n                    this.prefix_argument = null;\n                    return null;\n                }\n                else throw e;\n            }\n            finally {\n                // Avoid holding references longer than needed.\n                this.app_state = null;\n                this.new_document = null;\n            }\n        }\n        return app_state;\n    }\n\n    switch_to_mode(new_mode) {\n        this.new_mode = new_mode;\n    }\n\n    error_flash_element(dom_element) {\n        dom_element.classList.remove('errorflash');\n        // eslint-disable-next-line no-unused-expressions\n        dom_element.offsetWidth;  // force reflow\n        dom_element.classList.add('errorflash');\n    }\n\n    error_flash_stack() {\n        if(this.settings.layout.stack_split === 0)\n            return this.error_flash_document();\n        else\n            return this.error_flash_element(document.getElementById('stack_panel'));\n    }\n\n    error_flash_document() {\n        if(this.settings.layout.stack_split === 100)\n            return this.error_flash_stack();\n        else\n            return this.error_flash_element(document.getElementById('document_panel'));\n    }\n\n    clear_all_flashes() {\n        const elt_ids = ['stack_panel', 'document_panel'];\n        for(let elt_id = 0; elt_id < elt_ids.length; elt_id++) {\n            let elt = document.getElementById(elt_ids[elt_id]);\n            elt.classList.remove('errorflash');\n        }\n    }\n\n    notify(text) { this.notification_text = text; }\n\n    // If the base already has a subscript, and is_superscript is true, the superscript\n    // is placed into the existing base.  Otherwise, a new subscript/superscript node\n    // is created.  A similar rule applies if is_superscript is false.\n    _build_subscript_superscript(base_expr, child_expr, is_superscript) {\n        // Check to see if we can slot the child into an empty sub/superscript \"slot\".\n        if(base_expr.expr_type() === 'subscriptsuperscript' &&\n           ((base_expr.subscript_expr === null && !is_superscript) ||\n            (base_expr.superscript_expr === null && is_superscript))) {\n            // There's \"room\" for it in this expr.\n            return new SubscriptSuperscriptExpr(\n                base_expr.base_expr,\n                (is_superscript ? base_expr.subscript_expr : child_expr),\n                (is_superscript ? child_expr : base_expr.superscript_expr));\n        }\n        else {\n            // Create a new expr instead.  The base will be parenthesized if\n            // it's a low-precedence infix expression.\n            base_expr = DelimiterExpr.autoparenthesize(base_expr);\n\n            // This will automatically parenthesize fractions like x/y -> (x/y)^2.\n            // This line can be removed if this becomes undesired behavior.\n            base_expr = DelimiterExpr.autoparenthesize_frac(base_expr);\n\n            return new SubscriptSuperscriptExpr(\n                base_expr,\n                (is_superscript ? null : child_expr),\n                (is_superscript ? child_expr : null));\n        }\n    }\n\n    // Second-to-top stack item becomes the base, while the stack top becomes the\n    // subscript or superscript depending on 'is_superscript'.\n    make_subscript_superscript(stack, is_superscript) {\n        const [new_stack, base_expr, child_expr] = stack.pop_exprs(2);\n        const new_expr = this._build_subscript_superscript(base_expr, child_expr, is_superscript);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_subscript(stack) { return this.make_subscript_superscript(stack, false); }\n    do_superscript(stack) { return this.make_subscript_superscript(stack, true); }\n\n    // Add a \\prime to the stack top; this is almost like do_superscript with \\prime\n    // but needs some special handling to coalesce multiple \\prime into a single superscript.\n    do_prime(stack) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        const new_prime_expr = new CommandExpr('prime', []);\n\n        // Check whether the base expr is already of the form x^{\\prime}, x^{\\prime\\prime}, etc.\n        // If so, add an extra \\prime into the superscript.\n        if(base_expr.expr_type() === 'subscriptsuperscript' && base_expr.superscript_expr) {\n            const s = base_expr.superscript_expr;\n            const is_prime_command = expr =>\n                  expr.expr_type() === 'command' &&\n                  expr.operand_count() === 0 && expr.command_name === 'prime';\n            let new_superscript_expr;\n            if(is_prime_command(s))\n                new_superscript_expr = new SequenceExpr([s, new_prime_expr]);\n            else if(s.expr_type() === 'sequence' && s.exprs.every(is_prime_command))\n                new_superscript_expr = new SequenceExpr(s.exprs.concat([new_prime_expr]));\n            else\n                new_superscript_expr = null;\n            if(new_superscript_expr) {\n                const new_expr = new SubscriptSuperscriptExpr(\n                    base_expr.base_expr, base_expr.subscript_expr, new_superscript_expr);\n                return new_stack.push_expr(new_expr);\n            }\n        }\n\n        // Otherwise, adding a prime works just like adding a \\prime superscript.\n        const new_expr = this._build_subscript_superscript(base_expr, new_prime_expr, true);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_mode(stack, new_mode) { this.switch_to_mode(new_mode); }\n\n    do_undo() { this.perform_undo_or_redo = 'undo'; }\n    do_redo() { this.perform_undo_or_redo = 'redo'; }\n\n    do_prefix_argument() {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        this.preserve_prefix_argument = true;\n        let new_prefix_argument = null;\n        if(/^[0-9]$/.test(key)) {\n            const value = parseInt(key);\n            if(this.prefix_argument !== null && this.prefix_argument > 0) {\n                // Multi-digit prefix argument\n                new_prefix_argument = 10*this.prefix_argument + value;\n            }\n            else if(value > 0)\n                new_prefix_argument = value;\n        }\n        else if(key === '*')\n            new_prefix_argument = -1;\n        this.prefix_argument = new_prefix_argument;\n    }\n\n    // Convenience function for interpreting the prefix_argument in commands that support it.\n    _get_prefix_argument(default_value, all_value) {\n        if(this.prefix_argument === null)\n            return default_value;\n        else if(this.prefix_argument < 0)\n            return all_value;\n        else\n            return this.prefix_argument;\n    }\n\n    _require_prefix_argument() {\n        if(this.prefix_argument === null || this.prefix_argument <= 0)\n            throw new Error('prefix_argument_required');\n        else\n            return this.prefix_argument;\n    }\n\n    // Duplicate stack top; with prefix argument, duplicate the N top items.\n    do_dup(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.map(item => item.clone());  // keep item serial_numbers unique\n        return new_stack.push_all(items.concat(new_items));\n    }\n    // Drop stack top; with prefix argument, drop the top N items.\n    do_pop(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack;\n    }\n    // Drop Nth stack item (default=2, i.e.: a b -> b)\n    do_nip(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.slice(1));\n    }\n    // Reverse top N stack items (default=2)\n    do_swap(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        items.reverse();\n        return new_stack.push_all(items);\n    }\n    // Copy stack top above the current Nth stack item\n    // Default argument of 2 is: a b -> b a b\n    // Argument of 1 acts as \"dup\".\n    do_tuck(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const last_item = items[items.length-1];\n        return new_stack.push_all([last_item.clone()].concat(items));\n    }\n    // Pick the Nth item from the stack and copy it to the stack top.\n    // Default argument of 2 is: a b -> a b a\n    do_over(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.concat([items[0].clone()]));\n    }\n    // Rotate N top stack items (default=3: a b c -> b c a)\n    do_rot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(1).concat([items[0]]);\n        return new_stack.push_all(new_items);\n    }\n    // Rotate N top stack items backwards (default=3: a b c -> c a b)\n    do_unrot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(-1).concat(items.slice(0, -1));\n        return new_stack.push_all(new_items);\n    }\n\n    do_change_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        this.new_document = this.app_state.document.move_selection_by(amount);\n        // this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_shift_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        const new_document = this.app_state.document.shift_selection_by(amount);\n        if(new_document)\n            this.new_document = new_document;\n        else\n            this.error_flash_document();\n    }\n\n    do_save_file(stack) {\n        const file_manager_state = this.app_component.state.file_manager_state;\n        const filename = file_manager_state.current_filename;\n        if(!filename)\n            return this.do_save_file_as(stack);\n        this.app_component.state.document_storage.save_state(\n            this.app_state, filename,\n            () => {\n                this.notify('Saved: ' + filename);\n                this.settings.last_opened_filename = filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving:' + filename)\n        );\n        this.file_saved = true;\n    }\n\n    // TODO: factor with do_save_file\n    do_save_file_as(stack) {\n        let new_filename = window.prompt('Enter the filename to save as', this.settings.current_filename);\n        if(!new_filename)\n            return;\n        let document_storage = this.app_component.state.document_storage;\n        new_filename = document_storage.sanitize_filename(new_filename);\n        document_storage.save_state(\n            this.app_state, new_filename,\n            () => {\n                this.notify('Saved as: ' + new_filename);\n                let file_manager_state = this.app_component.state.file_manager_state;\n                file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving: ' + new_filename)\n        );\n        this.file_saved = true;\n    }\n\n    do_load_selected_file(stack) {\n        const selected_filename = this.app_component.state.file_manager_state.selected_filename;\n        if(!selected_filename)\n            return this.error_flash_document();\n        if(this.app_state.is_dirty) {\n            if(window.confirm(\"The current document has been modified.  Save it now?\")) {\n                // Abort actually loading the new file; otherwise a\n                // race condition between save and load is created due\n                // to document_storage calls being asynchronous.  This\n                // could be worked around by chaining the load after\n                // the save but this is the only place it's a problem.\n                return this.do_save_file(stack);\n            }\n        }\n        this.app_component.start_loading_filename(selected_filename);\n    }\n\n    do_start_new_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        let new_filename = file_manager_state.generate_unused_filename(file_manager_state.current_filename || 'untitled');\n        new_filename = window.prompt('Enter a filename for the new document', new_filename);\n        if(!new_filename) return;\n        new_filename = document_storage.sanitize_filename(new_filename || '');\n        if(!new_filename) {\n            alert('Invalid filename (must only contain letters, numbers and underscores)');\n            return;\n        }\n\n        // Save the current document if needed first.\n        if(file_manager_state.current_filename) {\n            // NOTE: don't put up the notification flash here, unlike with an explicit save_document.\n            document_storage.save_state(this.app_state, file_manager_state.current_filename);\n        }\n\n        // This basically works like loading from a blank file.\n        let new_state = new AppState();\n\n        // // Start the document with a default header showing the filename.\n        // const heading_item = TextItem.from_string(new_filename.replaceAll('_', ' '));\n        // heading_item.is_heading = true;\n        // this.new_document = new_state.document.insert_item(heading_item);\n        this.new_document = new_state.document;\n\n        file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n        this.settings.last_opened_filename = new_filename;\n        this.settings.save();\n        this.perform_undo_or_redo = 'clear';\n        this.notify('Started new file: ' + new_filename);\n        this.files_changed = true;\n        this.file_saved = true;\n        this.do_toggle_popup(new_state.stack, 'files');  // close file manager\n        return new_state.stack;\n    }\n\n    do_select_adjacent_file(stack, offset_string) {\n        const offset = parseInt(offset_string);\n        let file_manager_state = this.app_component.state.file_manager_state;\n        const new_filename = file_manager_state.find_adjacent_filename(file_manager_state.selected_filename, offset);\n        if(new_filename) {\n            file_manager_state.selected_filename = new_filename;\n            this.files_changed = true;\n        }\n    }\n\n    do_delete_selected_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        const filename = file_manager_state.selected_filename;\n        if(!filename) return this.error_flash_document();\n        if(!window.confirm(\"Really delete \\\"\" + filename + \"\\\"?\")) return;\n        document_storage.delete_state(\n            filename,\n            () => {\n                this.notify('Deleted: ' + filename);\n                const new_filename = file_manager_state.find_adjacent_filename(filename, 1);\n                // TODO: might need this.files_changed = true\n                file_manager_state.selected_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error deleting: ' + filename)\n        );\n    }\n\n    // If 'preserve' is set, items are kept on the stack after copying them\n    // into the document.  Otherwise, the items are removed from the stack.\n    do_pop_to_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        let new_document = this.app_state.document;\n        for(let n = 0; n < items.length; n++)\n            new_document = new_document.insert_item(items[n].clone());\n        this.new_document = new_document;\n        return preserve ? new_stack.push_all(items) : new_stack;\n    }\n\n    do_extract_from_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, -1);\n        if(arg <= 0) return stack;\n        let new_document = this.app_state.document;\n        // Make sure there are enough items above the current document selection to extract.\n        if(new_document.selection_index < arg)\n            return this.error_flash_document();\n        let new_items = [];\n        for(let n = 0; n < arg; n++) {\n            const item = new_document.selected_item();\n            new_document = new_document.delete_selection();\n            new_items.push(item.clone());\n        }\n        new_items.reverse();\n        if(!preserve)\n            this.new_document = new_document;\n        return stack.push_all(new_items);\n    }\n\n    do_insert_separator(stack, separator_type) {\n        return stack.push(new SeparatorItem(separator_type));\n    }\n\n    do_insert(stack, text) {\n        // TODO: handle this better\n        text = text || '';  // handle 'insert nothing' case\n        if(text.startsWith(\"\\\\\"))\n            return stack.push_expr(new CommandExpr(text.slice(1)));\n        else\n            return stack.push_expr(new TextExpr(text));\n    }\n\n    do_self_insert(stack) {\n        return this.do_insert(stack, this.last_keypress);\n    }\n\n    do_insert_defer(stack) {\n        return stack.push_expr(new DeferExpr());\n    }\n\n    // Used for \\mathscr / \\mathcal, which only have uppercase glyphs.\n    // case_type: 'uppercase', 'lowercase'\n    // Stack top should be an ExprItem with a simple TextExpr.\n    do_to_case(stack, case_type) {\n        const convert_fn = string => {\n            switch(case_type) {\n            case 'uppercase': return string.toUpperCase();\n            case 'lowercase': return string.toLowerCase();\n            default: return string;\n            }\n        };\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'text')\n            new_expr = new TextExpr(convert_fn(expr.text));\n        else\n            new_expr = expr;\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Pop arity_string items (default 1) and turn them into an Command expr.\n    do_operator(stack, opname, arity_string = '1') {\n        const arity = parseInt(arity_string);\n        const [new_stack, ...popped_exprs] = stack.pop_exprs(arity);\n        const result_expr = new CommandExpr(opname, popped_exprs)\n        return new_stack.push_expr(result_expr);\n    }\n\n    // \\sin{x} etc.  Works similarly to do_operator except the argument is autoparenthesized.\n    // If superscript_text is given, the text is applied as a superscript to the function\n    // itself (not to the argument).\n    // NOTE: if superscript_text starts with '_', it's treated as a subscript instead.\n    do_named_function(stack, funcname, superscript_text) {\n        let [new_stack, arg_expr] = stack.pop_exprs(1);\n        const orig_funcname = funcname;\n        if(superscript_text !== undefined) {\n            // \\sin^2{arg} etc.  This is a little awkward because the \"head\" of the command (\\sin^2) is\n            // no longer a simple LaTeX command like other CommandExprs.  Fortunately, things work out fine\n            // treating it as such by just textually concatenating the superscript (putting in explicit braces\n            // if necessary).  For example: \"sin^2\" or \"sin^{-1}\".\n            let sup_or_sub = '^';\n            if(superscript_text.startsWith('_')) {\n                sup_or_sub = '_';\n                superscript_text = superscript_text.slice(1);\n            }\n            if(superscript_text.length > 1)\n                superscript_text = ['{', superscript_text, '}'].join('');\n            funcname = [funcname, sup_or_sub, superscript_text].join('');\n        }\n        arg_expr = DelimiterExpr.autoparenthesize(arg_expr);\n\n        // \\sech and \\csch are are missing in LaTeX for some reason so they need to be special cased here.\n        let expr;\n        if(orig_funcname === 'sech' || orig_funcname === 'csch')\n            expr = new CommandExpr('operatorname', [new TextExpr(funcname), arg_expr]);\n        else\n            expr = new CommandExpr(funcname, [arg_expr]);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // opname == 'argmax': x -> \\underset{x}{\\argmax}\n    // If make_operatorname is true, opname is not a built-in LaTeX operator\n    // but is instead wrapped in an \\operatorname{} to simulate it.\n    do_underset_operator(stack, opname, make_operatorname) {\n        const [new_stack, underset_expr] = stack.pop_exprs(1);\n        let base_expr;\n        if(make_operatorname)\n            base_expr = new CommandExpr('operatorname', [new TextExpr(opname)]);\n        else\n            base_expr = new CommandExpr(opname);\n        const new_expr = new CommandExpr('underset', [underset_expr, base_expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Same as do_operator, except if the object the hat is being added to is a literal 'i' or 'j',\n    // or bolded i/j, it's first converted into a \\imath or \\jmath to remove the dot.\n    do_apply_hat(stack, hat_op) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'text' &&\n           (expr.text === 'i' || expr.text === 'j'))\n            expr = new CommandExpr(expr.text === 'i' ? 'imath' : 'jmath');\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                (expr.command_name === 'boldsymbol' || expr.command_name === 'mathbf')) {\n            const inner_expr = expr.operand_exprs[0];\n            if(inner_expr.expr_type() === 'text' &&\n               (inner_expr.text === 'i' || inner_expr.text === 'j'))\n                expr = new CommandExpr(\n                    expr.command_name,\n                    [new CommandExpr(inner_expr.text === 'i' ? 'imath' : 'jmath')]);\n        }\n        const result_expr = new CommandExpr(hat_op, [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    do_color(stack, colorname) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Strip off any existing \\textcolor\n        if(expr.expr_type() === 'command' &&\n           expr.command_name === 'textcolor' && expr.operand_count() === 2)\n            expr = expr.operand_exprs[1];\n\n        const new_expr = new CommandExpr('textcolor', [new TextExpr(colorname), expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // For ExprItems, this just wraps the expression in \\boldsymbol (if it's not already wrapped).\n    // For TextItems, the individual components of the text are bolded.\n    do_make_bold(stack) {\n        let [new_stack, item] = stack.pop(1);\n        return new_stack.push(item.as_bold());\n    }\n\n    // This is equivalent to 'operator mathrm' except that if the target is already wrapped in a \\boldsymbol{}\n    // (presumably created by do_make_bold()), this converts it into a \\bold{} which yields a bold Roman glyph.\n    do_make_roman(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.command_name === 'boldsymbol' && expr.operand_count() === 1)\n            new_expr = new CommandExpr('bold', expr.operand_exprs);\n        else if(expr.expr_type() === 'command' && expr.command_name === 'mathrm')\n            new_expr = expr;\n        else\n            new_expr = new CommandExpr('mathrm', [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_custom_delimiter(stack, delimiter_type) {\n        this.switch_to_mode('custom_delimiters');\n        if(!delimiter_type) {\n            // Start new sequence\n            this.custom_delimiters = {};\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.left) {\n            // First delimiter (left side)\n            this.custom_delimiters.left = delimiter_type;\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.right) {\n            // Second delimiter (right side)\n            this.custom_delimiters.right = delimiter_type;\n            if(this.prefix_argument === null || this.prefix_argument <= 1)\n                return this._finish_custom_delimiters(stack);\n            else {\n                // Prefix argument of 2 or more has been entered; wait for 3rd delimiter.\n                this.preserve_prefix_argument = true;\n                return;\n            }\n        }\n        // Third delimiter (middle)\n        this.custom_delimiters.middle = delimiter_type;\n        return this._finish_custom_delimiters(stack);\n    }\n\n    _finish_custom_delimiters(stack) {\n        this.switch_to_mode('base');\n        const d = this.custom_delimiters;\n        let arity = this.prefix_argument || 1;\n        if(arity < 1) arity = 1;\n        const [new_stack, ...exprs] = stack.pop_exprs(arity);\n        const new_expr = new DelimiterExpr(d.left, d.right, d.middle, exprs);\n        this.custom_delimiters = {};\n        return new_stack.push_expr(new_expr);\n    }\n\n    // opname can be either a \\latex_command or a regular string like '+'\n    // The cases of Expr+Expr and Expr+Text (or Text+Text) are handled separately.\n    do_infix(stack, opname) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr case.  Result is an InfixExpr item.\n            let operator_expr;\n            if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n                operator_expr = new CommandExpr(opname.slice(1));\n            else\n                operator_expr = new TextExpr(opname);\n            return new_stack.push_expr(new InfixExpr(operator_expr, left_item.expr, right_item.expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const new_item = TextItem.concatenate_items(left_item, right_item, opname);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but joins two expressions with an English phrase\n    // with Roman font and extra spacing (\\quad).\n    do_conjunction(stack, phrase) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr\n            const operator_expr = new SequenceExpr([\n                new CommandExpr('quad'),\n                new CommandExpr('text', [new TextExpr(phrase.replaceAll('_', ' '))]),\n                new CommandExpr('quad')]);\n            return new_stack.push_expr(new InfixExpr(operator_expr, left_item.expr, right_item.expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const conjunction_item = TextItem.from_string(' ' + phrase + ' ');\n            const new_item = TextItem.concatenate_items(\n                left_item, TextItem.concatenate_items(conjunction_item, right_item));\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but only takes 1 item from the stack and makes a PrefixExpr.\n    do_prefix(stack, opname) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        let operator_expr;\n        if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n            operator_expr = new CommandExpr(opname.slice(1));\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new PrefixExpr(base_expr, operator_expr));\n    }\n\n    do_split_infix(stack) {\n        const [new_stack, infix_expr] = stack.pop_exprs(1);\n        if(infix_expr.expr_type() !== 'infix') {\n            this.error_flash_stack();\n            return;\n        }\n        const split_mode = infix_expr.split;\n        let new_split_mode = null;\n        if(split_mode === 'after') new_split_mode = 'before';\n        else if(split_mode === 'before') new_split_mode = null;\n        else new_split_mode = 'after';\n        const new_infix_expr = infix_expr.with_split_mode(new_split_mode);\n        return new_stack.push_expr(new_infix_expr);\n    }\n\n    // Stack one expr above (or below) another via \\overset or \\underset.\n    // (overset_op can be 'overset' or 'underset').\n    // If the base expr is an InfixExpr, the other one is stacked above the infix operator;\n    // otherwise the actual items are stacked.\n    do_overunderset(stack, overset_op) {\n        const [new_stack, base_expr, stacked_expr] = stack.pop_exprs(2);\n        let new_expr;\n        if(base_expr.expr_type() === 'infix') {\n            new_expr = new InfixExpr(\n                new CommandExpr(overset_op, [stacked_expr, base_expr.operator_expr]),\n                base_expr.left_expr, base_expr.right_expr);\n        }\n        else\n            new_expr = new CommandExpr(overset_op, [stacked_expr, base_expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_cancel() {}\n\n    do_concat(stack /*, separator_text*/) {\n        let [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            let left_expr = left_item.expr, right_expr = right_item.expr;\n            const new_expr = Expr.combine_pair(left_expr, right_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            const new_item = TextItem.concatenate_items(left_item, right_item /*, separator_text*/);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Substitute the stack top expression into the first available defer marker in the\n    // item second from top.  That item can be either an ExprItem or TextItem.\n    do_substitute_defer(stack) {\n        const [new_stack, substitution_expr] = stack.pop_exprs(1);\n        const [new_stack_2, item] = new_stack.pop(1);\n        if(item.item_type() === 'expr') {\n            const original_expr = item.expr;\n            const defer_expr = original_expr.find_defer();\n            if(defer_expr) {\n                const new_expr = original_expr.substitute_expr(defer_expr, substitution_expr);\n                return new_stack_2.push_expr(new_expr);\n            }\n        }\n        else if(item.item_type() === 'text') {\n            const new_text_item = item.try_substitute_defer(substitution_expr);\n            if(new_text_item)\n                return new_stack_2.push(new_text_item);\n        }\n        return stack.type_error();\n    }\n\n    // Extract either the left or right side of an InfixExpr.\n    do_extract_infix_side(stack, which_side) {\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, infix_expr] = stack.pop_exprs(1);\n        if(infix_expr.expr_type() !== 'infix')\n            return stack.type_error();\n        const extracted_expr = (which_side === 'right') ?\n              infix_expr.right_expr : infix_expr.left_expr;\n        // NOTE: 'stack' and not 'new_stack' is used here in order to preserve\n        // the original expression on the stack.\n        return stack.push_expr(extracted_expr);\n    }\n\n    do_start_text_entry(stack, text_entry_mode) {\n        this.text_entry = '';\n        this.text_entry_mode = text_entry_mode;\n        this.switch_to_mode(text_entry_mode);\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    do_cancel_text_entry(stack) {\n        this.cancel_text_entry();\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    cancel_text_entry() {\n        this.text_entry = null;\n        this.text_entry_mode = null;\n    }\n\n    do_append_text_entry(stack) {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        if(key.length === 1) {\n            if(this.text_entry_mode === 'latex_entry') {\n                // Disallow characters that are invalid as part of a LaTeX command.\n                // Technically, commands like \\$ should be allowed here, but those are all\n                // accessible by their own keybindings already.  So only alphabetic characters\n                // are allowed in latex entry mode.\n                if(!/^[a-zA-Z]$/.test(key))\n                    return this.error_flash_stack();\n            }\n            this.text_entry = (this.text_entry || '') + key;\n        }\n        return stack;\n    }\n\n    // If new_mode_when_empty is provided, switch to that mode if this\n    // backspace was done while the text field is empty.  This is currently\n    // used to switch back from latex entry mode to normal math entry mode.\n    do_backspace_text_entry(stack, new_mode_when_empty) {\n        let text = this.text_entry || '';\n        if(text.length > 0) {\n            this.text_entry = text.slice(0, -1);\n            this.switch_to_mode(this.mode);\n        }\n        else {\n            // Everything has been deleted; cancel text entry.\n            if(new_mode_when_empty) {\n                this.text_entry_mode = new_mode_when_empty;\n                this.switch_to_mode(new_mode_when_empty);\n            }\n            else\n                this.cancel_text_entry();\n        }\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // textstyle determines what the entered text becomes:\n    //   'math' - ExprItem with plain italic math text\n    //   'roman_math' - ExprItem with \\mathrm{...} text\n    //   'latex' - ExprItem with arbitrary latex command\n    //   'text' - TextItem\n    //   'heading' - TextItem with is_heading flag set\n    do_finish_text_entry(stack, textstyle) {\n        if(this.text_entry === null)\n            return stack;  // shouldn't happen\n        if(this.text_entry.length === 0) {\n            this.cancel_text_entry();\n            return stack;\n        }\n\n        if(textstyle === 'text' || textstyle === 'heading') {\n            let item = TextItem.from_string_with_placeholders(this.text_entry);\n            if(textstyle === 'heading') item.is_heading = true;\n            this.cancel_text_entry();\n            return stack.push(item);\n        }\n\n        // math or roman_math or latex\n        let new_expr;\n        if(textstyle === 'roman_math') {\n            new_expr = new CommandExpr('mathrm', [\n                new TextExpr(this._latex_escape(this.text_entry))]);\n        }\n        else if(textstyle === 'latex') {\n            // NOTE: do_append_text_entry should only allow alphabetic characters through,\n            // so no real need to do sanitization here any more.\n            \n            // const sanitized = this.text_entry.replaceAll(/[^a-zA-Z]/g, '');\n            // if(sanitized.length === 0) {\n            //     this.text_entry = null;\n            //     this.text_entry_mode = null;\n            //     return stack;\n            // }\n            // new_expr = new CommandExpr(sanitized);\n\n            new_expr = new CommandExpr(this.text_entry);\n        }\n        else\n            new_expr = new TextExpr(this._latex_escape(this.text_entry));\n        this.cancel_text_entry();\n        return stack.push_expr(new_expr);\n    }\n\n    // TODO: may want to make this a general utility method, but it's only used here so far.\n    _latex_escape(text) {\n        const replacements = {\n            ' ': \"\\\\,\",\n            '_': \"\\\\_\",\n            '^': \"\\\\wedge \",\n            '%': \"\\\\%\",\n            \"'\": \"\\\\rq \",\n            \"`\": \"\\\\lq \",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\sim \",\n            \"\\\\\": \"\\\\backslash \"\n        };\n        return text.replaceAll(/[ _^%'`$&#}{~\\\\]/g, match => replacements[match]);\n    }\n\n    do_toggle_is_heading(stack) {\n        let [new_stack, item] = stack.pop(1);\n        if(item.item_type() === 'expr') {\n            // Implicitly turn ExprItems into TextItems.\n            item = TextItem.from_expr(item.expr);\n        }\n        if(item.item_type() === 'text') {\n            item = item.clone();\n            item.is_heading = !item.is_heading;\n            return new_stack.push(item);\n        }\n        else\n            this.error_flash_stack();\n    }\n\n    do_toggle_show_latex_source(stack) {\n        this.show_latex_source = !this.show_latex_source;\n        this.perform_undo_or_redo = 'suppress';\n    }\n\n    // expr_count is the number of items to pop from the stack to put inside the delimiters.\n    // It defaults to 1, but if it's 2 or more, 'middle' is used to separate each item within\n    // the delimiters.\n    do_delimiters(stack, left, right, middle, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...inner_exprs] = stack.pop_exprs(expr_count);\n        const new_expr = new DelimiterExpr(left, right, middle, inner_exprs);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Wrap stack top in parentheses if it's not already in delimiters.\n    do_parenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Special case: \\left. X \\middle| \\right. style delimiters\n        // are treated as a kind of pseudo-infix expression here.\n        // This is to make things like Pr(x | y) work better when | is a\n        // flex-size delimiter.\n        if(expr.expr_type() === 'delimiter' && expr.left_type === '.' &&\n           expr.right_type === '.' && expr.inner_exprs.length > 1)\n            expr = new DelimiterExpr('(', ')', expr.middle_type, expr.inner_exprs);\n        else if(expr.expr_type() !== 'delimiter')\n            expr = DelimiterExpr.parenthesize(expr);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // If expr_count_string is provided, exactly that many expressions from the stack\n    // are autoparenthesized.  If any of them is not actually an ExprItem, nothing is done.\n    do_autoparenthesize(stack, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...items] = stack.pop(expr_count);\n        if(items.every(item => item.item_type() === 'expr'))\n            return new_stack.push_all_exprs(\n                items.map(item => DelimiterExpr.autoparenthesize(item.expr)));\n        else\n            return stack;\n    }\n\n    // Combine command name and arguments from the stack into a CommandExpr.\n    // \\frac x y -> \\frac{x}{y}\n    do_apply_operator(stack, arg_count_string) {\n        const arg_count = parseInt(arg_count_string);\n        const [new_stack, command_expr, ...operand_exprs] = stack.pop_exprs(arg_count+1);\n        if(command_expr.expr_type() === 'command' && command_expr.operand_count() === 0)\n            return new_stack.push_expr(\n                new CommandExpr(command_expr.command_name, operand_exprs));\n        else\n            this.error_flash_stack();\n    }\n\n    // Take (left, right, operator) from the stack and create an InfixExpr.\n    // Special case: if 'operator' is \\mathrm{...}, it's surrounded with \\quad\n    // spacers as in do_conjunction().\n    do_apply_infix(stack) {\n        let [new_stack, left_expr, right_expr, operator_expr] = stack.pop_exprs(3);\n        if(operator_expr.expr_type() === 'command' &&\n           operator_expr.command_name === 'mathrm' &&\n           operator_expr.operand_count() === 1)\n            operator_expr = new SequenceExpr([\n                new CommandExpr('quad'), operator_expr, new CommandExpr('quad')]);\n        const new_expr = new InfixExpr(operator_expr, left_expr, right_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // NOTE: if 'help_location' is given, jump to the given anchor in the help text.\n    do_toggle_popup(stack, mode_string, help_location) {\n        // Hack: Save help panel scroll position so we can restore it next\n        // time the help is displayed.  This isn't very good because browser\n        // window/font resizings will throw it off.  Needs revisiting.\n        // Maybe the help should be its own iframe.\n        if(this.settings.popup_mode === 'help') {\n            const elt = document.getElementById('popup_panel');\n            if(elt && elt.scrollTop)\n                this.settings.help_scroll_top = elt.scrollTop;\n        }\n        this.settings.popup_mode =\n            (this.settings.popup_mode === mode_string) ? null : mode_string;\n        if(this.settings.popup_mode === 'help' && help_location)\n            this.settings.help_scroll_top = help_location;\n        this.settings.save();\n        this.app_component.apply_layout_to_dom();\n    }\n\n    // Set various configuration options.\n    do_config(stack, config_option, value) {\n        let settings = this.settings;\n        let layout = settings.layout;\n        let full_refresh_needed = false;  // set to true if everything needs to be re-rendered afterwards\n        switch(config_option) {\n        case 'zoom_factor':\n            switch(value) {\n            case '0': layout.zoom_factor = 0; break;\n            case '+': layout.zoom_factor++; break;\n            case '-': layout.zoom_factor--; break;\n            default: break;\n            }\n            break;\n        case 'math_align':\n            switch(value) {\n            case 'toggle_document': layout.document_rightalign_math = !layout.document_rightalign_math; break;\n            case 'toggle_stack': layout.stack_rightalign_math = !layout.stack_rightalign_math; break;\n            default: break;\n            }\n            break;\n        case 'toggle_inline_math':\n            layout.inline_math = !layout.inline_math;\n            full_refresh_needed = true;\n            break;\n        case 'stack_side':\n            layout.stack_side = value;\n            break;\n        case 'stack_split':\n            layout.stack_split = parseInt(value);\n            break;\n        case 'theme':\n            settings.selected_theme = value;\n            break;\n        case 'reset_layout':\n            settings.layout = settings.default_layout();\n            full_refresh_needed = true;\n            break;\n        default:\n            break;\n        }\n        settings.save();\n        this.app_component.apply_layout_to_dom();\n        this.clear_all_flashes();\n        if(full_refresh_needed) {\n            // All displayed ItemComponents need to be re-rendered.\n            this.new_document = this.app_state.document.clone_all_items();\n            return stack.clone_all_items();\n        }\n    }\n\n    // item1, item2, ... => [item1, item2, ...]\n    // column_count is optional; if omitted, the prefix argument is used.\n    do_build_matrix_row(stack, matrix_type, column_count) {\n        const expr_count = column_count ? parseInt(column_count) : this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const matrix_expr = new ArrayExpr(\n            (matrix_type || 'bmatrix'),\n            1, expr_count, [exprs]);\n        return new_stack.push_expr(matrix_expr);\n    }\n\n    // Stack two ArrayExprs on top of each other.\n    // The type of the array on the stack-top takes precedence if there's a conflict.\n    // The two arrays/matrices have to have the same number of columns.\n    do_stack_arrays(stack) {\n        const [new_stack, m1, m2] = stack.pop_arrays(2);\n        const new_array = ArrayExpr.stack_arrays(m1, m2);\n        if(new_array)\n            return new_stack.push_expr(new_array);\n        else\n            return new_stack.type_error();\n    }\n\n    // Split an ArrayExpr into its component rows and put them on the stack.\n    do_split_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        return new_stack.push_all_exprs(array_expr.split_rows());\n    }\n\n    // Take apart an ArrayExpr and put all its elements on the stack (in row-major order).\n    do_dissolve_array(stack) {\n        const [new_stack, matrix_expr] = stack.pop_arrays(1);\n        let dissolved_exprs = [].concat(...matrix_expr.element_exprs);\n        return new_stack.push_all_exprs(dissolved_exprs);\n    }\n\n    do_insert_matrix_ellipses(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_ellipses());\n    }\n\n    do_transpose_matrix(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.transposed());\n    }\n\n    // Change a matrix bracket type, e.g. to 'pmatrix'.\n    do_change_matrix_type(stack, new_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_array_type(new_type));\n    }\n\n    // is_row_or_column: 'row', 'column'\n    // separator_type: 'solid' or 'dashed'\n    do_array_separator(stack, is_row_or_column, separator_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        const is_column = is_row_or_column === 'column';\n        // NOTE: prefix argument of * indicates the final row or column of the matrix\n        const size = is_column ? matrix_expr.column_count : matrix_expr.row_count;\n        const index = this._get_prefix_argument(1, null);\n        if(index !== null && (index < 1 || index > size-1))\n            return this.error_flash_stack();\n        else {\n            const new_expr = matrix_expr.with_separator(\n                is_column, index === null ? null : index-1, separator_type, true);\n            return new_stack.push_expr(new_expr);\n        }\n    }\n\n    do_build_align(stack, align_type) {\n        // NOTE: if align_type = 'cases' or 'rcases', align on ':' infix if there is one, and then remove the infix\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let split_mode;\n        switch(align_type) {\n        case 'gathered': case 'gather': split_mode = 'none'; break;\n        case 'cases': case 'rcases': split_mode = 'colon'; break;\n        case 'cases_if': split_mode = 'colon_if'; align_type = 'cases'; break;\n        case 'rcases_if': split_mode = 'colon_if'; align_type = 'rcases'; break;\n        default: split_mode = 'infix'; break;\n        }\n        const element_exprs = ArrayExpr.split_elements(exprs, split_mode)\n        const array_expr = new ArrayExpr(\n            align_type, element_exprs.length, element_exprs[0].length, element_exprs);\n        return new_stack.push_expr(array_expr);\n    }\n\n    // item1, item2, ..., N => \"item1, item2, ...\"\n    // (concatenate N items from the stack with separator_text between each one)\n    do_build_list(stack, separator_text, final_separator_text) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let expr = exprs[0];\n        for(let i = 1; i < expr_count; i++) {\n            const s = (final_separator_text && i === expr_count-1) ? final_separator_text : separator_text;\n            expr = Expr.combine_pair(expr, new TextExpr(s));\n            expr = Expr.combine_pair(expr, exprs[i]);\n        }\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1,...,x_n] from the stack and build a nested InfixExpr with\n    // the given text between each term as an infix opertor. \n    // 'final_separator_text' is used as the next to last item if provided.\n    do_build_infix_list(stack, infix_text, final_separator_text) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const infix_operator_expr = new TextExpr(infix_text);\n        let expr = exprs[expr_count-1];\n        if(final_separator_text && expr_count > 1)\n            expr = new InfixExpr(infix_operator_expr, new TextExpr(final_separator_text), expr);\n        for(let i = expr_count-2; i >= 0; i--)\n            expr = new InfixExpr(infix_operator_expr, exprs[i], expr);\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1, ..., x_n] from the stack and build a \\substack{...} command.\n    // This \"cheats\" by converting the stacked items to LaTeX and concatenating\n    // with \\\\ so any structure in the stacked items will be lost, same as\n    // do_build_list(), etc.\n    do_build_substack(stack) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const content = exprs.map(expr => expr.to_latex()).join(\"\\\\\\\\\");\n        const new_expr = new CommandExpr('substack', [new TextExpr(content)]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_apply_tag(stack) {\n        let [new_stack, tagged_item, tag_item] = stack.pop(2);\n        if(tagged_item.item_type() !== 'expr')\n            return stack.type_error();\n        let tag_expr;\n        // if(tag_item.item_type() === 'text')\n        //     tag_expr = new CommandExpr('text', [new TextExpr(tag_item.source_text.trim())]);\n        /*else*/ if(tag_item.item_type() === 'expr')\n            tag_expr = tag_item.expr;\n        else\n            return stack.type_error();\n        return new_stack.push(new ExprItem(tagged_item.expr, tag_expr));\n    }\n\n    // Copy stack top to an internal clipboard slot.\n    // A prefix argument may be given to access other slots but this is currently undocumented\n    // because prefix arguments with stack commands highlight items on the stack which is bad UI.\n    do_copy_to_clipboard(stack) {\n        const [new_stack, item] = stack.pop(1);\n        const slot = this._get_prefix_argument(1, '*');\n        this.app_component.state.clipboard_items[slot] = item;\n        if(slot === 1)\n            this.notify(\"Copied to clipboard\");\n        else\n            this.notify(\"Copied to clipboard slot \" + slot);\n        return new_stack.push(item);\n    }\n\n    do_paste_from_clipboard(stack) {\n        const slot = this._get_prefix_argument(1, '*');\n        const item = this.app_component.state.clipboard_items[slot];\n        if(item)\n            return stack.push(item.clone());\n        else\n            this.error_flash_stack();\n    }\n\n    // screen_percentage=0 means try to scroll so that the top of the selection is flush with the top of the document panel.\n    // screen_percentage=100 tries to make the bottom of the selection flush with the bottom of the panel.\n    // Anything in between is a linear interpolation between the two.\n    do_recenter_document(stack, screen_percentage_string) {\n        const screen_percentage = parseInt(screen_percentage_string);\n        this.perform_undo_or_redo = 'suppress';\n        \n        // TODO: Accessing the DOM elements directly like this is a hack but there's not an easy\n        // way to get it properly from React here.  May want to restructure things to make this cleaner.\n        let container = document.getElementById('document_container');\n        if(!container) return;\n        const selected_elts = container.getElementsByClassName('selected')\n        if(selected_elts.length === 0) return;\n        const selected_elt = selected_elts[0];\n        const top_scrolltop = selected_elt.offsetTop;\n        const bottom_scrolltop = selected_elt.offsetTop + selected_elt.offsetHeight - container.clientHeight;\n        const ratio = screen_percentage/100;\n        const new_scrolltop = Math.round(top_scrolltop*(1-ratio) + bottom_scrolltop*ratio);\n        container.scrollTop = new_scrolltop;\n    }\n\n    do_scroll(stack, panel_name, direction_string, percentage_string) {\n        let panel_elt = document.getElementById(panel_name);\n        if(!panel_elt) return;\n        const percentage = parseInt(percentage_string || '50') / 100.0;\n        if(direction_string === 'horizontal')\n            panel_elt.scrollLeft += Math.round(panel_elt.clientWidth * percentage)\n        else\n            panel_elt.scrollTop += Math.round(panel_elt.clientHeight * percentage);\n    }\n\n    do_export_document_as_text(stack) {\n        const exported_text = this.app_state.document.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied document to clipboard\");\n    }\n\n    do_export_stack_items_as_text(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        const exported_text = items.map(item => item.to_text()).join(\"\\n\\n\");\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied \" + arg + \" item\" + (arg === 1 ? \"\" : \"s\") + \" to clipboard\");\n    }\n}\n\n\nexport default InputContext;\n\n","\n\nimport './katex.css';  // Must be imported before App.css\nimport './App.css';\n\nimport React from 'react';\n//import ReactDOM from 'react-dom';\nimport katex from 'katex';\nimport {\n    Settings, AppState, UndoStack, DocumentStorage,\n    ImportExportState, FileManagerState\n} from './Models';\nimport InputContext from './Actions';\n\n\nconst $e = React.createElement;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // NOTE: settings are stored in the localStorage, but documents use indexedDB.\n        // This is mainly because we need the settings before the indexedDB may be ready.\n        let settings = Settings.load_from_local_storage();\n\n        this.state = {\n            app_state: new AppState(),\n            settings: settings,\n            file_manager_state: new FileManagerState(),\n            import_export_state: new ImportExportState(),\n            document_storage: new DocumentStorage(),\n            input_context: new InputContext(this, settings),\n            undo_stack: new UndoStack(),\n            clipboard_items: {}\n        };\n        this.state.undo_stack.clear(this.state.app_state);\n        this.state.import_export_state.document_storage = this.state.document_storage;\n        this.state.import_export_state.onstatechange = () => this.import_export_state_changed();\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n\n        this.state.document_storage.open_database(this.on_open_database.bind(this));\n    }\n\n    // Database has been opened; request the list of documents, and try to load the last-opened file.\n    on_open_database() {\n        this.request_file_list();\n        if(this.state.settings.last_opened_filename)\n            this.start_loading_filename(this.state.settings.last_opened_filename);\n        else {\n            let file_manager_state = this.state.file_manager_state;\n            let settings = this.state.settings;\n            const filename = 'untitled';\n            file_manager_state.current_filename = file_manager_state.selected_filename = filename;\n            settings.last_opened_filename = filename;\n            settings.save();\n        }\n    }\n\n    file_manager_state_changed() {\n        this.setState({file_manager_state: this.state.file_manager_state});\n    }\n\n    import_export_state_changed() {\n        const import_export_state = this.state.import_export_state;\n        this.setState({import_export_state: import_export_state});\n        if(import_export_state.file_list_needs_update) {\n            import_export_state.file_list_needs_update = false;\n            this.request_file_list();\n        }\n    }\n\n    // Start loading the current list of documents from the IndexedDB database.\n    request_file_list() {\n        this.state.document_storage.fetch_file_list(\n            this.file_list_request_finished.bind(this),\n            this.file_list_request_error.bind(this));\n    }\n\n    file_list_request_finished(file_list) {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = false;\n        file_manager_state.file_list = file_list;\n        file_manager_state.sort_file_list('filename', true);\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    file_list_request_error() {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = true;\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    start_loading_filename(filename) {\n        this.state.document_storage.load_state(\n            filename,\n            this.file_load_finished.bind(this),\n            this.file_load_error.bind(this));\n    }\n\n    file_load_finished(filename, new_app_state) {\n        const file_manager_state = this.state.file_manager_state;\n        const settings = this.state.settings;\n        file_manager_state.selected_filename = file_manager_state.current_filename = filename;\n        settings.last_opened_filename = filename;\n        settings.save();\n        this.setState({app_state: new_app_state, file_manager_state: file_manager_state});\n        this.state.undo_stack.clear(new_app_state);\n        this.state.input_context.notify('Loaded: ' + filename);\n    }\n\n    // TODO: It's not necessarily an error if the file doesn't exist,\n    // but we should make sure to clear stack/document in that case\n    // (same as do_start_new_file).\n    file_load_error(filename, error) {\n        //alert(\"Unable to load file \\\"\" + filename + \"\\\".\");\n    }\n\n    componentDidMount() {\n        this.apply_layout_to_dom();\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        window.addEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.addEventListener('pageshow', this.handleVisibilityChange);\n//      window.addEventListener('focus', this.handleVisibilityChange);\n        this.request_file_list();\n    }\n\n    apply_layout_to_dom() {\n        if(this.stack_panel_ref.current && this.document_panel_ref.current &&\n           this.popup_panel_ref.current) {\n            this.state.settings.apply_layout_to_dom(\n                this.stack_panel_ref.current, this.document_panel_ref.current,\n                this.popup_panel_ref.current);\n        }\n    }\n\n    componentDidUpdate() {\n        // Show the currently opened file in the browser's document title.\n        const filename = this.state.file_manager_state.current_filename;\n        const program_name = 'rpnlatex';\n        const new_title = filename ? (program_name + ' - ' + filename) : program_name;\n        if(new_title !== document.title)\n            document.title = new_title;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.removeEventListener('pageshow', this.handleVisibilityChange);\n//      window.removeEventListener('focus', this.handleVisibilityChange);\n    }\n\n    render() {\n        let app_state = this.state.app_state;\n\n        this.stack_panel_ref = React.createRef();\n        this.document_panel_ref = React.createRef();\n        this.popup_panel_ref = React.createRef();\n\n        return $e(\n            'div', {id: 'panel_layout', className: 'theme_' + this.state.settings.selected_theme},\n            $e('div', {className: 'panel stack_panel', id: 'stack_panel', ref: this.stack_panel_ref},\n               $e(StackItemsComponent, {\n                   settings: this.state.settings,\n                   stack: app_state.stack,\n                   input_context: this.state.input_context\n               }),\n               $e(ModeIndicatorComponent, {app_state: app_state, input_context: this.state.input_context})),\n            $e('div', {className: 'panel document_panel', id: 'document_panel', ref: this.document_panel_ref},\n               $e('div', {id: 'document_container'},\n                  $e(DocumentComponent, {\n                      settings: this.state.settings,\n                      document: app_state.document,\n                      filename: this.state.file_manager_state.current_filename,\n                      is_dirty: app_state.is_dirty  /* TODO: revisit, maybe remove this */\n                  }))),\n            $e(PopupPanelComponent, {\n                settings: this.state.settings,\n                popup_panel_ref: this.popup_panel_ref,\n                import_export_state: this.state.import_export_state,\n                document_storage: this.state.document_storage,\n                file_manager_state: this.state.file_manager_state\n            })\n        );\n    }\n\n    handleKeyDown(event) {\n        // No Alt/Meta key combinations are handled.\n        if(event.altKey || event.metaKey)\n            return;\n        const key = this._keyname_from_event(event);\n        if(key === 'Meta' || key === 'Ctrl+Control')\n            return;\n        \n        let app_state = this.state.app_state;\n        let [was_handled, new_app_state] = this.state.input_context.handle_key(app_state, key);\n        if(was_handled) {\n            event.preventDefault();\n            // TODO: event.stopPropagation();\n            const scratch = this.manage_undo_state(new_app_state);\n            if(scratch)\n                new_app_state = scratch;\n            else   // undo/redo \"failed\"\n                this.state.input_context.error_flash_stack();\n\n            let state_updates = {app_state: new_app_state};\n            if(this.state.input_context.files_changed) {\n                this.request_file_list();\n                state_updates.file_manager_state = this.state.file_manager_state;  // TODO: revisit\n            }\n            this.setState(state_updates);\n        }\n    }\n\n    _keyname_from_event(event) {\n        let key = event.key;\n\n        if((key.startsWith('Arrow') || key === 'Enter' || key === 'Backspace') && event.shiftKey)\n            key = 'Shift+' + key;\n        if(event.ctrlKey)\n            key = 'Ctrl+' + key;\n\n        // NOTE: none of the Alt stuff works on Firefox for some reason.  Chromium seems ok.\n        // if(event.metaKey || event.altKey || event.getModifierState('Alt') || event.getModifierState('Meta'))\n        //     key = 'Alt+' + key;\n\n        return key;\n    }\n\n    // Auto-save when window is being closed.\n    handleBeforeUnload(event) {\n        const filename = this.state.file_manager_state.current_filename;\n        if(filename)\n            this.state.document_storage.save_state(this.state.app_state, filename);\n        return null;\n    }\n\n    // On iOS Safari, this event is triggered when resuming the tab.\n    // When this happens, the scroll positions are reset, but a re-render takes care of that\n    // via DocumentComponent.ensure_selection_visible().\n    handleVisibilityChange(event) {\n        this.setState({});  // force React to re-render\n    }\n\n    // Returns 'new' new_app_state.\n    manage_undo_state(new_app_state) {\n        let undo_stack = this.state.undo_stack;\n        switch(this.state.input_context.perform_undo_or_redo) {\n        case 'undo': return undo_stack.undo_state();\n        case 'redo': return undo_stack.redo_state();\n        case 'suppress': return new_app_state;  // Normal action, but don't remember undo state.\n        case 'clear':\n            undo_stack.clear(new_app_state);\n            return new_app_state;\n        default:\n            // Normal action; save undo state\n            undo_stack.push_state(new_app_state);\n            return new_app_state;\n        }\n    }\n}\n\n\n// Shows current input mode in top-right corner of stack display\nclass ModeIndicatorComponent extends React.Component {\n    render() {\n        const input_context = this.props.input_context;\n        let indicator_item = undefined;\n        const notification_text = input_context.notification_text;\n        let input_mode = input_context.mode;\n        if(input_context.prefix_argument !== null) {\n            // Show current prefix argument in mode indicator\n            input_mode = [\n                input_mode, '(',\n                (input_context.prefix_argument < 0 ? '*' : input_context.prefix_argument.toString()), ')'\n            ].join('');\n        }\n        // if(input_context.text_entry !== null)\n        //     input_mode = 'text_entry';\n        if(notification_text) {\n            // Auto-highlight anything after the colon in the notification message.\n            const colon = notification_text.indexOf(':');\n            if(colon >= 0)\n                indicator_item = $e(\n                    'span', {className: 'notification'},\n                    $e('span', {}, notification_text.slice(0, colon+1)),\n                    $e('span', {className: 'highlighted'}, notification_text.slice(colon+1)));\n            else\n                indicator_item = $e('span', {className: 'notification'}, notification_text);\n        }\n        else if(input_mode !== 'base')\n            indicator_item = $e(\n                'span', {className: 'mode'},\n                input_mode.replaceAll('_', ' '));\n        return $e('div', {className: 'indicator'}, indicator_item);\n    }\n}\n\n\nclass StackItemsComponent extends React.Component {\n    render() {\n        let input_context = this.props.input_context;\n        const item_components = this.props.stack.items.map((item, index) => {\n            // If there's an active prefix argument for stack commands, highlight the stack items that\n            // will be affected.\n            let selected = (\n                input_context.mode === 'stack' &&\n                    (input_context.prefix_argument < 0 ||\n                     this.props.stack.items.length-index <= input_context.prefix_argument));\n            if(input_context.show_latex_source && index === this.props.stack.items.length-1) {\n                // Show LaTeX source code for the stack top.\n                return $e(\n                    LaTeXSourceComponent, {\n                        item: item,\n                        key: item.react_key(index)\n                    });\n            }\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: React.createRef(),\n                    key: item.react_key(index)\n                });\n        });\n        if(input_context.text_entry !== null) {\n            const component = $e(\n                TextEntryComponent, {\n                    text: input_context.text_entry,\n                    entry_type: input_context.text_entry_mode,\n                    key: 'textentry'\n                });\n            item_components.push(component);\n        }\n        let class_names = ['stack_items'];\n        if(this.props.settings.layout.stack_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')}, item_components);\n    }\n}\n\n\nclass DocumentComponent extends React.Component {\n    render() {\n        const document = this.props.document;\n        const subcomponents = document.items.map((item, index) => {\n            let item_ref = React.createRef();\n            const is_selected = document.selection_index === index+1;\n            if(is_selected) this.selected_item_ref = item_ref;\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: is_selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: item_ref,\n                    key: item.react_key(index)\n                });\n        });\n\n        // \"Spacer\" after the last document item.  This enables the document view to scroll\n        // a little past the end so that we don't force the last document item to be flush\n        // against the bottom of the screen.\n        subcomponents.push(\n            $e('div', {className: 'bottom_spacer', key: 'bottom_spacer'}));\n\n        // Top of document \"spacer\", which is used to indicate that items are to be\n        // inserted at the top of the document.  Unlike the bottom spacer, the top\n        // spacer can be the current document selection.\n        const top_is_selected = document.selection_index === 0;\n        if(top_is_selected)\n            this.selected_item_ref = React.createRef();\n        const top_spacer = $e(\n            'div', {\n                className: 'top_spacer' + (top_is_selected ? ' selected' : ''),\n                key: 'top_spacer',\n                ref: top_is_selected ? this.selected_item_ref : null\n            });\n        \n        let class_names = ['document_items'];\n        if(this.props.settings.layout.document_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')},\n                  [top_spacer].concat(subcomponents));\n    }\n\n    componentDidUpdate() {\n        this.ensure_selection_visible();\n    }\n\n    ensure_selection_visible() {\n        if(!this.selected_item_ref) return;\n        const item = this.selected_item_ref.current;\n        if(!item) return;\n        let container = document.getElementById('document_container');\n        const extra_space = item.offsetHeight/2;\n        if(item.offsetTop < container.scrollTop)\n            container.scrollTop = item.offsetTop - extra_space;\n        if(item.offsetTop + item.offsetHeight > container.scrollTop + container.offsetHeight)\n            container.scrollTop = item.offsetTop + item.offsetHeight - container.offsetHeight + extra_space;\n    }\n}\n\n\n// Accumulate a single line of text for literal or Latex command entry\n// (backslash key activates this).\nclass TextEntryComponent extends React.Component {\n    render() {\n        const class_name = 'text_entry ' + this.props.entry_type + '_mode';\n        return $e('div', {className: class_name}, this.props.text);\n    }\n}\n\n\nclass FileManagerComponent extends React.Component {\n    render() {\n        const show_import_export = !this.props.file_manager_state.unavailable;\n        this.file_input_ref = React.createRef();\n        return $e(\n            'div', {className: 'file_header', id: 'files_panel'},\n            $e('h2', {}, 'File Manager'),\n            this.render_current_filename(),\n            this.render_file_table(),\n            this.render_shortcuts(),\n            show_import_export && $e('h2', {}, 'Export/Import'),\n            show_import_export && this.render_export_import_section()\n        );\n    }\n\n    render_export_import_section() {\n        const import_export_state = this.props.import_export_state;\n        let subcomponents = [];\n\n        subcomponents.push(\n            $e('p', {}, 'This section lets you download the internal browser document storage as a .zip file, or restore the internal storage from a previously downloaded export.'));\n\n        subcomponents.push(\n            $e('p', {},\n               $e('strong', {}, import_export_state.textual_state())));\n\n        if(import_export_state.state === 'idle')\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {\n                       href: '#',\n                       onClick: this.start_exporting.bind(this)\n                   }, 'Prepare Export')));\n        if(import_export_state.download_available()) {\n            const export_filename = import_export_state.generate_download_filename();\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {href: import_export_state.download_url, download: export_filename},\n                      'Download: ' + export_filename)));\n        }\n\n        // Show file upload element if ready to accept uploads.\n        if(import_export_state.state === 'idle') {\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {}, 'Import Zip File: '),\n                   $e('input', {\n                       type: 'file',\n                       ref: this.file_input_ref\n                   }),\n                   $e('input', {\n                       type: 'button',\n                       value: 'Upload',\n                       onClick: this.handle_file_upload.bind(this)\n                   })));\n        }\n\n        // Show import results when import finished.\n        if(import_export_state.state === 'idle' && import_export_state.import_result_string)\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {style: {fontWeight: 'bold'}}, 'Import result: '),\n                   $e('span', {}, import_export_state.import_result_string)));\n        \n        return $e('div', {}, ...subcomponents);\n    }\n\n    render_current_filename() {\n        const current_filename = this.props.file_manager_state.current_filename;\n        if(!current_filename) return null;\n        return $e(\n            'div', {className: 'current_file'},\n            $e('label', {}, 'Current file:'),\n            $e('span', {className: 'filename'}, current_filename));\n    }\n\n    render_file_table() {\n        const file_manager_state = this.props.file_manager_state;\n        if(file_manager_state.unavailable)\n            return $e('p', {}, 'IndexedDB support unavailable in your browser.  You will be unable to save or load documents.  Note that Firefox disables IndexedDB when in Private Browsing mode.');\n        else if(file_manager_state.file_list && file_manager_state.file_list.length > 0) {\n            return $e(\n                'div', {},\n                $e('table', {className: 'file_table'},\n                   $e('thead', {},\n                      $e('tr', {},\n                         $e('th', {className: 'filename'}, 'Filename'),\n                         $e('th', {className: 'filesize', colSpan: '2'}, 'Size'),\n                         $e('th', {className: 'timestamp', colSpan: '2'}, 'Last Modified'))),\n                   $e('tbody', {},\n                      file_manager_state.file_list.map(\n                          (file, index) => this._render_file_list_row(file, index)))));\n        }\n        else if(file_manager_state.file_list)\n            return $e('p', {}, 'No files created yet.');\n        else\n            return $e('p', {}, 'Fetching file list...');\n    }\n\n    _render_file_list_row(file, index) {\n        const file_manager_state = this.props.file_manager_state;\n        let class_names = [];\n        if(file.filename === file_manager_state.selected_filename) class_names.push('selected_file');\n        if(file.filename === file_manager_state.current_filename) class_names.push('current_file');\n        const item_count = file.document_item_count + file.stack_item_count;\n        return $e(\n            'tr', {className: class_names.join(' '), key: 'file_' + file.filename},\n            $e('td', {className: 'filename'}, file.filename),\n            $e('td', {className: 'filesize'},\n               Math.floor((file.filesize+1023)/1024) + ' kb'),\n            $e('td', {className: 'filesize'},\n               item_count + ' object' + (item_count === 1 ? '' : 's')),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleDateString()),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleTimeString()));\n    }\n\n    render_shortcuts() {\n        const help_specs = [\n            ['Escape', 'Close file manager'],\n            ['Arrows', 'Select next/previous file'],\n            ['Enter', 'Open selected file'],\n            ['d', 'Delete selected file'],\n            ['n', 'Start a new empty file'],\n            ['s', 'Save current file'], // + (current_filename ? (' (' + current_filename + ')') : '')],\n            ['S', 'Save as...']\n        ];\n        const keyhelp_elements = help_specs.map(spec => {\n            const [keyname, helptext] = spec;\n            return $e(\n                'li', {},\n                $e('span', {className: 'keybinding'}, keyname),\n                $e('span', {}, ' ' + helptext));\n        });\n        return $e('ul', {className: 'keybindings'}, ...keyhelp_elements);\n    }\n\n    handle_file_upload(event) {\n        const file_input_elt = this.file_input_ref.current;\n        if(!file_input_elt) return;\n        const file_list = file_input_elt.files;\n        if(file_list.length === 1)\n            this.start_importing(file_list[0]);\n        else if(file_list.length > 1)\n            alert('Please select a single .zip file to import.');\n        else\n            alert('Please select a .zip file to import.');\n    }\n\n    start_importing(file) {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_importing(file);\n    }\n\n    start_exporting() {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_exporting();\n    }\n}\n\n\n// Displays an Item instance in any context (stack/document).\n// Props: {item: Item, selected: Bool}\nclass ItemComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        let ref = this.props.item_ref;\n        let className = this.props.selected ? 'selected ' : '';\n        if(item.item_type() === 'text' && item.is_heading)\n            className = 'heading_style ' + className;\n        switch(item.item_type()) {\n        case 'expr':\n            if(item.tag_expr) {\n                this.tag_ref = React.createRef();\n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: 'tag_expr', ref: this.tag_ref}, ''),\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n            }\n            else \n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n        case 'text':\n            // TODO: The CSS/markup for heading texts is a little hacky\n            return $e(\n                'div', {className: 'text_item'},\n                $e('div', {className: className + 'latex_fragment'},\n                   $e('div', {className: 'latex_fragment_inner', ref: ref}, '')));\n        case 'separator':\n            return $e(\n                'div', {className: className + 'separator_item'},\n                $e('hr'));\n        default:\n            return $e('div', {}, '????');\n        }\n    }\n\n    componentDidMount() {\n        const item = this.props.item;\n        const node = this.props.item_ref.current;\n        if(!node) return;  // shouldn't happen\n        if(item.item_type() === 'expr') {\n            // Render math with KaTeX\n            this._render_with_katex(item.expr.to_latex(), node, !this.props.inline_math);\n            if(item.tag_expr && this.tag_ref.current)\n                this._render_with_katex(item.tag_expr.to_latex(), this.tag_ref.current, false);\n        }\n        else if(item.item_type() === 'text') {\n            // TextItems are always rendered in inline mode.\n            // Note that this means that text items will always be left-aligned regardless\n            // of the rightalign_math layout settings.\n            this._render_with_katex(item.to_latex(), node, false);\n        }\n    }\n\n    _render_with_katex(latex_code, node, display_mode) {\n        if(latex_code === '' || latex_code === \"\\\\,\") {\n            // Empty/blank latex expression - fake it with something so that it's visible.\n            latex_code = \"\\\\text{(blank)}\";\n        }\n        try {\n            // NOTE: trust: true here allows the use of \\htmlClass etc.\n            katex.render(\n                latex_code, node,\n                { throwOnError: false, displayMode: display_mode, fleqn: true, trust: true });\n        }\n        catch(e) {\n            // KaTeX throws actual errors for some inputs, even if throwOnError is false.\n            // Example: \\texttt{\\textbf{test}}\n            const msg = e.toString();\n            node.innerHTML = '<div style=\"color:red;\">' + msg + '</div>';\n        }\n    }\n}\n\n\nclass LaTeXSourceComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        return $e(\n            'div', {className: 'latex_source_item'},\n            $e('div', {className: 'latex_source'}, item.to_text()));\n    }\n}\n\n\nclass PopupPanelComponent extends React.Component {\n    render() {\n        this.refs = {\n            help: React.createRef(),\n            help_content: React.createRef()\n        };\n        const popup_mode = this.props.settings.popup_mode;\n        let subcomponent = null;\n        if(popup_mode === 'files') {\n            subcomponent = $e(\n                'div', {id: 'files_container'},\n                $e(FileManagerComponent, {\n                    import_export_state: this.props.import_export_state,\n                    document_storage: this.props.document_storage,\n                    file_manager_state: this.props.file_manager_state\n                }));\n        }\n        return $e(\n            'div', {id: 'popup_panel', ref: this.props.popup_panel_ref},\n            subcomponent,\n            $e('div', {id: 'help_container', ref: this.refs.help},\n               $e('div', {className: 'help', ref: this.refs.help_content})));\n    }\n\n    componentDidMount() {\n        const help_source_elt = document.getElementById('helptext');\n        const help_dest_elt = this.refs.help_content.current;\n        if(help_source_elt) {\n            help_source_elt.style.display = 'block';\n            this._render_help_latex(help_source_elt);\n            help_source_elt.parentNode.removeChild(help_source_elt);\n            help_dest_elt.appendChild(help_source_elt);\n        }\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.settings.popup_mode;\n        if(this.refs.help.current)\n            this.refs.help.current.style.display = (mode === 'help' ? 'block' : 'none');\n        if(mode === 'help' &&\n           this.props.settings.help_scroll_top !== undefined &&\n           this.props.popup_panel_ref.current) {\n            if(typeof(this.props.settings.help_scroll_top) === 'string') {\n                // Jump to a specified anchor in the help text.\n                window.location.hash = '#' + this.props.settings.help_scroll_top;\n            }\n            else {\n                // Restore helptext scroll position previously saved by 'do_toggle_popup'.\n                this.props.popup_panel_ref.current.scrollTop = this.props.settings.help_scroll_top;\n            }\n            this.props.settings.help_scroll_top = undefined;\n        }\n    }\n\n    // Render any <code>...</code> spans in the help text with KaTeX.\n    _render_help_latex(help_elt) {\n        const children = help_elt.getElementsByTagName('code');\n        for(let i = 0; i < children.length; i++) {\n            let code_elt = children[i];\n            const latex_code = code_elt.textContent;\n            if(latex_code)\n                katex.render(latex_code, code_elt,\n                             { throwOnError: false, displayMode: false, trust: true });\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}