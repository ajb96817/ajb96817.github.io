{"version":3,"sources":["Keymap.js","Models.js","Actions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditorKeymap","base","files","help","stack","config","text_entry","math_text_entry","latex_entry","delimiters","custom_delimiters","operator","named_operator","hyperbolic","inverse","inverse_hyperbolic","squared","squared_hyperbolic","integral_limits","derivative","infix","relational","symbol","decoration","array","change_matrix_type","script","calligraphic","lowercase_greek","uppercase_greek","variant_greek","Keymap","_classCallCheck","this","bindings","KeybindingTable","_createClass","key","value","mode","mode_map","test","Settings","current_keymap","selected_theme","last_opened_filename","popup_mode","show_mode_indicator","layout","default_layout","zoom_factor","stack_rightalign_math","document_rightalign_math","inline_math","stack_side","stack_split","stack_panel_elt","document_panel_elt","popup_panel_elt","style","display","root_elt","document","getElementById","percentage","Math","round","pow","fontSize","_this$_split_rectangl","_split_rectangle","x","y","w","h","_this$_split_rectangl2","_slicedToArray","stack_bounds","document_bounds","_apply_bounds","bounds","side","split_percent","w1","w2","h1","h2","elt","left","top","width","height","serialized_string","JSON","stringify","to_json","localStorage","setItem","_this","json","saved_keys","forEach","getItem","from_json","parse","s","LatexEmitter","tokens","last_token_type","text","token_type","length","push","expr","emit_latex","force_braces","_this2","grouped","fn","_ref","old_tokens","old_last_token_type","_ref2","_ref3","join","emit_token","last_token","_is_latex_identifier_char","charAt","ch","command_name","command_options","startsWith","command","slice","envname","environment_argument","AppState","_default_stack","Document","is_dirty","item","TextItem","TextItemTextElement","Stack","app_state","format","UndoStack","state_stack","max_stack_depth","undo_count","initial_app_state","state","same_as","DocumentStorage","open_request","database","onsuccess","indexedDB","on_open_success","open","onupgradeneeded","handle_upgrade_database","bind","handle_open_success","onerror","handle_open_error","event","result","oldVersion","build_initial_schema","createObjectStore","keyPath","_this3","onversionchange","close","alert","readwrite","transaction","filename","replaceAll","trim","request","create_transaction","objectStore","get","serialized_json","metadata_json","filesize","description","stack_item_count","depth","document_item_count","items","timestamp","Date","put","oncomplete","onabort","delete","getAll","row","ts_value","onrowfetched","onfinished","cursor","openCursor","c","target","continue","ImportExportState","document_storage","import_count","failed_count","error_message","download_url","import_result_string","file_list_needs_update","onstatechange","date","getFullYear","toString","toLocaleString","month","toLowerCase","getDate","padStart","new_state","_this4","zip","JSZip","fetch_all_documents","add_document_json_to_zip","start_compressing","change_state","file","_this5","generateAsync","type","then","content_blob","finished_compressing","URL","revokeObjectURL","clear_download_url","createObjectURL","zipfile","_this6","reader","FileReader","addEventListener","process_uploaded_data","readAsArrayBuffer","data","_this7","loadAsync","promises","_loop","endsWith","async","content","import_file","name","Promise","all","parsed","e","save_state","FileManagerState","file_list","selected_filename","current_filename","unavailable","field","ascending","sort","a","b","a_value","b_value","basename","_this8","replace","_loop2","candidate","n","some","v","_ret","offset","new_filename","f","index","new_index","Expr","emitter","finished_string","_this9","expr_type","json_keys","json_key","obj","undefined","map","to_latex","found","visit","old_expr","new_expr","CommandExpr","_list","operand_exprs","options","PrefixExpr","_expr","base_expr","prefix_expr","InfixExpr","operator_expr","left_expr","right_expr","split","PlaceholderExpr","TextExpr","SequenceExpr","exprs","DelimiterExpr","left_type","right_type","middle_type","inner_exprs","fixed_size","SubscriptSuperscriptExpr","subscript_expr","superscript_expr","ArrayExpr","array_type","row_count","column_count","_list2d","element_exprs","row_separators","column_separators","json_array","expr_json","row_exprs","right","concat","combine_command_pair","left_name","right_name","operand_count","as_bold","new_command_name","_Expr","_inherits","_super","_createSuper","_this10","call","indexOf","operand_expr","grouped_expr","substitute_expr","_get","_getPrototypeOf","prototype","_Expr2","_super2","_this11","_Expr3","_super3","_this12","op_expr","op","operator_text","new_split_mode","_Expr4","_super4","apply","arguments","_Expr5","_super5","_this13","_Expr6","_super6","_this14","_Expr7","_super7","_this15","emit_latex_fixed_size","emit_latex_flex_size","_this16","text_or_command","_this17","needs_autoparenthesization","parenthesize","_Expr8","_super8","_this18","is_command_with_name","_Expr9","_super9","_this19","Array","fill","t","new_array_type","every","new_element_exprs","_this20","make_cell","new_row_count","new_column_count","_toConsumableArray","inserted_row_exprs","i","splice","_this21","_loop3","_transpose_cell","cell_expr","_this22","is_column","toggle","separators","size","is_matrix","_emit_array_with_separators","begin_environment","row_index","row_separator","col_index","align_separator","end_environment","_this23","left_delim","right_delim","pieces","column_layout_string","has_row_separators","separator","expr1","expr2","split_mode","_split_expr","combine_pair","Item","serial","next_serial","prefix","serial_number","item_type","ExprItem","tag_expr","elements","element_json","TextItemElement","is_heading","CodeItem","language","source","from_string","_Item","_super10","_this24","to_text","TextItemExprElement","is_bold","TextItemRawElement","raw","_TextItemElement","_super11","_this25","_latex_escape","replacements","match","_TextItemElement2","_super12","_this26","_TextItemElement3","_super13","string","_this27","_Item2","_super14","_this28","element","is_empty","is_text","is_raw","is_explicit_space","is_expr","substitution_expr","new_elements","placeholder_expr","find_placeholder","item1","item2","separator_text","from_expr","merged_elements","last_index","last_merged_element","_Item3","_super15","_this29","clone","check","underflow","_unchecked_pop","check_exprs","type_error","_this$_unchecked_pop","_this$_unchecked_pop2","_toArray","new_stack","_this$pop_exprs","pop_exprs","_this$pop_exprs2","_this$pop_arrays","pop_arrays","_this$pop_arrays2","array_exprs","Error","push_all","push_all_exprs","object_type","item_json","selection_index","new_item","selected_item","delete_selection","move_selection_by","insert_item","InputContext","app_component","settings","new_mode","new_document","files_changed","file_saved","notification_text","perform_undo_or_redo","prefix_argument","preserve_prefix_argument","text_entry_mode","text_entry_edited_item","effective_mode","lookup_binding","last_keypress","process_command","commands","piece","token","process_command_batch","_commands$i","parameters","handler_function","new_app_state","message","error_flash_stack","dom_element","classList","remove","offsetWidth","add","error_flash_document","error_flash_element","elt_id","child_expr","is_superscript","autoparenthesize","autoparenthesize_frac","_stack$pop_exprs","_stack$pop_exprs2","_build_subscript_superscript","push_expr","make_subscript_superscript","_stack$pop_exprs3","_stack$pop_exprs4","new_prime_expr","new_superscript_expr","is_prime_command","switch_to_mode","new_prefix_argument","parseInt","default_value","all_value","star_ok","arg","_get_prefix_argument","_stack$pop","pop","_stack$pop2","new_items","_stack$pop3","_stack$pop4","_stack$pop5","_stack$pop6","_stack$pop7","_stack$pop8","reverse","_stack$pop9","_stack$pop10","last_item","_stack$pop11","_stack$pop12","_stack$pop13","_stack$pop14","_stack$pop15","_stack$pop16","amount_string","amount","shift_selection_by","file_manager_state","do_save_file_as","notify","save","request_file_list","window","prompt","sanitize_filename","confirm","do_save_file","start_loading_filename","generate_unused_filename","do_toggle_popup","offset_string","find_adjacent_filename","delete_state","preserve","_stack$pop17","_stack$pop18","empty_item","do_push","case_type","_stack$pop_exprs5","_stack$pop_exprs6","toUpperCase","convert_fn","opname","arity","_stack$pop_exprs7","_stack$pop_exprs8","popped_exprs","result_expr","_stack$pop_exprs9","_stack$pop_exprs10","facename","_stack$pop_exprs11","_stack$pop_exprs12","funcname","superscript_text","_stack$pop_exprs13","_stack$pop_exprs14","arg_expr","orig_funcname","sup_or_sub","make_operatorname","command_expr","_stack$pop_exprs15","_stack$pop_exprs16","argument_expr","sub_expr","limits_expr","hat_op","_stack$pop_exprs17","_stack$pop_exprs18","inner_expr","class_name","class_name_2","_stack$pop_exprs19","_stack$pop_exprs20","new_class_name","_stack$pop19","_stack$pop20","_stack$pop_exprs21","_stack$pop_exprs22","delimiter_type","middle","_finish_custom_delimiters","d","_stack$pop_exprs23","_stack$pop_exprs24","_stack$pop_exprs25","_stack$pop_exprs26","as_fixed_size","_stack$pop21","_stack$pop22","left_item","right_item","concatenate_items","phrase","_stack$pop23","_stack$pop24","conjunction_item","_stack$pop_exprs27","_stack$pop_exprs28","_stack$pop_exprs29","_stack$pop_exprs30","infix_expr","new_infix_expr","with_split_mode","_stack$pop_exprs31","_stack$pop_exprs32","overset_op","_stack$pop_exprs33","_stack$pop_exprs34","stacked_expr","_stack$pop25","_stack$pop26","_stack$pop_exprs35","_stack$pop_exprs36","_new_stack$pop","_new_stack$pop2","new_stack_2","original_expr","new_text_item","try_substitute_placeholder","which_side","_stack$pop_exprs37","_stack$pop_exprs38","extracted_expr","initial_text","cancel_text_entry","new_mode_when_empty","textstyle","from_string_with_placeholders","_stack$pop27","_stack$pop28","as_editable_string","do_start_text_entry","_latex_unescape","_stack$pop29","_stack$pop30","_stack$pop_exprs39","_stack$pop_exprs40","latex_source","code_item","expr_count_string","expr_count","_stack$pop_exprs41","_stack$pop_exprs42","_stack$pop_exprs43","_stack$pop_exprs44","_stack$pop31","_stack$pop32","arg_count_string","arg_count","_stack$pop_exprs45","_stack$pop_exprs46","_stack$pop_exprs47","_stack$pop_exprs48","mode_string","help_location","scrollTop","help_scroll_top","apply_layout_to_dom","config_option","scratch","full_refresh_needed","clear_all_flashes","clone_all_items","on_or_off","exitFullscreen","getElementsByTagName","requestFullscreen","matrix_type","_stack$pop_exprs49","_stack$pop_exprs50","matrix_expr","_stack$pop_arrays","_stack$pop_arrays2","m1","m2","new_array","stack_arrays","_stack$pop_arrays3","_stack$pop_arrays4","array_expr","split_rows","_stack$pop_arrays5","_stack$pop_arrays6","dissolved_exprs","_stack$pop_matrices","pop_matrices","_stack$pop_matrices2","with_ellipses","_stack$pop_matrices3","_stack$pop_matrices4","transposed","new_type","_stack$pop_matrices5","_stack$pop_matrices6","with_array_type","is_row_or_column","separator_type","_stack$pop_matrices7","_stack$pop_matrices8","with_separator","align_type","_stack$pop_exprs51","_stack$pop_exprs52","split_elements","final_separator_text","_require_prefix_argument","_stack$pop_exprs53","_stack$pop_exprs54","infix_text","_stack$pop_exprs55","_stack$pop_exprs56","infix_operator_expr","_stack$pop_exprs57","_stack$pop_exprs58","_stack$pop33","_stack$pop34","tagged_item","tag_item","_stack$pop35","_stack$pop36","slot","clipboard_items","screen_percentage_string","screen_percentage","container","selected_elts","getElementsByClassName","selected_elt","top_scrolltop","offsetTop","bottom_scrolltop","offsetHeight","clientHeight","ratio","new_scrolltop","panel_name","direction_string","percentage_string","panel_elt","scrollLeft","clientWidth","exported_text","navigator","clipboard","writeText","_stack$pop37","_stack$pop38","$e","React","createElement","App","_React$Component","props","load_from_local_storage","import_export_state","input_context","_assertThisInitialized","undo_stack","clear","import_export_state_changed","handleKeyDown","handleBeforeUnload","handleVisibilityChange","open_database","on_open_database","setState","fetch_file_list","file_list_request_finished","file_list_request_error","sort_file_list","load_state","file_load_finished","file_load_error","error","stack_panel_ref","current","document_panel_ref","popup_panel_ref","program_name","new_title","title","removeEventListener","createRef","stack_panel_components","StackItemsComponent","ModeIndicatorComponent","id","className","ref","DocumentComponent","PopupPanelComponent","altKey","metaKey","_keyname_from_event","_this$state$input_con","handle_key","_this$state$input_con2","was_handled","preventDefault","manage_undo_state","state_updates","shiftKey","ctrlKey","undo_state","redo_state","push_state","Component","_React$Component2","indicator_item","input_mode","colon","_React$Component3","item_components","selected","ItemComponent","item_ref","react_key","component","TextEntryComponent","entry_type","class_names","_React$Component4","subcomponents","is_selected","selected_item_ref","top_is_selected","top_spacer","ensure_selection_visible","extra_space","_React$Component5","FileManagerComponent","_React$Component6","show_import_export","file_input_ref","render_current_filename","render_file_table","render_shortcuts","render_export_import_section","textual_state","href","onClick","start_exporting","download_available","export_filename","generate_download_filename","download","handle_file_upload","fontWeight","colSpan","_render_file_list_row","item_count","floor","toLocaleDateString","toLocaleTimeString","keyhelp_elements","spec","_spec","keyname","helptext","file_input_elt","start_importing","_React$Component7","tag_ref","node","_render_with_katex","latex_code","display_mode","katex","render","throwOnError","displayMode","fleqn","trust","minRuleThickness","msg","innerHTML","_React$Component8","refs","help_content","subcomponent","help_source_elt","help_dest_elt","_render_help_latex","parentNode","removeChild","appendChild","location","hash","help_elt","children","code_elt","textContent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","console","log","onUpdate","onSuccess","catch","ReactDOMClient","createRoot","_jsx","process","origin","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f5ced755.chunk.js","sourcesContent":["\nconst EditorKeymap = {\n    base: {\n        // Letters/numbers and some symbols immediately push onto the stack\n        '[alnum]': \"self_push\",\n        '#': \"push \\\\#\",\n        '@': \"push @\",\n        '*': \"push *\",\n        '~': \"push \\\\sim\",\n\n        // Immediate action special keys\n        '!': \"autoparenthesize;push !;concat\",\n        'Enter': \"subscript\",\n\t'Shift+Enter': \"edit_item\",\n        '_': \"subscript\",\n        '^': \"superscript\",\n        'Backspace': \"pop\",\n        \"`\": \"superscript\",\n        ' ': \"autoparenthesize 2;concat\",\n        '=': \"mode relational\",\n        '<': \"infix <\",\n        '>': \"infix >\",\n        '+': \"infix +\",\n        '-': \"infix -\",\n        ']': \"make_bold\",\n        '[': \"delimiters [ ]\",\n        '(': \"delimiters ( )\",\n        '{': \"delimiters \\\\{ \\\\}\",\n\n        // Document commands\n        'ArrowUp': \"change_document_selection -1\",\n        'Shift+ArrowUp': \"shift_document_selection -1\",\n        'ArrowDown': \"change_document_selection +1\",\n        'Shift+ArrowDown': \"shift_document_selection +1\",\n        'PageUp': \"change_document_selection -5\",  // TODO: scroll based on viewport height instead\n        'PageDown': \"change_document_selection +5\",\n        'Home': \"change_document_selection -10000\",\n        'End': \"change_document_selection +10000\",\n\n        // Stack scrolling commands\n        'ArrowRight': \"scroll stack_panel horizontal 75\",\n        'ArrowLeft': \"scroll stack_panel horizontal -75\",\n\n        // Prefix keys\n        'Tab': \"mode stack\",\n        \"'\": \"mode symbol\",\n        '.': \"mode decoration\",\n        ',': \"mode infix\",\n        ')': \"mode delimiters\",\n        '}': \"custom_delimiter\",\n        ';': \"mode lowercase_greek\",\n        ':': \"mode uppercase_greek\",\n        '%': \"mode calligraphic\",\n        '&': \"mode script\",\n        '/': \"mode operator\",\n        \"\\\\\": \"start_text_entry math_text_entry\",\n        \"\\\"\": \"start_text_entry text_entry\",\n        '|': \"mode array\",\n        '$': \"mode config\",\n        '?': \"toggle_popup help\",\n\n        // Other Ctrl-based shortcuts\n        'Ctrl+0': \"push 0;subscript\",\n        'Ctrl+1': \"push -1;superscript\",\n        'Ctrl+2': \"push 2;superscript\",\n        'Ctrl+3': \"push 3;superscript\",\n        'Ctrl+4': \"push 4;superscript\",\n        'Ctrl+a': \"swap\",\n        'Ctrl+b': \"make_bold\",\n        'Ctrl+c': \"copy_to_clipboard\",\n        'Ctrl+e': \"push e;operator mathrm;swap;superscript\",  // exp(x) - same as [/][e]\n        'Ctrl+i': \"pop_to_document\",\n        'Ctrl+j': \"extract_from_document\",\n        'Ctrl+k': \"infix \\\\,\",\n        'Ctrl+l': \"recenter_document 50\",\n        'Ctrl+m': \"prefix -\",\n        'Ctrl+o': \"parenthesize;wrap_braces;concat\",  // -> f(x): same as [/][o]\n        'Ctrl+p': \"delimiters ( )\",\n        'Ctrl+r': \"infix ,;parenthesize;wrap_braces;concat\",  // -> f(x,y): same as [/][r]\n        'Ctrl+s': \"save_file\",\n        'Ctrl+u': \"superscript\",\n        'Ctrl+v': \"paste_from_clipboard\",\n        'Ctrl+y': \"redo\",\n        'Ctrl+z': \"undo\",\n        'Ctrl+ ': \"infix \\\\,\",\n        'Ctrl+,': \"infix ,\",\n        'Ctrl+ArrowRight': \"scroll document_container horizontal 75\",\n        'Ctrl+ArrowLeft': \"scroll document_container horizontal -75\",\n        'Ctrl+/': \"operator frac 2\"\n    },\n\n    // File Manager mode\n    files: {\n        'default': \"toggle_popup files\",\n        'd': \"delete_selected_file\",\n        'n': \"start_new_file\",\n        'Enter': \"load_selected_file\",\n        's': \"save_file\",\n        'S': \"save_file_as\",\n        'ArrowUp': \"select_adjacent_file -1\",\n        'ArrowDown': \"select_adjacent_file 1\"\n    },\n\n    // User Manual mode\n    help: {\n        'ArrowDown': 'scroll popup_panel vertical 25',\n        'ArrowUp': 'scroll popup_panel vertical -25',\n        'j': 'scroll popup_panel vertical 25',\n        'k': 'scroll popup_panel vertical -25',\n        'ArrowLeft': 'cancel',\n        'ArrowRight': 'cancel',\n        'PageUp': 'scroll popup_panel vertical -95',\n        'PageDown': 'scroll popup_panel vertical 95',\n        'default': \"toggle_popup help\"\n    },\n\n    // Tab prefix: stack/misc operations\n    stack: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"swap\",\n        'c': \"copy_to_clipboard\",\n        'd': \"pop\",\n        'i': \"pop_to_document\",\n        'I': \"pop_to_document preserve\",\n        'f': \"toggle_popup files\",\n        'j': \"extract_from_document\",\n        'J': \"extract_from_document preserve\",\n        'l': \"recenter_document 50\",\n        'n': \"nip\",\n        'o': \"over\",\n        'r': \"rot\",\n        's': \"save_file\",\n        't': \"tuck\",\n        'u': \"unrot\",\n        'v': \"paste_from_clipboard\",\n        'X': \"reset_all\",\n        'Enter': \"dup\",\n        'Backspace': \"pop\",\n        'Tab': \"undo\",\n        '.': \"redo\",\n        '!': \"export_document_as_text\",\n        '@': \"export_stack_items_as_text\",\n        '$': \"extract_latex_source\",\n        'ArrowRight': \"scroll document_container horizontal 75\",\n        'ArrowLeft': \"scroll document_container horizontal -75\",\n        '?': \"toggle_popup help stack\"\n    },\n\n    // $ prefix: configuration\n    config: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'ArrowLeft': \"config stack_side left\",\n        'ArrowRight': \"config stack_side right\",\n        'ArrowUp': \"config stack_side top\",\n        'ArrowDown': \"config stack_side bottom\",\n        'f': \"fullscreen on\",\n        'F': \"fullscreen off\",\n        'i': \"config toggle_inline_math\",\n\t'I': \"config toggle_mode_indicator\",\n        'm': \"config math_align toggle_document\",\n        'M': \"config math_align toggle_stack\",\n        'r': \"config reset_layout\",\n        's': \"config stack_split\",\n        't': \"config theme\",\n        'z': \"config zoom_factor increase\",\n        'Z': \"config zoom_factor decrease\",\n        '$': \"push \\\\$\",\n        '!': \"push \\\\alpha\\\\boldsymbol{\\\\alpha}\\\\mathcal{A}\\\\mathfrak{A}A\\\\bold{A}\\\\boldsymbol{A}\\\\mathtt{A}\\\\mathrm{A}\\\\mathsf{A}\\\\textup{A}\\\\Bbb{A}\\\\mathscr{A}[\\\\big[\\\\Big[\\\\bigg[\\\\Bigg[\\\\int\",\n        '?': \"toggle_popup help configuration\"\n    },\n\n    // \" prefix (TextItem text)\n    text_entry: {\n        'Enter': \"finish_text_entry text\",\n        'Shift+Enter': \"finish_text_entry heading\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // \\ prefix (math text)\n    math_text_entry: {\n        'Enter': \"finish_text_entry math\",\n        'Shift+Enter': \"finish_text_entry roman_math\",\n        \"\\\\\": \"start_text_entry latex_entry\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // double \\ prefix (latex command)\n    latex_entry: {\n        'Enter': \"finish_text_entry latex\",\n        'Escape': \"cancel_text_entry\",\n        'Ctrl+z': \"cancel_text_entry\",\n        'Backspace': \"backspace_text_entry math_text_entry\",\n        'default': \"append_text_entry\"\n    },\n\n    // right-parenthesis prefix: special delimiters\n    delimiters: {\n        'b': \"delimiters \\\\langle \\\\vert\",  //  <x| Dirac bra\n        'c': \"delimiters \\\\lceil \\\\rceil\",\n        'f': \"delimiters \\\\lfloor \\\\rfloor\",\n        'g': \"delimiters \\\\lgroup \\\\rgroup\",\n        'i': \"delimiters \\\\langle \\\\rangle \\\\vert 2\",  // <x|y>; mnemonic: [i]nner product\n        'I': \"delimiters \\\\langle \\\\rangle \\\\vert 3\",  // <x|y|z>\n        'k': \"delimiters \\\\vert \\\\rangle\",  // |x> Dirac ket\n        'm': \"delimiters \\\\lmoustache \\\\rmoustache\",\n        'n': \"delimiters \\\\lVert \\\\rVert\",  // n = Norm\n        'N': \"delimiters \\\\lVert \\\\rVert\",  // alias for n\n        'w': \"delimiters . \\\\vert\",  // \"where\"\n        'W': \"delimiters . \\\\vert\",  // alias for w\n        '|': \"delimiters \\\\vert \\\\vert\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '(': \"delimiters ( )\",\n\t')': \"toggle_fixed_size_delimiters\",\n        '[': \"delimiters [ ]\",\n        ']': \"push \\\\llbracket;swap;concat;push \\\\rrbracket;concat\",\n        '{': \"delimiters \\\\{ \\\\}\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // right-curly-brace prefix: custom delimiter builder mode\n    custom_delimiters: {\n        '[digit]': \"prefix_argument\",\n        'c': \"custom_delimiter \\\\lceil\",\n        'C': \"custom_delimiter \\\\rceil\",\n        'f': \"custom_delimiter \\\\lfloor\",\n        'F': \"custom_delimiter \\\\rfloor\",\n        'g': \"custom_delimiter \\\\lgroup\",\n        'G': \"custom_delimiter \\\\rgroup\",\n        'm': \"custom_delimiter \\\\lmoustache\",\n        'M': \"custom_delimiter \\\\rmoustache\",\n        'v': \"custom_delimiter \\\\Vert\",\n        '<': \"custom_delimiter \\\\langle\",\n        '>': \"custom_delimiter \\\\rangle\",\n        '(': \"custom_delimiter (\",\n        ')': \"custom_delimiter )\",\n        '[': \"custom_delimiter [\",\n        ']': \"custom_delimiter ]\",\n        '{': \"custom_delimiter \\\\{\",\n        '}': \"custom_delimiter \\\\}\",\n        '.': \"custom_delimiter .\",\n        ' ': \"custom_delimiter .\",\n        '/': \"custom_delimiter /\",\n        \"\\\\\": \"custom_delimiter \\\\backslash\",\n        '|': \"custom_delimiter |\",\n        '?': \"toggle_popup help delimiters\"\n    },\n\n    // forward-slash prefix: assorted functions/operators\n    operator: {\n        '1': \"push 1;swap;operator frac 2\",\n        '2': \"mode squared\",\n        'a': \"apply_operator 1\",\n        'A': \"apply_operator 2\",\n        'b': \"operator binom 2\",\n        'c': \"named_function cos\",\n        'C': \"named_function csc\",\n        'd': \"mode derivative\",\n        'D': \"named_function det\",\n        'e': \"push e;operator mathrm;swap;superscript\",  // exp(x)\n        'E': \"named_function exp\",\n        'f': \"mode named_operator\",\n        'h': \"mode hyperbolic\",\n        'i': \"mode integral_limits\",\n        'I': \"push \\\\int;swap;superscript;swap;subscript\",\n        'k': \"delimiters . . \\\\vert 2;parenthesize;wrap_braces;concat\",  // f x y -> f(x|y)\n        'l': \"push \\\\limits;swap;subscript;push \\\\lim;swap;concat\",  // lim_{x}\n        'L': \"infix \\\\to;push \\\\limits;swap;subscript;push \\\\lim;swap;concat\",  // lim_{y \\to x}\n        'n': \"named_function ln\",\n        'N': \"named_function log\",\n        'o': \"parenthesize;wrap_braces;concat\",  // f x -> f(x)  \"of\" (wrap_braces closes up the spacing after 'f')\n        'O': \"overunderset overset\",\n        'p': \"parenthesize;operator Pr\",  // Pr(x) (probability)\n        'P': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;parenthesize;operator Pr\",  // Pr(y|x)\n        'q': \"operator sqrt\",\n        'Q': \"operator sqrt[3]\",\n        'r': \"infix ,;parenthesize;wrap_braces;concat\",  // f x y -> f(x,y)\n        's': \"named_function sin\",\n        'S': \"named_function sec\",\n        't': \"named_function tan\",\n        'T': \"named_function cot\",\n        'U': \"overunderset underset\",\n        'v': \"parenthesize;push Var;operator operatorname;swap;concat\",\n        'V': \"swap;push ,;concat;swap;concat;parenthesize;push Cov;operator operatorname;swap;concat\",\n\t'w': \"swap_infix\",\n        'x': \"push E;operator mathbb;swap;delimiters [ ];wrap_braces;concat\",  // E[x] (expectation)\n        'X': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;delimiters [ ];wrap_braces;push E;operator mathbb;swap;concat\",  // E[y|x]\n        'y': \"push E;operator mathbb;swap;subscript;swap;delimiters [ ];wrap_braces;concat\",  // E_x[y] (with subscript)\n        'Y': \"unrot;push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2;delimiters [ ];wrap_braces;swap;push E;operator mathbb;swap;subscript;swap;concat\",  // E_x[z|y]\n        ';': \"apply_tag\",\n        ',': \"split_infix\",\n        '/': \"operator frac 2\",\n        '[': \"delimiters [ ];wrap_braces;concat\",  // f x -> f[x]\n        ']': \"delimiters \\\\{ \\\\};wrap_braces;concat\",  // f x -> f{x}\n        '}': \"swap;operator underbrace;swap;subscript\",\n        '{': \"swap;operator overbrace;swap;superscript\",\n        '<': \"extract_infix_side left\",\n        '>': \"extract_infix_side right\",\n        '-': \"mode inverse\",\n        '=': \"unrot;infix =;push \\\\sum;swap;subscript;swap;superscript\",\n        '+': \"infix \\\\ge;push \\\\sum;swap;subscript\",\n        \"'\": \"substitute_placeholder\",\n        \"\\\"\": \"toggle_is_heading\",\n        'Enter': \"unrot;subscript;swap;superscript\",  // apply superscript and subscript at once\n        '?': \"toggle_popup help operators\"\n    },\n\n    named_operator: {\n        'a': \"operator arg\",\n        'c': \"operator gcd\",\n        'd': \"operator dim\",\n        'e': \"operator deg\",\n        'f': \"operator liminf\",\n        'g': \"operator argmax\",\n        'h': \"operator hom\",\n        'i': \"operator inf\",\n        'j': \"operator injlim\",\n        'k': \"operator ker\",\n        'l': \"operator lim\",\n        'm': \"operator min\",\n        'n': \"operator argmin\",\n        'o': \"push Cov;operator operatorname;swap;concat\",\n        'p': \"operator Pr\",\n        'r': \"operator projlim\",\n        's': \"operator sup\",\n        't': \"operator det\",\n        'u': \"operator limsup\",\n        'v': \"push Var;operator operatorname;swap;concat\",\n        'x': \"operator max\",\n\n        'A': \"underset_operator arg\",\n        'C': \"underset_operator gcd\",\n        'D': \"underset_operator dim\",\n        'E': \"underset_operator deg\",\n        'F': \"underset_operator liminf\",\n        'G': \"underset_operator argmax\",\n        'H': \"underset_operator hom\",\n        'I': \"underset_operator inf\",\n        'J': \"underset_operator injlim\",\n        'K': \"underset_operator ker\",\n        'L': \"underset_operator lim\",\n        'M': \"underset_operator min\",\n        'N': \"underset_operator argmin\",\n        'O': \"underset_operator Cov true\",\n        'P': \"underset_operator Pr\",\n        'R': \"underset_operator projlim\",\n        'S': \"underset_operator sup\",\n        'T': \"underset_operator det\",\n        'U': \"underset_operator limsup\",\n        'V': \"underset_operator Var true\",\n        'X': \"underset_operator max\"\n    },\n\n    // TODO: maybe make a more general way of doing these\n    hyperbolic: {\n        's': \"named_function sinh\",\n        'S': \"named_function sech\",\n        'c': \"named_function cosh\",\n        'C': \"named_function csch\",\n        't': \"named_function tanh\",\n        'T': \"named_function coth\",\n        '2': \"mode squared_hyperbolic\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n    inverse: {\n        's': \"named_function sin -1\",\n        'S': \"named_function sec -1\",\n        'c': \"named_function cos -1\",\n        'C': \"named_function csc -1\",\n        't': \"named_function tan -1\",\n        'T': \"named_function cot -1\",\n        'h': \"mode inverse_hyperbolic\",\n        '2': \"mode squared\"\n    },\n    inverse_hyperbolic: {\n        's': \"named_function sinh -1\",\n        'S': \"named_function sech -1\",\n        'c': \"named_function cosh -1\",\n        'C': \"named_function csch -1\",\n        't': \"named_function tanh -1\",\n        'T': \"named_function coth -1\",\n        '2': \"mode squared_hyperbolic\"\n    },\n    squared: {\n        's': \"named_function sin 2\",\n        'S': \"named_function sec 2\",\n        'c': \"named_function cos 2\",\n        'C': \"named_function csc 2\",\n        't': \"named_function tan 2\",\n        'T': \"named_function cot 2\",\n        'n': \"named_function lg\",  // [n][N] are special cases for base-2 log\n        'N': \"named_function log _2\",\n        'h': \"mode squared_hyperbolic\",\n        '-': \"mode inverse\"\n    },\n    squared_hyperbolic: {\n        's': \"named_function sinh 2\",\n        'S': \"named_function sech 2\",\n        'c': \"named_function cosh 2\",\n        'C': \"named_function csch 2\",\n        't': \"named_function tanh 2\",\n        'T': \"named_function coth 2\",\n        '-': \"mode inverse_hyperbolic\"\n    },\n\n    // /i prefix\n    integral_limits: {\n        'r': \"push -\\\\infty;subscript;push \\\\infty;superscript\",  // -oo..oo : [r]eals\n        'n': \"push -\\\\infty;subscript;push 0;superscript\",  // -oo..0 : [n]egative \n        'p': \"push 0;subscript;push \\\\infty;superscript\",  // 0..oo : [p]ositive\n        'u': \"push 0;subscript;push 1;superscript\",  // 0..1 : [u]nit\n        'U': \"push -1;subscript;push 1;superscript\",  // -1..1 : symmetric [U]nit\n        't': \"push 0;subscript;push 2\\\\pi;superscript\",  // 0..2pi : [t]rigonometric\n        'T': \"push -\\\\pi;subscript;push \\\\pi;superscript\",  // -pi..pi : symmetric [T]rigonometric\n        '?': \"toggle_popup help integrals\"\n    },\n\n    // /d prefix: derivative operations\n    derivative: {\n        // \\partial y / \\partial x\n        'j': \"push \\\\partial;swap;concat;swap;push \\\\partial;swap;concat;swap;operator frac 2\",\n        // \\partial^2 y / \\partial x^2\n        'J': \"push 2;superscript;push \\\\partial;swap;concat;swap;push \\\\partial;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // dy/dx\n        'k': \"push d;operator mathrm;swap;concat;swap;push d;operator mathrm;swap;concat;swap;operator frac 2\",\n        // d^2(y) / dx^2\n        'K': \"push 2;superscript;push d;operator mathrm;swap;concat;swap;push d;operator mathrm;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // \\partial / \\partial x\n        'q': \"push \\\\partial;swap;concat;push \\\\partial;swap;operator frac 2\",\n        // \\partial^2 / \\partial x^2\n        'Q': \"push 2;superscript;push \\\\partial;swap;concat;push \\\\partial;push 2;superscript;swap;operator frac 2\",\n        // d/dx\n        'x': \"push d;operator mathrm;swap;concat;push d;operator mathrm;swap;operator frac 2\",\n        // d^2 / dx^2\n        'X': \"push 2;superscript;push d;operator mathrm;swap;concat;push d;operator mathrm;push 2;superscript;swap;operator frac 2\",\n        // \\partial^2 / \\partial x\\,\\partial y\n        'm': \"push \\\\partial;swap;concat;push \\\\partial;rot;concat;swap;push \\\\,;swap;concat;concat;push \\\\partial;push 2;superscript;swap;operator frac 2\",\n        // \\partial^2 z / \\partial x\\,\\partial y\n        'M': \"push \\\\partial;swap;concat;push \\\\partial;rot;concat;swap;push \\\\,;swap;concat;concat;swap;push \\\\partial;push 2;superscript;swap;concat;swap;operator frac 2\",\n        // gradient\n        'g': \"push \\\\nabla;swap;concat\",\n        // gradient with respect to x\n        'G': \"push \\\\nabla;swap;subscript;swap;concat\",\n        // divergence\n        '.': \"push \\\\nabla;push \\\\cdot;concat;swap;concat\",\n        // curl\n        'c': \"push \\\\nabla;push \\\\times;concat;swap;concat\",\n        // Laplacian\n        'l': \"push \\\\nabla;push 2;superscript;swap;concat\",\n        // d'Alembertian\n        'L': \"push \\\\Box;push 2;superscript;swap;concat\",\n        // x -> dx\n        'd': \"push d;operator mathrm;swap;concat\",\n        // x -> d^2x\n        '2': \"push d;operator mathrm;push 2;superscript;swap;concat\",\n        '3': \"push d;operator mathrm;push 3;superscript;swap;concat\",\n        '4': \"push d;operator mathrm;push 4;superscript;swap;concat\",\n        // y x -> y dx\n        'i': \"swap;push \\\\,;concat;swap;push d;operator mathrm;swap;concat;concat\",\n        // y x -> ydx (with thinspace after the dx)\n        'I': \"push d;operator mathrm;swap;concat;concat;push \\\\,;concat\",\n        // y x -> ydx (no spacing around the dx)\n        ' ': \"push d;operator mathrm;swap;concat;concat\",\n\n        '?': \"toggle_popup help derivatives\"\n    },\n\n    // comma prefix: combine two objects with an infix operation\n    infix: {\n        'a': \"apply_infix\",\n        'b': \"infix \\\\bullet\",\n        'c': \"infix \\\\cap\",\n        'd': \"infix \\\\setminus\",  // (set [d]ifference)\n        'e': \"infix ,\\\\dots,\",\n        'f': \"conjunction if\",\n        'F': \"conjunction iff\",\n        'g': \"infix \\\\gets\",\n        'k': \"push \\\\,;swap;concat;swap;push \\\\,;concat;swap;delimiters . . \\\\vert 2\",  // x | y  ([k]onditional)\n        'l': \"infix \\\\parallel\",\n        'M': \"infix \\\\mp\",\n        'n': \"conjunction when\",\n        'o': \"infix \\\\circ\",\n        'O': \"infix \\\\odot\",\n        'p': \"infix \\\\perp\",\n        'P': \"infix \\\\pm\",\n        'q': \"conjunction and\",\n        'Q': \"conjunction or\",\n        'r': \"conjunction for\",\n        's': \"infix \\\\,\",\n        't': \"infix \\\\to\",\n        'T': \"infix \\\\longrightarrow\",\n        'u': \"infix \\\\cup\",\n        'v': \"infix \\\\vee\",\n        'V': \"infix \\\\veebar\",\n        'w': \"infix \\\\wedge\",\n        'W': \"infix \\\\barwedge\",\n        'x': \"infix \\\\times\",\n        'X': \"infix \\\\otimes\",\n        '[': \"infix \\\\llcorner\",  // right-contraction\n        ']': \"infix \\\\lrcorner\",  // left-contraction\n        '|': \"delimiters . . \\\\vert 2\",  // \"infix |\",\n        '=': \"infix \\\\Rightarrow\",\n        '-': \"infix \\\\ominus\",\n        '+': \"infix \\\\oplus\",\n        '.': \"infix \\\\cdot\",\n        ',': \"infix ,\",  // comma without thinspace\n        ' ': \"infix ,\\\\,\",  // comma plus thinspace\n        ':': \"infix :\",\n        ';': \"infix semicolon\\\\:\",\n        '`': \"swap;push T;superscript;swap;concat\",  // xTy\n        '%': \"operator pmod;concat\",  // y (mod x)\n        '*': \"infix *\",\n\t'(': \"infix ,;delimiters ( )\",  // (x,y)\n        '<': \"infix ,;delimiters \\\\langle \\\\rangle\",  // <x,y>\n        '>': \"infix \\\\cdots\",\n        '/': \"autoparenthesize;swap;autoparenthesize;swap;delimiters . . / 2\",  // flex x/y\n        \"\\\\\": \"autoparenthesize;swap;autoparenthesize;swap;infix /\",  // fixed x/y\n        '?': \"toggle_popup help infix\"\n    },\n\n    // = prefix: relational operators\n    relational: {\n\t'9': \"infix \\\\prec\",\n\t'0': \"infix \\\\succ\",\n        'a': \"infix \\\\approx\",\n        'c': \"infix \\\\cong\",  // =~  congruent\n        'e': \"infix \\\\equiv\",\n        'E': \"infix \\\\iff\",\n        'g': \"infix >\",\n\t'f': \"infix \\\\Leftarrow\", // \"[f]rom\"\n        'G': \"infix \\\\gg\",\n        'i': \"infix \\\\in\",\n        'I': \"infix \\\\notin\",\n\t'j': \"infix \\\\Join\",\n        'l': \"infix <\",\n        'L': \"infix \\\\ll\",\n        'm': \"infix \\\\mapsto\",\n        'n': \"infix \\\\ne\",\n        '!': \"infix \\\\ne\",\n\t'o': \"infix \\\\circeq\",\n        'p': \"infix \\\\propto\",\n        'q': \"infix =\",\n        's': \"infix \\\\subseteq\",\n        'S': \"infix \\\\subset\",\n        't': \"infix \\\\sim\",\n\t'u': \"infix \\\\supseteq\",\n\t'U': \"infix \\\\supset\",\n        '=': \"infix =\",\n\t'^': \"infix \\\\triangleq\",\n        '<': \"infix \\\\le\",\n        '>': \"infix \\\\ge\",\n        '[': \"infix \\\\le\",\n        ']': \"infix \\\\ge\",\n\t'{': \"infix \\\\sqsubset\",\n\t'}': \"infix \\\\sqsupset\",\n\t'(': \"infix \\\\preceq\",\n\t')': \"infix \\\\succeq\",\n\t'.': \"infix \\\\doteq\",\n        ':': \"infix \\\\coloneqq\",\n        ';': \"infix \\\\coloncolon\",\n        '~': \"infix \\\\sim\",\n\t'-': \"infix \\\\vdash\",\n        '|': \"infix \\\\vDash\",\n        '?': \"toggle_popup help relational\"\n    },\n\n    // apostrophe prefix: assorted standalone math symbols\n    symbol: {\n        '0': \"push \\\\varnothing\",\n        '1': \"push -1\",\n        '2': \"push 1;push 2;operator frac 2\",  // 1/2 (display)\n        '3': \"push 1;push 2;infix /\",  // 1/2 (inline)\n        '8': \"push \\\\infty\",\n        'a': \"push \\\\forall\",\n        'c': \"push \\\\cdot\",\n        'C': \"push \\\\bigcap\",\n        'd': \"push \\\\partial\",\n        'e': \"push \\\\exists\",\n\t'E': \"push \\\\nexists\",\n        'h': \"push \\\\hslash\",\n        'i': \"push \\\\int\",\n        'I': \"push \\\\iint\",\n        'l': \"push \\\\ell\",\n        'M': \"push \\\\mp\",\n        'o': \"push \\\\circ\",\n        'p': \"push \\\\prod\",\n        'P': \"push \\\\pm\",\n        's': \"push \\\\sum\",\n        't': \"push \\\\therefore\",\n        'U': \"push \\\\bigcup\",\n        'v': \"push \\\\vee\",\n\t'V': \"push \\\\bigvee\",\n        'w': \"push \\\\wedge\",\n\t'W': \"push \\\\bigwedge\",\n        'y': \"push \\\\oint\",\n        'Y': \"push \\\\oiint\",\n        '.': \"push \\\\dots\",\n        '>': \"push \\\\cdots\",\n        '-': \"push -\",\n        '+': \"push +\",\n        '*': \"push \\\\star\",\n        '|': \"push |\",\n        '=': \"push_separator\",\n        '?': \"push ?\",  // NOTE: no mode-sensitive help shortcut for symbols because of this\n        '!': \"push !\",\n        ',': \"push ,\",\n        ';': \"push semicolon\",\n        ':': \"push :\",\n        '`': \"push `\",\n        '_': \"push \\\\_\",\n        \"'\": \"push_placeholder\",\n        ' ': \"push \",  // \"nothing\", e.g. when you don't want something on one side of an infix\n        'ArrowUp': \"push \\\\uparrow\",\n        'ArrowDown': \"push \\\\downarrow\"\n    },\n\n    // . prefix: expression decorators (fonts, hats, etc)\n    decoration: {\n        '0': \"push 0;subscript\",\n        '1': \"push -1;superscript\",\n        '2': \"push 2;superscript\",\n        '3': \"push 3;superscript\",\n        '4': \"push 4;superscript\",\n        '8': \"push \\\\infty;infix \\\\to\",\n        'A': \"operator acute\",\n        'b': \"font_operator mathbb\",\n        'c': \"autoparenthesize;push 1;swap;infix -\",\n        'C': \"html_class emphasized emphasized2\",\n        'd': \"push \\\\dagger;superscript\",\n        'D': \"push \\\\ddagger;superscript\",\n        'e': \"operator bold\",  // bold roman (sort of)\n        'g': \"operator mathring\",\n        'G': \"operator grave\",\n        'h': \"apply_hat hat\",\n        'H': \"apply_hat widehat\",\n        'i': \"push -;superscript\",\n        'I': \"push +;superscript\",\n        'k': \"font_operator mathfrak\",\n        'l': \"push \\\\parallel;subscript\",\n        'm': \"font_operator mathtt\",\n        'M': \"prefix \\\\mp\",\n\t'n': \"prefix \\\\neg\",\n        'o': \"operator bar\",\n        'O': \"operator overline\",\n        'p': \"push \\\\perp;subscript\",\n        'P': \"prefix \\\\pm\",\n        'q': \"prefix =\",\n        'r': \"make_roman\",\n        's': \"font_operator mathsf\",  // sans-serif\n        't': \"prefix \\\\to\",\n        'T': \"operator widetilde\",\n        'u': \"apply_hat breve\",\n        'U': \"operator utilde\",\n        'v': \"operator vec\",\n        'V': \"apply_hat check\",\n        'w': \"operator overline\",\n        'W': \"apply_hat widecheck\",\n        'x': \"operator boxed\",\n        'X': \"operator sout\",  // strikeout\n        'z': \"operator cancel\",\n        '.': \"apply_hat dot\",\n        \"\\\"\": \"apply_hat ddot\",\n        ' ': \"push \\\\,;concat\",  // append thin space\n        \"'\": \"autoparenthesize;prime\",\n        '*': \"push *;superscript\",\n        '~': \"apply_hat tilde\",\n        '=': \"prefix \\\\Rightarrow\",\n        '-': \"prefix -\",\n        '+': \"prefix +\",\n        '`': \"push T;superscript\",  // transpose\n        '/': \"push 1;swap;autoparenthesize;delimiters . . / 2\",  // flex 1/x\n        \"\\\\\": \"push 1;swap;autoparenthesize;infix /\",  // fixed 1/x\n        '_': \"operator underline\",\n        '?': \"toggle_popup help decorations\"\n    },\n\n    // | prefix: array/matrix operations\n    array: {\n        '[digit]': \"prefix_argument\",\n        '*': \"prefix_argument\",\n        'a': \"build_align aligned\",\n        'c': \"build_align cases\",\n        'C': \"build_align rcases\",\n        'd': \"dissolve_array\",\n        'e': \"build_list ,\\\\,;push ,\\\\,\\\\dots;concat\",\n        'E': \"push_matrix_ellipses\",\n        'f': \"build_align cases_if\",\n        'F': \"build_align rcases_if\",\n        'g': \"build_align gathered\",\n        'h': \"transpose_matrix;swap;transpose_matrix;swap;stack_arrays;transpose_matrix\",  // i.e., stack horizontally\n        'k': \"build_substack\",\n        'm': \"build_matrix_row matrix\",\n        'p': \"build_list +;push +\\\\cdots;concat\",\n        's': \"split_array\",\n        't': \"mode change_matrix_type\",\n        'T': \"transpose_matrix\",\n        'v': \"build_matrix_row vmatrix\",\n        'V': \"build_matrix_row Vmatrix\",\n        'x': \"build_list product \\\\cdots\",\n        ' ': \"build_list product\",\n        '|': \"stack_arrays\",\n        ',': \"build_list ,\\\\,\",\n        '.': \"build_list ,\\\\, ,\\\\,\\\\dots,\\\\,\",\n        ';': \"build_list semicolon\\\\,\",\n        '+': \"build_infix_list + \\\\cdots\",\n        '(': \"build_matrix_row pmatrix\",\n        '[': \"build_matrix_row bmatrix\",\n        '{': \"build_matrix_row Bmatrix\",\n        '@': \"build_matrix_row bmatrix 2;transpose_matrix\",\n        '#': \"build_matrix_row bmatrix 3;transpose_matrix\",\n        '$': \"build_matrix_row bmatrix 2;unrot;build_matrix_row bmatrix 2;swap;stack_arrays\",\n        ':': \"array_separator column dashed\",\n        '!': \"array_separator column solid\",\n        '-': \"array_separator row dashed\",\n        '_': \"array_separator row solid\",\n        '?': \"toggle_popup help arrays\",\n        'Enter': \"stack_arrays\"\n    },\n\n    change_matrix_type: {\n        'm': \"change_matrix_type matrix\",\n        'v': \"change_matrix_type vmatrix\",\n        'V': \"change_matrix_type Vmatrix\",\n        '(': \"change_matrix_type pmatrix\",\n        '[': \"change_matrix_type bmatrix\",\n        '{': \"change_matrix_type Bmatrix\"\n    },\n\n    // & prefix\n    script: {\n        '[alpha]': \"self_push;to_case uppercase;font_operator mathscr\",\n        '&': \"push \\\\&\"\n    },\n\n    // % prefix\n    calligraphic: {\n        '[alpha]': \"self_push;to_case uppercase;font_operator mathcal\",\n        '%': \"push \\\\%\"\n    },\n\n    // ; prefix: lowercase Greek letters\n    lowercase_greek: {\n        'a': \"push \\\\alpha\",     'b': \"push \\\\beta\",\n        'c': \"push \\\\chi\",       'd': \"push \\\\delta\",\n        'e': \"push \\\\epsilon\",   'f': \"push \\\\phi\",\n        'g': \"push \\\\gamma\",     'h': \"push \\\\eta\",\n        'i': \"push \\\\iota\",      'j': \"push \\\\varphi\",\n        'k': \"push \\\\kappa\",     'l': \"push \\\\lambda\",\n        'm': \"push \\\\mu\",        'n': \"push \\\\nu\",\n        'o': \"push \\\\omega\",     'p': \"push \\\\pi\",\n        'q': \"push \\\\vartheta\",  'r': \"push \\\\rho\",\n        's': \"push \\\\sigma\",     't': \"push \\\\tau\",\n        'u': \"push \\\\upsilon\",   'v': \"push \\\\theta\",\n        'w': \"push \\\\omega\",     'x': \"push \\\\xi\",\n        'y': \"push \\\\psi\",       'z': \"push \\\\zeta\",\n\n        ':': \"mode variant_greek\",\n        ';': \"infix semicolon\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // : prefix: uppercase Greek letters\n    uppercase_greek: {\n        'd': \"push \\\\Delta\",     'e': \"push \\\\varepsilon\",\n        'f': \"push \\\\Phi\",       'g': \"push \\\\Gamma\",\n        'k': \"push \\\\varkappa\",  'l': \"push \\\\Lambda\",\n        'm': \"push \\\\varpi\",     'o': \"push \\\\Omega\",\n        'p': \"push \\\\Pi\",        'q': \"push \\\\vartheta\",\n        'r': \"push \\\\varrho\",    's': \"push \\\\Sigma\",\n        't': \"push \\\\varsigma\",  'u': \"push \\\\Upsilon\",\n        'v': \"push \\\\Theta\",     'w': \"push \\\\Omega\",\n        'x': \"push \\\\Xi\",        'y': \"push \\\\Psi\",\n        '6': \"push \\\\digamma\",   '^': \"push \\\\digamma\",\n        'n': \"push \\\\nabla\",  // special case\n\n        // TODO: support for case-insensitive keybindings in general\n        'D': \"push \\\\Delta\",     'E': \"push \\\\varepsilon\",\n        'F': \"push \\\\Phi\",       'G': \"push \\\\Gamma\",\n        'K': \"push \\\\varkappa\",  'L': \"push \\\\Lambda\",\n        'M': \"push \\\\varpi\",     'O': \"push \\\\Omega\",\n        'P': \"push \\\\Pi\",        'Q': \"push \\\\vartheta\",\n        'R': \"push \\\\varrho\",    'S': \"push \\\\Sigma\",\n        'T': \"push \\\\varsigma\",  'U': \"push \\\\Upsilon\",\n        'V': \"push \\\\Theta\",     'W': \"push \\\\Omega\",\n        'X': \"push \\\\Xi\",        'Y': \"push \\\\Psi\",\n        'N': \"push \\\\nabla\",\n\n        ':': \"infix :\",\n        '?': \"toggle_popup help greek\"\n    },\n\n    // \"variant\" uppercase Greek letters - these are italic versions of the normal ones\n    variant_greek: {\n        'd': \"push \\\\varDelta\",    'D': \"push \\\\varDelta\",\n        'f': \"push \\\\varPhi\",      'F': \"push \\\\varPhi\",\n        'g': \"push \\\\varGamma\",    'G': \"push \\\\varGamma\",\n        'l': \"push \\\\varLambda\",   'L': \"push \\\\varLambda\",\n        'o': \"push \\\\varOmega\",    'O': \"push \\\\varOmega\",\n        'p': \"push \\\\varPi\",       'P': \"push \\\\varPi\",\n        'q': \"push \\\\varTheta\",    'Q': \"push \\\\varTheta\",\n        's': \"push \\\\varSigma\",    'S': \"push \\\\varSigma\",\n        'u': \"push \\\\varUpsilon\",  'U': \"push \\\\varUpsilon\",\n        'x': \"push \\\\varXi\",       'X': \"push \\\\varXi\",\n        'y': \"push \\\\varPsi\",      'Y': \"push \\\\varPsi\",\n\n        '?': \"toggle_popup help greek\"\n    }\n};\n\n\nexport default EditorKeymap;\n","\n\nimport KeybindingTable from './Keymap';\nimport JSZip from 'jszip';\n\n\nclass Keymap {\n    constructor() {\n        this.bindings = KeybindingTable;\n    }\n    \n    lookup_binding(mode, key) {\n        const mode_map = this.bindings[mode];\n        if(!mode_map) return null;\n        if(mode_map[key]) return mode_map[key];\n        if(mode_map['[alpha]'] && /^[a-zA-Z]$/.test(key)) return mode_map['[alpha]'];\n        if(mode_map['[digit]'] && /^[0-9]$/.test(key)) return mode_map['[digit]'];\n        if(mode_map['[alnum]'] && /^[a-zA-Z0-9]$/.test(key)) return mode_map['[alnum]'];\n        if(mode_map['default']) return mode_map['default'];\n        if(mode === 'base' || mode === 'editor')\n            return null;\n        else\n            return 'cancel';\n    }\n}\n\n\nclass Settings {\n    static load_from_local_storage() {\n        const serialized_string = localStorage.getItem('settings');\n        if(serialized_string)\n            return Settings.from_json(JSON.parse(serialized_string));\n        else\n            return new Settings();\n    }\n    \n    static from_json(json) {\n        let s = new Settings();\n        Settings.saved_keys.forEach(key => { s[key] = json[key]; });\n        return s;\n    }\n    \n    constructor() {\n        this.current_keymap = new Keymap();\n        this.selected_theme = 'default';\n        this.last_opened_filename = null;\n        this.popup_mode = null;  // null, 'help', 'files'\n\tthis.show_mode_indicator = true;\n        this.layout = this.default_layout();\n    }\n\n    default_layout() {\n        return {\n            zoom_factor: 0,\n            stack_rightalign_math: false,\n            document_rightalign_math: false,\n            inline_math: false,\n            stack_side: 'left',\n            stack_split: 50\n        };\n    }\n\n    apply_layout_to_dom(stack_panel_elt, document_panel_elt, popup_panel_elt) {\n        const layout = this.layout;\n\n        // Show or hide popup panel.\n        popup_panel_elt.style.display = this.popup_mode ? 'block' : 'none';\n\n        // Set overall scale factor.\n        const root_elt = document.getElementById('root');\n        const percentage = Math.round(100*Math.pow(1.05, layout.zoom_factor || 0));\n        root_elt.style.fontSize = percentage + '%';\n\n        // Set up panel layout.\n        let [stack_bounds, document_bounds] = this._split_rectangle(\n            {x: 0, y: 0, w: 100, h: 100}, layout.stack_side, layout.stack_split);\n\n        this._apply_bounds(stack_panel_elt, stack_bounds);\n        this._apply_bounds(document_panel_elt, document_bounds);\n    }\n\n    // Split a parent bounding rectangle into \"primary\" and \"secondary\"\n    // subrectangles according to the given 'side' and split %.\n    _split_rectangle(bounds, side, split_percent) {\n        const w1 = Math.round(split_percent*bounds.w/100);\n        const w2 = bounds.w - w1;\n        const h1 = Math.round(split_percent*bounds.h/100);\n        const h2 = bounds.h - h1;\n        switch(side) {\n        case 'left':\n            return [{x: bounds.x,    y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x+w1, y: bounds.y, w: w2, h: bounds.h}];\n        case 'right':\n            return [{x: bounds.x+w2, y: bounds.y, w: w1, h: bounds.h},\n                    {x: bounds.x,    y: bounds.y, w: w2, h: bounds.h}];\n        case 'top':\n            return [{x: bounds.x, y: bounds.y,    w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y+h1, w: bounds.w, h: h2}];\n        case 'bottom':\n            return [{x: bounds.x, y: bounds.y+h2, w: bounds.w, h: h1},\n                    {x: bounds.x, y: bounds.y,    w: bounds.w, h: h2}];\n        default:\n            return [bounds, bounds];\n        }\n    }\n\n    _apply_bounds(elt, bounds) {\n        elt.style.left = bounds.x + '%';\n        elt.style.top = bounds.y + '%';\n        elt.style.width = bounds.w + '%';\n        elt.style.height = bounds.h + '%';\n    }\n\n    save() {\n        const serialized_string = JSON.stringify(this.to_json());\n        localStorage.setItem('settings', serialized_string);\n    }\n\n    to_json() {\n        let json = {};\n        Settings.saved_keys.forEach(key => { json[key] = this[key]; });\n        return json;\n    }\n}\n\nSettings.saved_keys = [\n    'selected_theme', 'last_opened_filename', 'popup_mode', 'layout',\n    'show_mode_indicator'\n];\n\n\n// Helper for generating LaTeX strings from Expr objects.\nclass LatexEmitter {\n    constructor() {\n        this.tokens = [];\n        this.last_token_type = null;\n    }\n\n    emit_token(text, token_type) {\n        if(text.length > 0)\n            this.tokens.push(text);\n        this.last_token_type = token_type;\n    }\n\n    expr(expr) { expr.emit_latex(this); }\n\n    grouped_expr(expr, force_braces) { this.grouped(() => this.expr(expr), force_braces); }\n\n    grouped(fn, force_braces) {\n        let [old_tokens, old_last_token_type] = [this.tokens, this.last_token_type];\n        [this.tokens, this.last_token_type] = [[], null];\n\n        fn();\n\n        const [tokens, last_token_type] = [this.tokens, this.last_token_type];\n        this.tokens = old_tokens;\n        this.last_token_type = old_last_token_type;\n\n        // The only real 'special' case is a group with exactly 1 token.\n        // In that case we may be able to omit the surrounding braces if\n        // it's a 1-character string or a single \\latexcommand.  In all other\n        // cases the braces need to be included.\n        if(force_braces === 'force' || tokens.length === 0 || tokens.length > 1) {\n            this.text('{');\n            this.text(tokens.join(''));\n            this.text('}');\n        }\n        else {  // tokens.length === 1 && !force_braces\n            if(last_token_type === 'text') {\n                if(tokens[0].length === 1)\n                    this.text(tokens[0]);\n                else {\n                    this.text('{');\n                    this.text(tokens[0]);\n                    this.text('}');\n                }\n            }\n            else if(force_braces === 'force_commands') {\n                this.text('{');\n                this.emit_token(tokens[0], 'command');\n                this.text('}');\n            }\n            else\n                this.emit_token(tokens[0], 'command');\n        }\n    }\n\n    // Emit 'raw' LaTeX code.\n    text(text) {\n        if(this.last_token_type === 'command') {\n            // Determine if a space is needed after the last command; this depends\n            // on whether two non-special characters are adjacent.\n            const last_token = this.tokens[this.tokens.length-1];\n            if(this._is_latex_identifier_char(last_token.charAt(last_token.length-1)) &&\n               (this._is_latex_identifier_char(text.charAt(0)) /*|| text.charAt(0) === '{'*/))\n                this.emit_token(' ', 'text');\n        }\n        this.emit_token(text, 'text');\n    }\n\n    _is_latex_identifier_char(ch) {\n        return /^[a-zA-Z]$/.test(ch);\n    }\n\n    // \\latexcommand (something that isn't a single special-character command like \\,)\n    command(command_name, command_options) {\n        if(command_options)\n            command_name = command_name + '[' + command_options + ']';\n        this.emit_token(\"\\\\\" + command_name, 'command');\n    }\n\n    // Treated like text or a command depending on whether it starts with a backslash.\n    text_or_command(text) {\n        if(text.startsWith(\"\\\\\"))\n            this.command(text.slice(1));\n        else\n            this.text(text);\n    }\n\n    // environment_argument is an optional string to be placed directly after the \\begin{...}.\n    // This is used for array environments with a specified column layout, for example\n    // \\begin{matrix}{c:c:c}\n    begin_environment(envname, environment_argument) {\n        this.text(\"\\\\begin{\" + envname + \"}\");\n        if(environment_argument) this.text(environment_argument);\n        this.text(\"\\n\");\n    }\n\n    end_environment(envname) { this.text(\"\\n\\\\end{\" + envname + \"}\\n\"); }\n\n    align_separator() { this.text(' & '); }\n\n    // Table row separators for e.g. \\begin{matrix}\n    row_separator() {\n        // Give a little more space between rows, for fractions.\n        // See KaTeX \"common issues\" page.\n        this.text(\"\\\\\\\\[0.1em]\\n\");\n        // this.text(\"\\\\\\\\\\n\");\n    }\n\n    finished_string() { return this.tokens.join(''); }\n}\n\n\n// Overall app state, holding the stack and document.\nclass AppState {\n    static from_json(json) {\n        return new AppState(\n            Stack.from_json(json.stack),\n            Document.from_json(json.document)\n        );\n    }\n    \n    constructor(stack, document) {\n        this.stack = stack || this._default_stack();\n        this.document = document || new Document([], 0);\n        this.is_dirty = false;\n    }\n\n    _default_stack() {\n        const item = new TextItem([\n            new TextItemTextElement(\"Welcome to the editor. Press \"),\n            new TextItemTextElement(\"[?]\", true),\n            new TextItemTextElement(\" to view the User Guide.\")]);\n        return new Stack([item]);\n    }\n\n    same_as(app_state) {\n        // NOTE: AppState stuff is never modified in-place, so all that needs to be\n        // done here is check object identities.\n        return this.stack === app_state.stack && this.document === app_state.document;\n    }\n\n    to_json() {\n        return {\n            stack: this.stack.to_json(),\n            document: this.document.to_json(),\n            format: 1\n        };\n    }\n}\n\n\nclass UndoStack {\n    constructor() {\n        // Stack of saved AppState instances (most recent one at the end).\n        this.state_stack = [];\n\n        // Maximum size of this.state_stack\n        this.max_stack_depth = 100;\n        \n        // Number of consecutive undo operations that have been performed so far.\n        // If this is greater that zero, 'redo' operations can revert the undos.\n        this.undo_count = 0;\n    }\n\n    clear(initial_app_state) {\n        this.state_stack = [initial_app_state];\n        this.undo_count = 0;\n    }\n\n    push_state(state) {\n        // Only save state if it differs from the state we'd be undoing to.\n        if(this.state_stack.length > this.undo_count &&\n           this.state_stack[this.state_stack.length - this.undo_count - 1].same_as(state))\n            return null;\n\n        if(this.undo_count > 0) {\n            // Truncate already-undone saved states.  This means that 'redo' will no longer work\n            // until some more undos are performed.\n            this.state_stack = this.state_stack.slice(0, this.state_stack.length - this.undo_count);\n            this.undo_count = 0;\n        }\n\n        this.state_stack.push(state);\n\n        // Prevent the undo list from growing indefinitely.\n        if(this.state_stack.length > this.max_stack_depth)\n            this.state_stack = this.state_stack.slice(this.state_stack.length - this.max_stack_depth);\n\n        return state;\n    }\n\n    undo_state() {\n        if(this.state_stack.length-1 > this.undo_count) {\n            this.undo_count++;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n\n    redo_state() {\n        if(this.undo_count > 0) {\n            this.undo_count--;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n}\n\n\n// Interface to the browser's IndexedDB storage.\n// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\nclass DocumentStorage {\n    constructor() {\n        this.open_request = null;\n        this.database = null;\n    }\n\n    open_database(onsuccess) {\n        if(!indexedDB) return;\n        this.on_open_success = onsuccess;\n        this.open_request = indexedDB.open('rpnlatex', 1);\n        this.open_request.onupgradeneeded = this.handle_upgrade_database.bind(this);\n        this.open_request.onsuccess = this.handle_open_success.bind(this);\n        this.open_request.onerror = this.handle_open_error.bind(this);\n    }\n\n    handle_upgrade_database(event) {\n        this.database = this.open_request.result;\n        switch(event.oldVersion) {\n        case 0: this.build_initial_schema(); break;\n        default: break;\n        }\n    }\n\n    // 'documents' is a map of filename->json document content\n    // 'documents_metadata' is a map of filename->filesize, etc.\n    // The metadata is needed because otherwise the entire file contents have to be loaded and parsed\n    // just to show the filesize and object count in the file selector.\n    // IndexedDB indexes could probably be used for this instead (by having the index key be\n    // \"filename:filesize:object_counts:timestamp:etc\").\n    build_initial_schema() {\n        this.database.createObjectStore('documents', {keyPath: 'filename'});\n        this.database.createObjectStore('documents_metadata', {keyPath: 'filename'});\n    }\n\n    handle_open_error(event) {\n        //alert(\"Unable to open IndexedDB for document storage.  You will be unable to save or load documents.\\nThis may happen in Private Browsing mode on some browsers.\\nError message: \" + this.open_request.error);\n        this.open_request = null;\n    }\n\n    handle_open_success(event) {\n        this.database = this.open_request.result;\n        this.open_request = null;\n        this.database.onversionchange = () => {\n            this.database.close();\n            this.database = null;\n            alert('Warning: database is outdated, please reload the page.');\n        };\n        if(this.on_open_success) this.on_open_success();\n    }\n\n    create_transaction(readwrite) {\n        return this.database.transaction(\n            ['documents', 'documents_metadata'],\n            readwrite ? 'readwrite' : 'readonly');\n    }\n\n    sanitize_filename(filename) {\n        const fn = filename.replaceAll(/[^a-zA-Z0-9_ ]/g, '').trim();\n        return (fn.length === 0 || fn.length > 200) ? null : fn;\n    }\n\n    load_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let document_store = transaction.objectStore('documents');\n        let request = document_store.get(filename);\n        request.onsuccess = () => {\n            // NOTE: request.result will be undefined if the filename key wasn't\n            // found.  This still counts as a 'success'.\n            const json = request.result;\n            if(json) {\n                const app_state = AppState.from_json(request.result);\n                onsuccess(filename, app_state);\n            }\n            else\n                onerror(filename, '???');  // TODO\n        };\n        request.onerror = () => {\n            onerror(filename, '???');  // TODO\n        };\n    }\n\n    save_state(app_state, filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let serialized_json = app_state.to_json();\n        serialized_json.filename = filename;\n\n        // Estimate the file size by serializing JSON.\n        // IndexedDB also does this serialization itself, but there doesn't\n        // seem to be any way to reuse that result directly.\n        const filesize = JSON.stringify(serialized_json).length;\n\n        const metadata_json = {\n            filename: filename,\n            filesize: filesize,\n            description: '',  // TODO\n            stack_item_count: app_state.stack.depth(),\n            document_item_count: app_state.document.items.length,\n            timestamp: new Date()\n        };\n        \n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').put(serialized_json);\n        transaction.objectStore('documents_metadata').put(metadata_json);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    delete_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').delete(filename);\n        transaction.objectStore('documents_metadata').delete(filename);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    fetch_file_list(onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let request = transaction.objectStore('documents_metadata').getAll();\n        request.onsuccess = () => {\n            request.result.forEach(row => {\n                // Parse the timestamp\n                const ts_value = Date.parse(row.timestamp);\n                row.timestamp = ts_value ? new Date(ts_value) : null;\n            });\n            onsuccess(request.result);\n        };\n        request.onerror = onerror;\n    }\n\n    // Fetch all documents using a cursor.  'onrowfetched' is invoked once per document\n    // and then 'onfinished' is invoked at the end.\n    fetch_all_documents(onrowfetched, onfinished, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let cursor = transaction.objectStore('documents').openCursor();\n        cursor.onsuccess = (event) => {\n            const c = event.target.result;\n            if(c) {\n                onrowfetched(c.value);\n                c.continue();\n            }\n            else\n                onfinished();\n        };\n        cursor.onerror = onerror;\n    }\n}\n\n\n// Manage state of importing/exporting zip archives.\nclass ImportExportState {\n    constructor() {\n        // States:\n        //   'idle' - if this.download_url is populated, an export download is ready\n        //   'error' - export failed, this.error_message is populated\n        //   'loading' - in the process of loading from the database cursor\n        //   'zipping' - creation of zip file in progress\n        //   'uploading' - user is uploading an archive zipfile\n        //   'importing' - uploaded zipfile is being processed/imported\n        this.state = 'idle';\n\n        this.document_storage = null;  // will be initialized by AppState\n\n        // Number of imported documents handled so far.\n        this.import_count = 0;\n\n        // Number of failures noted this import (if >0, this.error_message will also be set).\n        this.failed_count = 0;\n        this.error_message = null;\n\n        // Holds the last-generated blob download URL, if any.\n        this.download_url = null;\n\n        // This will be set on a successful import.\n        this.import_result_string = null;\n\n        // This will be set to true if the main file list (FileManagerState) needs to be refreshed from the DB.\n        this.file_list_needs_update = false;\n\n        // This can be set to a function to monitor state changes.\n        this.onstatechange = null;\n    }\n\n    // TODO: -> state_description()\n    textual_state() {\n        switch(this.state) {\n        case 'idle': return this.download_url ? 'Download Ready' : 'Ready for export or import';\n        case 'error': return 'Error: ' + this.error_message;\n        case 'loading': return 'Extacting database...';\n        case 'zipping': return 'Compressing files...';\n        case 'uploading': return 'Uploading data...';\n        case 'importing': return 'Importing documents: ' + this.import_count + ' so far';\n        default: return '???';\n        }\n    }\n\n    download_available() {\n        return this.state === 'idle' && this.download_url;\n    }\n\n    generate_download_filename() {\n        const date = new Date();\n        return [\n            'rpnlatex_', date.getFullYear().toString(), '_',\n            date.toLocaleString('default', {month: 'short'}).toLowerCase(),\n            '_', date.getDate().toString().padStart(2, '0'), '.zip'\n        ].join('');\n    }\n\n    change_state(new_state) {\n        this.state = new_state;\n        if(this.onstatechange)\n            this.onstatechange(this);\n    }\n    \n    start_exporting() {\n        let document_storage = this.document_storage;\n        this.zip = new JSZip();\n        document_storage.fetch_all_documents(\n            (row) => this.add_document_json_to_zip(row),\n            () => this.start_compressing(),\n            () => {\n                this.error_message = 'Unable to export the document database.';\n                this.change_state('error');\n            });\n        this.change_state('loading');\n    }\n\n    add_document_json_to_zip(json) {\n        this.zip.file(json.filename + '.json', JSON.stringify(json));\n    }\n\n    start_compressing() {\n        this.change_state('zipping');\n        this.zip.generateAsync({type: 'blob'}).then(content_blob => {\n            this.finished_compressing(content_blob);\n        });\n    }\n\n    clear_download_url() {\n        if(this.download_url) {\n            URL.revokeObjectURL(this.download_url);\n            this.download_url = null;\n        }\n    }\n\n    finished_compressing(content_blob) {\n        this.clear_download_url();\n        this.download_url = URL.createObjectURL(content_blob);\n        this.zip = null;\n        this.change_state('idle');\n    }\n\n    // zipfile is a File object from a <input type=\"file\"> element.\n    start_importing(zipfile) {\n        this.clear_download_url();\n        this.import_result_string = null;\n        if(zipfile.type !== 'application/zip') {\n            alert('Import files must be zip archives.');\n            return;\n        }\n        this.change_state('uploading');\n        let reader = new FileReader();\n        reader.addEventListener(\n            'load',\n            event => this.process_uploaded_data(event.target.result));\n        reader.readAsArrayBuffer(zipfile);\n    }\n\n    process_uploaded_data(data) {\n        this.import_count = 0;\n        this.failed_count = 0;\n        this.error_message = null;\n        this.change_state('importing');\n        JSZip.loadAsync(data).then(zipfile => {\n            let promises = [];\n            for(let filename in zipfile.files) {\n                const file = zipfile.files[filename];\n                if(filename.endsWith('.json')) {\n                    promises.push(\n                        file.async('string').then(\n                            content => this.import_file(file.name.slice(0, file.name.length-5), content)));\n                }\n                else {\n                    this.error_message = 'Invalid filename in archive: ' + filename;\n                    this.failed_count++;\n                }\n            }\n            Promise.all(promises).then(\n                () => {\n                    if(this.failed_count > 0)\n                        this.import_result_string = 'Errors encountered: ' + this.error_message;\n                    else\n                        this.import_result_string = 'Successfully imported ' + this.import_count + ' document' + (this.import_count === 1 ? '' : 's');\n                    this.change_state('idle');\n                    this.file_list_needs_update = true;\n                });\n        });\n    }\n\n    import_file(filename, content) {\n        let document_storage = this.document_storage;\n        let parsed, app_state;\n        try {\n            parsed = JSON.parse(content);\n            app_state = AppState.from_json(parsed);\n        } catch(e) {\n            this.error_message = 'Invalid document found in zip file: ' + filename;\n            this.failed_count++;\n            return;\n        }\n        document_storage.save_state(app_state, filename);\n        this.import_count++;\n        this.change_state('importing');\n    }\n}\n\n\nclass FileManagerState {\n    constructor(file_list, selected_filename, current_filename) {\n        this.file_list = file_list;\n        this.selected_filename = selected_filename;\n        this.current_filename = current_filename;\n        this.unavailable = false;  // set to true if there's a database error\n    }\n\n    sort_file_list(field, ascending) {\n        this.file_list.sort((a, b) => {\n            const a_value = a[field], b_value = b[field];\n            return (ascending ? 1 : -1)*(a_value === b_value ? 0 : (a_value < b_value ? -1 : 1));\n        });\n    }\n\n    // basename -> basename_1\n    // basename_1 -> basename_2\n    // The first available name is used, so basename_50 -> basename_2\n    // if basename_2 is available but basename_1 is taken.\n    generate_unused_filename(basename) {\n        if(this.unavailable || !this.file_list)\n            return basename;\n        basename = basename.replace(/_\\d+$/, '')\n        for(let n = 1; n < 1000; n++) {\n            const candidate = basename + '_' + n;\n            if(!this.file_list.some(file => file.filename === candidate))\n                return candidate;\n        }\n        return basename + '_toomany';\n    }\n\n    // For moving up or down in the list of files.\n    find_adjacent_filename(filename, offset) {\n        if(this.unavailable || !this.file_list) return null;\n        let new_filename = null;\n        let file_list = this.file_list;\n        file_list.forEach((f, index) => {\n            if(f.filename === filename) {\n                let new_index = index+offset;\n                if(new_index < 0) new_index = 0;\n                if(new_index >= file_list.length) new_index = file_list.length-1;\n                new_filename = file_list[new_index].filename;\n            }\n        });\n        if(!new_filename && file_list.length > 0)\n            new_filename = file_list[0].filename;\n        return new_filename;\n    }\n}\n\n\n// Abstract superclass for expression trees.\nclass Expr {\n    static from_json(json) {\n        switch(json.expr_type) {\n        case 'command':\n            return new CommandExpr(json.command_name, this._list(json.operand_exprs), json.options);\n        case 'prefix':\n            return new PrefixExpr(this._expr(json.base_expr), this._expr(json.prefix_expr));\n        case 'infix':\n            return new InfixExpr(\n                this._expr(json.operator_expr), this._expr(json.left_expr),\n                this._expr(json.right_expr), json.split || null);\n        case 'placeholder':\n            return new PlaceholderExpr();\n        case 'text':\n            return new TextExpr(json.text);\n        case 'sequence':\n            return new SequenceExpr(this._list(json.exprs));\n        case 'delimiter':\n            return new DelimiterExpr(\n                json.left_type, json.right_type, json.middle_type,\n                this._list(json.inner_exprs), json.fixed_size);\n        case 'subscriptsuperscript':\n            return new SubscriptSuperscriptExpr(\n                this._expr(json.base_expr),\n                this._expr(json.subscript_expr),\n                this._expr(json.superscript_expr));\n        case 'array':\n            return new ArrayExpr(\n                json.array_type, json.row_count, json.column_count, this._list2d(json.element_exprs),\n                json.row_separators, json.column_separators);\n        default:\n            return new TextExpr('invalid expr type ' + json.expr_type);\n        }\n    }\n\n    // Helper routines for from_json\n    static _expr(json) { return json ? Expr.from_json(json) : null; }\n    static _list(json_array) { return json_array.map(expr_json => Expr.from_json(expr_json)); }\n    static _list2d(json_array) { return json_array.map(row_exprs => Expr._list(row_exprs)); }\n    \n    // Concatenate two Exprs into one.  This will merge Sequence and Text\n    // nodes when possible, instead of creating nested SequenceExprs.\n    static combine_pair(left, right) {\n        const left_type = left.expr_type(), right_type = right.expr_type();\n        if(left_type === 'sequence' && right_type === 'sequence')\n            return new SequenceExpr(left.exprs.concat(right.exprs));\n        else if(left_type === 'text' && right_type === 'text')\n            return new TextExpr(left.text + right.text);\n        else if(left_type === 'sequence' && right_type === 'text' &&\n                left.exprs[left.exprs.length-1].expr_type() === 'text') {\n            // Left sequence ends in a Text; merge it with the new Text.\n            return new SequenceExpr(\n                left.exprs.slice(0, -1).concat([\n                    new TextExpr(left.exprs[left.exprs.length-1].text + right.text)\n                ]));\n        }\n        else if(left_type === 'text' && right_type === 'text' &&\n                right.exprs[0].expr_type() === 'text') {\n            // Right sequence starts with a Text; merge it with the new Text.\n            return new SequenceExpr(\n                [new TextExpr(left.text + right.exprs[0].text)\n                ].concat(right.exprs.slice(1)));\n        }\n        else if(left_type === 'sequence') {\n            // Sequence + anything => longer Sequence\n            return new SequenceExpr(left.exprs.concat([right]));\n        }\n        else if(right_type === 'sequence') {\n            // Anything + Sequence => longer Sequence\n            return new SequenceExpr([left].concat(right.exprs));\n        }\n        else if(left_type === 'command' && right_type === 'command')\n            return Expr.combine_command_pair(left, right);\n        else if(right_type === 'prefix') {\n            // X + prefix(Y) -> infix(X, Y) (this should always be OK to do)\n            return new InfixExpr(right.prefix_expr, left, right.base_expr);\n        }\n        else\n            return new SequenceExpr([left, right]);\n    }\n\n    // Combine two CommandExprs with some special-casing for some particular command pairs.\n    static combine_command_pair(left, right) {\n        const left_name = left.command_name, right_name = right.command_name;\n\n\t// Try combining \\boldsymbol{X...} + \\boldsymbol{Y...} -> \\boldsymbol{X...Y...}\n\t// Combining in this way fixes (or at least improves) some edge-case spacing problems with KaTeX.\n\t// Compare: \\boldsymbol{W}\\boldsymbol{A} vs. \\boldsymbol{WA}\n\tif(left_name === 'boldsymbol' && right_name === 'boldsymbol' &&\n\t   left.operand_count() === 1 && right.operand_count() === 1)\n\t    return new SequenceExpr(\n\t\t[left.operand_exprs[0], right.operand_exprs[0]]\n\t    ).as_bold();\n\n\t// Try combining adjacent integral symbols into multiple-integral commands.\n        let new_command_name = null;\n        if(left_name === 'int' && right_name === 'int') new_command_name = 'iint';\n        if(left_name === 'iint' && right_name === 'int') new_command_name = 'iiint';\n        if(left_name === 'int' && right_name === 'iint') new_command_name = 'iiint';\n        if(left_name === 'oint' && right_name === 'oint') new_command_name = 'oiint';\n        if(left_name === 'oiint' && right_name === 'oint') new_command_name = 'oiiint';\n        if(left_name === 'oint' && right_name === 'oiint') new_command_name = 'oiiint';\n        if(new_command_name)\n            return new CommandExpr(new_command_name);\n\n\t// Everything else just becomes a SequenceExpr.\n        return new SequenceExpr([left, right]);\n    }\n    \n    expr_type() { return '???'; }\n\n    to_latex() {\n        let emitter = new LatexEmitter();\n        this.emit_latex(emitter);\n        return emitter.finished_string();\n    }\n\n    emit_latex(emitter) { emitter.text('INVALID'); }\n\n    // Return a list of property names on this object that should be serialized\n    json_keys() { return []; }\n\n    // Subclasses can extend this if they need special handling.\n    to_json() {\n        let json = { expr_type: this.expr_type() };\n        this.json_keys().forEach(json_key => {\n            const obj = this[json_key];\n            let value;\n            if(obj === null || obj === undefined)\n                value = null;\n            else if(typeof(obj) === 'object' && obj instanceof Expr)\n                value = obj.to_json();\n            else if(typeof(obj) === 'object') {\n                // Assume it's an Array.  It could also be a 2-dimensional array, in which case the subclasses\n                // need to extend to_json() instead of relying on this default.\n                value = obj.map(elt => elt.to_json());\n            }\n            else // Strings, numbers, etc.\n                value = obj;\n            json[json_key] = value;\n        });\n        return json;\n    }\n\n    to_text() { return \"$$\\n\" + this.to_latex() + \"\\n$$\"; }\n\n    // Invoke fn once for each subexpression in this expression tree (including 'this').\n    // The visiting is performed depth-first, left-to-right, so should correspond visually\n    // to the left-to-right rendering of the expression.\n    visit(fn) { fn(this); }\n\n    // Find the first PlaceholderExpr that exists in this expression.  Returns null if none.\n    find_placeholder() {\n        let found = null;\n        this.visit(expr => {\n            if(expr.expr_type() === 'placeholder' && !found)\n                found = expr;\n        });\n        return found;\n    }\n\n    // Return a (possibly) new Expr with old_expr substituted for new_expr, if old_expr is present.\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr)\n            return new_expr;\n        else\n            return this;\n    }\n\n    // NOTE: CommandExpr overrides this\n    as_bold() { return new CommandExpr('boldsymbol', [this]); }\n\n    is_command_with_name(command_name) { return false; }\n}\n\n\n// Represents a \"raw\" LaTeX command such as \\sqrt plus optional operand expressions.\nclass CommandExpr extends Expr {\n    // NOTES:\n    //   - 'command_name' does not include the initial \\ character\n    //   - 'command_name' can be an empty string, in order to surround the operand expression(s)\n    //     with braces.  This is used to fix the spacing in cases like f\\left(x\\right).\n    //   - 'options', if provided, is a plain string that becomes \"\\command_name[options]{...}\"\n    //   - 'command_name' itself can include the options in [brackets], in which case it is\n    //     automatically split off into 'options' (this is used for keybindings).\n    //     (e.g.: command_name='sqrt[3]' -> command_name='sqrt', options='3'\n    constructor(command_name, operand_exprs, options) {\n        super();\n        if(command_name.endsWith(']')) {\n            const index = command_name.indexOf('[');\n            this.command_name = command_name.slice(0, index);\n            this.options = command_name.slice(index+1, command_name.length-1);\n        }\n        else {\n            this.command_name = command_name;\n            this.options = options === undefined ? null : options;\n        }\n        this.operand_exprs = operand_exprs || [];\n    }\n\n    operand_count() { return this.operand_exprs.length; }\n    expr_type() { return 'command'; }\n    json_keys() { return ['command_name', 'operand_exprs', 'options']; }\n\n    emit_latex(emitter) {\n        if(this.command_name !== '')\n            emitter.command(this.command_name, this.options);\n        // Braces need to be forced around each operand, even single-letter operands.\n        this.operand_exprs.forEach(operand_expr => emitter.grouped_expr(operand_expr, 'force'));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.operand_exprs.forEach(operand_expr => operand_expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new CommandExpr(\n            this.command_name,\n            this.operand_exprs.map(operand_expr => operand_expr.substitute_expr(old_expr, new_expr)),\n            this.options);\n    }\n\n    // Wrap this expression in a \\boldsymbol{...} command if it's not already.\n    // LaTeX has different ways of expressing 'bold' so this is not quite trivial.\n    // TextItem implements as_bold() in yet another way.\n    as_bold() {\n        if(this.command_name === 'boldsymbol')\n            return this;\n        else if(this.command_name === 'mathrm') {\n            // Replace \\mathrm with \\bold (as if it were originally created with [.][e] (operator bold))\n            if(this.operand_count() === 1)\n                return new CommandExpr('bold', this.operand_exprs);\n            else\n                return this;\n        }\n        else if(this.command_name === 'mathtt' || this.command_name === 'mathsf' ||\n                this.command_name === 'mathbb' || this.command_name === 'mathfrak' ||\n                this.command_name === 'mathscr' || this.command_name === 'mathcal') {\n            // For font families without bold fonts, wrap it in \\pmb{} instead.\n            // Since KaTeX v.0.16.2, \\pmb is rendered better (via CSS shadows) which\n            // makes this feasible.\n            if(this.operand_count() === 1)\n                return new CommandExpr('pmb', [this]);\n            else\n                return this;\n        }\n        else\n            return super.as_bold();\n    }\n\n    is_command_with_name(command_name) {\n        return this.command_name === command_name;\n    }\n}\n\n\n// Represents one expression in front of another.  Similar to InfixExpr.\nclass PrefixExpr extends Expr {\n    constructor(base_expr, prefix_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.prefix_expr = prefix_expr;\n    }\n\n    expr_type() { return 'prefix'; }\n\n    json_keys() { return ['base_expr', 'prefix_expr']; }\n\n    emit_latex(emitter) {\n        emitter.expr(this.prefix_expr);\n        emitter.expr(this.base_expr);\n    }\n\n    visit(fn) {\n        this.prefix_expr.visit(fn);\n        fn(this);\n        this.base_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new PrefixExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.prefix_expr.substitute_expr(old_expr, new_expr));\n    }\n}\n\n\n// Represents two expressions joined by textual infix (something like + or \\wedge).\n// This is similar to concatenated TextNodes, but using InfixExpr lets things like ArrayExpr\n// automatically detect where to put alignments when the contents are InfixExprs.\nclass InfixExpr extends Expr {\n    // split can be null, 'before', or 'after'.\n    // If it's non-null, the equation is split via \\\\ and \\qquad, either before or after the infix.\n    constructor(operator_expr, left_expr, right_expr, split) {\n        super();\n        this.operator_expr = operator_expr;\n        this.left_expr = left_expr;\n        this.right_expr = right_expr;\n        this.split = split || null;  // to avoid 'undefined's in the JSON\n    }\n\n    expr_type() { return 'infix'; }\n\n    json_keys() { return ['operator_expr', 'left_expr', 'right_expr', 'split']; }\n\n    // If the infix operator is a simple command like '+' or '\\cap', return it\n    // (without the initial \\ if it has one).  If it's anything more complex, return null.\n    operator_text() {\n        const op_expr = this.operator_expr;\n        if(op_expr.expr_type() === 'command' && op_expr.operand_count() === 0)\n            return op_expr.command_name;\n        else if(op_expr.expr_type() === 'text')\n            return op_expr.text;\n        else\n            return null;\n    }\n\n    // Check if this is a low-precedence infix expression like x+y\n    // This is mostly for convenience so it doesn't need to be that precise.\n    needs_autoparenthesization() {\n        const op = this.operator_text();\n        return op && (op === '+' || op === '-');\n    }\n\n    emit_latex(emitter) {\n        emitter.expr(this.left_expr);\n        if(this.split === 'before') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.operator_expr);\n        if(this.split === 'after') {\n            emitter.command(\"\\\\\");\n            emitter.command(\"qquad\");\n        }\n        emitter.expr(this.right_expr);\n    }\n\n    visit(fn) {\n        this.left_expr.visit(fn);\n        this.operator_expr.visit(fn);\n        fn(this);\n        this.right_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new InfixExpr(\n            this.operator_expr.substitute_expr(old_expr, new_expr),\n            this.left_expr.substitute_expr(old_expr, new_expr),\n            this.right_expr.substitute_expr(old_expr, new_expr),\n            this.split);\n    }\n\n    // Returns an InfixExpr like this one, but with the specified split mode set.\n    with_split_mode(new_split_mode) {\n        return new InfixExpr(\n            this.operator_expr, this.left_expr, this.right_expr, new_split_mode);\n    }\n}\n\n\n// Represents a \"placeholder marker\" that can be used with the 'substitute_placeholder' command.\nclass PlaceholderExpr extends Expr {\n    expr_type() { return 'placeholder'; }\n    json_keys() { return []; }\n\n    emit_latex(emitter) {\n        const expr = new CommandExpr('htmlClass', [\n            new TextExpr('placeholder_expr'), new TextExpr(\"\\\\blacksquare\")]);\n        emitter.expr(expr);\n    }\n}\n\n\n// Represents a snippet of LaTeX code; these are the \"leaves\" of Expr-trees.\nclass TextExpr extends Expr {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n\n    expr_type() { return 'text'; }\n    json_keys() { return ['text']; }\n\n    emit_latex(emitter) { emitter.text(this.text); }\n}\n\n\n// Represents a sequence of expressions all concatenated together.\n// Adjacent SequenceExprs can be merged together; see Expr.combine_pair().\nclass SequenceExpr extends Expr {\n    constructor(exprs) {\n        super();\n        this.exprs = exprs;\n    }\n\n    expr_type() { return 'sequence'; }\n    json_keys() { return ['exprs']; }\n\n    emit_latex(emitter) {\n        this.exprs.forEach(expr => emitter.expr(expr));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SequenceExpr(\n            this.exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents an expression enclosed in (flexible) left/right delimiters.\n// \\left( ... \\right)\n// If there is more than one inner_expr, they'll be separated with this.middle_type\n// e.g.: \\left( x \\middle| y \\right)\nclass DelimiterExpr extends Expr {\n    static parenthesize(expr) {\n        return new DelimiterExpr('(', ')', null, [expr]);\n    }\n\n    // Parenthesize 'expr' only if it's a low-precedence InfixExpr like 'x+y'.\n    static autoparenthesize(expr) {\n        if(expr.expr_type() === 'infix' && expr.needs_autoparenthesization())\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n\n    // Parenthesize 'expr' only if it's a \"fraction\", which could mean one of:\n    //   \\frac{x}{y}\n    //   x/y\n    //   \\left.x\\middle/\\right.  (as created by e.g. [,][\\])\n    static autoparenthesize_frac(expr) {\n        const needs_parenthesization = (\n            // \\frac{x}{y}\n            (expr.expr_type() === 'command' &&\n             expr.command_name === 'frac' &&\n             expr.operand_count() === 2) ||\n\n            // x/y\n            (expr.expr_type() === 'infix' && expr.operator_text() === '/') ||\n\n            // \\left.x\\middle/\\right.\n            (expr.expr_type() === 'delimiter' &&\n             expr.left_type === '.' &&\n             expr.middle_type === '/' &&\n             expr.right_type === '.')\n        );\n        if(needs_parenthesization)\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n    \n    constructor(left_type, right_type, middle_type, inner_exprs, fixed_size) {\n        super();\n        this.left_type = left_type;\n        this.right_type = right_type;\n        this.middle_type = middle_type || null;  // to avoid 'undefined's in the JSON\n\tthis.fixed_size = fixed_size || false;\n        this.inner_exprs = inner_exprs || [];\n    }\n\n    expr_type() { return 'delimiter'; }\n    json_keys() { return ['left_type', 'right_type', 'middle_type', 'inner_exprs']; }\n\n    emit_latex(emitter) {\n\tif(this.fixed_size)\n\t    this.emit_latex_fixed_size(emitter);\n\telse\n\t    this.emit_latex_flex_size(emitter);\n    }\n\n    emit_latex_flex_size(emitter) {\n        emitter.command('left');\n        emitter.text_or_command(this.left_type);\n        this.inner_exprs.forEach((expr, index) => {\n            if(index > 0) {\n                emitter.command('middle');\n                emitter.text_or_command(this.middle_type || '|');\n            }\n            emitter.expr(expr);\n        });\n        emitter.command('right');\n        emitter.text_or_command(this.right_type);\n    }\n\n    emit_latex_fixed_size(emitter) {\n\tif(this.left_type !== '.')\n\t    emitter.text_or_command(this.left_type);\n\tthis.inner_exprs.forEach((expr, index) => {\n\t    if(index > 0 && this.middle_type !== '.')\n\t\temitter.text_or_command(this.middle_type || '|');\n\t    emitter.expr(expr);\n\t});\n\tif(this.right_type !== '.')\n\t    emitter.text_or_command(this.right_type);\n    }\n\n    // Return a copy of this expression but with the given fixed_size flag.\n    as_fixed_size(fixed_size) {\n\treturn new DelimiterExpr(\n\t    this.left_type, this.right_type, this.middle_type,\n\t    this.inner_exprs, fixed_size);\n    }\n\n    to_json() {\n\tlet json = super.to_json();\n\tif(this.fixed_size) json.fixed_size = true;\n\treturn json;\n    }\n\n    visit(fn) {\n        fn(this);\n        this.inner_exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// Represents a base expression with either a subscript or superscript, or both.\nclass SubscriptSuperscriptExpr extends Expr {\n    constructor(base_expr, subscript_expr, superscript_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.subscript_expr = subscript_expr;\n        this.superscript_expr = superscript_expr;\n    }\n\n    expr_type() { return 'subscriptsuperscript'; }\n    json_keys() { return ['base_expr', 'subscript_expr', 'superscript_expr']; }\n\n    emit_latex(emitter) {\n        // If the base_expr is a command, don't put it inside grouping braces.\n        // This accounts for attaching subscripts or superscripts to commands\n        // with arguments such as \\underbrace{xyz}_{abc}.\n        if(this.base_expr.expr_type() === 'command')\n            emitter.expr(this.base_expr);\n        else\n            emitter.grouped_expr(this.base_expr);\n        if(this.subscript_expr) {\n            emitter.text('_');\n            // 'force_commands' ensures that single LaTeX commands are still grouped, even\n            // though single-letter super/subscripts are still OK to leave ungrouped.\n            // e.g.: x^{\\sum} instead of x^\\sum, but x^2 is fine.\n            emitter.grouped_expr(this.subscript_expr, 'force_commands');\n        }\n        if(this.superscript_expr) {\n            emitter.text('^');\n            emitter.grouped_expr(this.superscript_expr, 'force_commands');\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.base_expr.visit(fn);\n        if(this.subscript_expr) this.subscript_expr.visit(fn);\n        if(this.superscript_expr) this.superscript_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SubscriptSuperscriptExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.subscript_expr ? this.subscript_expr.substitute_expr(old_expr, new_expr) : null,\n            this.superscript_expr ? this.superscript_expr.substitute_expr(old_expr, new_expr) : null);\n    }\n\n    is_command_with_name(command_name) {\n        return this.base_expr.is_command_with_name(command_name);\n    }\n}\n\n\n// \\begin{bmatrix} ... etc\n// Currently supported \"array types\" are:\n//   matrices: bmatrix, Bmatrix, matrix, pmatrix, vmatrix, Vmatrix\n//   non-matrices (alignment environments): gathered, gather, cases, rcases\nclass ArrayExpr extends Expr {\n    // Stack two ArrayExprs on top of each other.\n    // If there is an incompatibility such as mismatched column counts, null is returned.\n    static stack_arrays(expr1, expr2) {\n        if(expr1.column_count !== expr2.column_count)\n            return null;\n        return new ArrayExpr(\n            expr2.array_type,\n            expr1.row_count + expr2.row_count,\n            expr1.column_count,\n            expr1.element_exprs.concat(expr2.element_exprs),\n            expr1.row_separators.concat([null], expr2.row_separators),\n            expr2.column_separators);\n    }\n    \n    // split_mode:  (for placing alignment markers automatically for \"\\cases\" and such)\n    //    'none': do nothing, just put each entry_expr in its own row\n    //    'infix': place alignment markers before infix, if any\n    //    'colon': if there is a ':' infix, remove it and place alignment marker where it was\n    //    'colon_if': like 'colon', but place the word \"if\" before the right-hand side if there\n    //                is a ':' infix.  If there is no ':' infix, the right-hand side becomes 'otherwise'.\n    static split_elements(exprs, split_mode) {\n        return exprs.map(expr => ArrayExpr._split_expr(expr, split_mode));\n    }\n\n    // Split up 'expr' into separately-aligned 'columns'.\n    static _split_expr(expr, split_mode) {\n        switch(split_mode) {\n        case 'none':\n            return [expr];\n        case 'infix':\n            if(expr.expr_type() === 'infix')\n                return [expr.left_expr, new PrefixExpr(expr.right_expr, expr.operator_expr)];\n            else\n                return [expr, null];\n        case 'colon':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [expr.left_expr, expr.right_expr];\n            else\n                return [expr, null];\n        case 'colon_if':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [\n                    expr.left_expr,\n                    Expr.combine_pair(\n                        Expr.combine_pair(\n                            new CommandExpr('mathrm', [new TextExpr('if')]),\n                            new CommandExpr('enspace'), []),\n                        expr.right_expr)];\n            else\n                return [\n                    expr,\n                    new CommandExpr('mathrm', [new TextExpr('otherwise')])];\n        default:\n            return [expr];\n        }\n    }\n\n    // row_separators and column_separators can either be null or an array of N-1\n    // items (where N is the row or column count respectively).  Each item can be\n    // one of: [null, 'solid', 'dashed'] indicating the type of separator to put\n    // between the corresponding row or column.\n    constructor(array_type, row_count, column_count, element_exprs,\n                row_separators, column_separators) {\n        super();\n        this.array_type = array_type;\n        this.row_count = row_count;\n        this.column_count = column_count;\n        this.element_exprs = element_exprs;\n        this.row_separators = row_separators || new Array(row_count-1).fill(null);\n        this.column_separators = column_separators || new Array(column_count-1).fill(null);\n    }\n\n    expr_type() { return 'array'; }\n    json_keys() { return ['array_type', 'row_count', 'column_count']; }\n\n    is_matrix() {\n        const t = this.array_type;\n        // TODO: t.endsWith('matrix')?\n        return (t === 'bmatrix' || t === 'Bmatrix' || t === 'matrix' ||\n                t === 'pmatrix' || t === 'vmatrix' || t === 'Vmatrix');\n    }\n\n    // Return a copy of this expression but with a different array_type (e.g. 'pmatrix').\n    // is_matrix() should be true before calling this.\n    with_array_type(new_array_type) {\n        return new ArrayExpr(\n            new_array_type, this.row_count, this.column_count,\n            this.element_exprs, this.row_separators, this.column_separators);\n    }\n\n    as_bold() {\n        return new ArrayExpr(\n            this.array_type,\n            this.row_count,\n            this.column_count,\n            this.element_exprs.map(row_exprs => row_exprs.map(expr => expr.as_bold())),\n            this.row_separators,\n            this.column_separators);\n    }\n\n    to_json() {\n        let json = super.to_json();\n        json.element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(expr => expr.to_json()));\n        // Don't emit row/column separators if they are all turned off (to keep the JSON smaller).\n        if(!this.row_separators.every(s => s === null))\n            json.row_separators = this.row_separators;\n        if(!this.column_separators.every(s => s === null))\n            json.column_separators = this.column_separators;\n        return json;\n    }\n\n    // Return a new ArrayExpr like this one, but with ellipses inserted before the\n    // last row and column, and along the diagonal.\n    // NOTE: is_matrix() should be true before calling this.\n    // NOTE: this does not preserve column/row separators.  There's not really a\n    // consistent way of doing this automatically.\n    with_ellipses() {\n        const make_cell = content => new TextExpr(content);\n        let new_row_count = this.row_count, new_column_count = this.column_count;\n        let new_element_exprs;\n        if(this.column_count > 1) {\n            new_element_exprs = this.element_exprs.map((row_exprs, index) => [\n                ...row_exprs.slice(0, -1),\n                make_cell((index === 0 || index === this.row_count-1) ? \"\\\\cdots\" : ''),\n                row_exprs[this.column_count-1]\n            ]);\n            new_column_count++;\n        }\n        else\n            new_element_exprs = [...this.element_exprs];\n        if(this.row_count > 1) {\n            let inserted_row_exprs = [make_cell(\"\\\\vdots\")];\n            for(let i = 0; i < this.column_count-2; i++)\n                inserted_row_exprs.push(make_cell(''));\n            if(this.column_count > 1)\n                inserted_row_exprs.push(make_cell(\"\\\\ddots\"), make_cell(\"\\\\vdots\"));\n            new_element_exprs.splice(this.row_count-1, 0, inserted_row_exprs);\n            new_row_count++;\n        }\n        // TODO: preserve row/column separators\n        return new ArrayExpr(this.array_type, new_row_count, new_column_count, new_element_exprs);\n    }\n\n    // Return a new ArrayExpr with rows and columns interchanged.\n    // NOTE: is_matrix() should be true before calling this.\n    transposed() {\n        let new_element_exprs = [];\n        for(let i = 0; i < this.column_count; i++)\n            new_element_exprs.push(this.element_exprs.map(\n                row_exprs => this._transpose_cell(row_exprs[i])));\n        return new ArrayExpr(\n            this.array_type, this.column_count, this.row_count, new_element_exprs,\n            this.column_separators, this.row_separators);\n    }\n\n    // When transposing a matrix, we generally want to flip vertical and horizontal ellipses\n    // within the cells.\n    _transpose_cell(cell_expr) {\n        if(cell_expr.expr_type() === 'text') {\n            switch(cell_expr.text) {\n            case \"\\\\vdots\": return new TextExpr(\"\\\\cdots\");\n            case \"\\\\cdots\": return new TextExpr(\"\\\\vdots\");\n            default: break;\n            }\n        }\n        return cell_expr;\n    }\n\n    // Return an array of 1xN ArrayExprs, one for each row in this matrix.\n    split_rows() {\n        return this.element_exprs.map(\n            row_exprs => new ArrayExpr(\n                this.array_type, 1, this.column_count, [row_exprs],\n                this.column_separators, null));\n    }\n\n    // Return a copy with a changed row or column separator at the specified location.\n    // 'index'=0 means right after the first row or column.\n    // 'index'=null means apply separators to ALL rows or columns.\n    // 'type' is one of: [null, 'solid', 'dashed'].\n    // If 'toggle' is true, that indicates that if the current separator is already\n    // of the requested type, the separator will be turned off instead.\n    with_separator(is_column, index, type, toggle) {\n        const row_separators = [...this.row_separators];\n        const column_separators = [...this.column_separators];\n        const separators = is_column ? column_separators : row_separators;\n        const size = is_column ? this.column_count : this.row_count;\n        if(index === null) {\n            if(toggle && separators.every(s => s === type))\n                type = null;\n            for(let i = 0; i < size-1; i++)\n                separators[i] = type;\n        }\n        else {\n            if(index < 0 || index >= size-1)\n                return this;  // out of bounds\n            if(toggle && separators[index] === type)\n                type = null;\n            separators[index] = type;\n        }\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, this.element_exprs,\n            row_separators, column_separators);\n    }\n\n    emit_latex(emitter) {\n        // Matrices with row or column separators require special handling in LaTeX.\n        if(this.is_matrix() &&\n           !(this.column_separators.every(s => s === null) &&\n             this.row_separators.every(s => s === null)))\n            return this._emit_array_with_separators(emitter);\n\n        emitter.begin_environment(this.array_type);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0)\n                emitter.row_separator();\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment(this.array_type);\n    }\n\n    // This is a matrix with at least one column separator specified.\n    // Unfortunately, with LaTeX/KaTeX, the {array} environment has to be used\n    // which doesn't support the surrounding matrix delimiters, so we have to\n    // explicitly put out the delimiters here.  But this also throws off the matrix\n    // spacing - \\kern is used to compensate for that.  But the spacing after \\kern\n    // is too small to accomodate horizontal rules (row separators) so if those are\n    // present, the (default) larger spacing is used.\n    _emit_array_with_separators(emitter) {\n        // Determine which delimiters to explicitly emit based on the matrix type.\n        let left_delim = null, right_delim = null;\n        switch(this.array_type) {\n        case 'bmatrix': left_delim = '['; right_delim = ']'; break;\n        case 'Bmatrix': left_delim = \"\\\\{\"; right_delim = \"\\\\}\"; break;\n        case 'matrix': left_delim = null; right_delim = null; break;\n        case 'pmatrix': left_delim = '('; right_delim = ')'; break;\n        case 'vmatrix': left_delim = right_delim = '|'; break;\n        case 'Vmatrix': left_delim = right_delim = \"\\\\Vert\"; break;\n        default: break;\n        }\n\n        // Assemble the LaTeX column separator \"specification\" string\n        // (the {c:c:c} part in: \\begin{array}{c:c:c}).\n        let pieces = ['{'];\n        for(let i = 0; i < this.column_count; i++) {\n            pieces.push('c');  // centered (only mode that's supported currently)\n            if(i < this.column_count-1) {\n                const s = this.column_separators[i];\n                if(s === 'solid') pieces.push('|');\n                else if(s === 'dashed') pieces.push(':');\n            }\n        }\n        pieces.push('}');\n        const column_layout_string = pieces.join('');\n\n        if(left_delim) {\n            emitter.command('left');\n            emitter.text_or_command(left_delim);\n        }\n        const has_row_separators = !this.row_separators.every(s => s === null);\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        emitter.begin_environment('array', column_layout_string);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0) {\n                emitter.row_separator();\n                const separator = this.row_separators[row_index-1];\n                if(separator) {\n                    if(separator === 'solid') emitter.command('hline')\n                    else if(separator === 'dashed') emitter.command('hdashline');\n                    emitter.text(\"\\n\");\n                }\n            }\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment('array');\n        if(!has_row_separators)\n            emitter.text_or_command(\"\\\\kern-5pt\");\n        if(right_delim) {\n            emitter.command('right');\n            emitter.text_or_command(right_delim);\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.element_exprs.forEach(\n            row_exprs => row_exprs.forEach(expr => expr.visit(fn)));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        const new_element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(\n                expr => expr.substitute_expr(old_expr, new_expr)));\n        return new ArrayExpr(\n            this.array_type, this.row_count, this.column_count, new_element_exprs,\n            this.row_separators, this.column_separators);\n    }\n}\n\n\n// Represents an entry in the stack or document.\nclass Item {\n    // Used for React collection keys.  Each entry in a React component list is\n    // supposed to have a unique ID.\n    // NOTE: iOS Safari doesn't seem to like static variables like this?\n    // As a workaround, this will be initialized after the class definition instead.\n    //static serial_number = 1;\n    static next_serial() { return Item.serial_number++; }\n\n    static from_json(json) {\n        switch(json.item_type) {\n        case 'expr':\n            return new ExprItem(\n                Expr.from_json(json.expr),\n                json.tag_expr ? Expr.from_json(json.tag_expr) : null);\n        case 'text':\n            return new TextItem(\n                json.elements.map(element_json => TextItemElement.from_json(element_json)),\n                !!json.is_heading);\n\tcase 'code':\n\t    return new CodeItem(json.language, json.source);\n        default:\n            return TextItem.from_string('invalid item type ' + json.item_type);\n        }\n    }\n\n    // // Create an appropriate Item subclass instance for the given string.\n    // // If string is wrapped in $$ pairs, it's treated as an ExprItem containing raw LaTeX code.\n    // // Otherwise, it's treated as Markdown text.\n    // static from_string(string) {\n    //     string = (string || '').trim();\n    //     // NOTE: .slice(2) here is to avoid pathological cases '$$', '$$$'\n    //     if(string.startsWith('$$') && string.slice(2).endsWith('$$')) {\n    //         const latex = string.slice(2, -2);\n    //         return new ExprItem(new TextExpr(latex));\n    //     }\n    //     else\n    //         return new MarkdownItem(string);\n    // }\n    \n    constructor() {\n        this.serial = Item.next_serial();\n    }\n\n    react_key(prefix) { return prefix + '_' + this.serial; }\n\n    // Subclasses need to override these:\n    item_type() { return '???'; }\n    to_json() { return {}; }\n    to_text() { return '???'; }\n\n    // Return a new Item of the same type and contents (shallow copy) but with a new serial_number.\n    // This is mainly needed for React, which needs a distinct React key for each item in\n    // a list (like the list of stack items).  Things like 'dup' that can duplicate objects\n    // need to make sure to use clone() so that every Item in the stack/document is distinct.\n    clone() { return null; }\n}\n\n// iOS Safari workaround\nItem.serial_number = 1;\n\n\n// Represents a math expression (Expr instance) in the stack or document.\nclass ExprItem extends Item {\n    // tag_expr is an optional tag shown to the right of the item.\n    constructor(expr, tag_expr) {\n        super()\n        this.expr = expr;\n        this.tag_expr = tag_expr;\n    }\n\n    item_type() { return 'expr'; }\n\n    to_json() {\n        let json = {item_type: 'expr', expr: this.expr.to_json()};\n        if(this.tag_expr) json.tag_expr = this.tag_expr.to_json();\n        return json;\n    }\n\n    to_text() { return this.expr.to_text(); }\n    clone() { return new ExprItem(this.expr, this.tag_expr); }\n    as_bold() { return new ExprItem(this.expr.as_bold(), this.tag_expr); }\n}\n\n\n// A TextItem contains a list of TextItemElement subclass instances.\n//   - TextItemExprElement - wraps a Expr object to be rendered inline with the text\n//   - TextItemTextElement - a string of text to be rendered as \\text{...} command(s)\n//   - TextItemRawElement - a string of text to be rendered directly (mostly a special\n//     case to support combining math and text with infix operators)\nclass TextItemElement {\n    static from_json(json) {\n        if(json.expr)\n            return new TextItemExprElement(Expr.from_json(json.expr));\n        else if(json.text)\n            return new TextItemTextElement(json.text, !!json.is_bold);\n        else\n            return new TextItemRawElement(json.raw);\n    }\n\n    is_text() { return false; }\n    is_expr() { return false; }\n    is_raw() { return false; }\n}\n\n\nclass TextItemTextElement extends TextItemElement {\n    // Bold font is handled specially for text items.\n    // Within a \\text{...}, bold is switched on and off via \\bf{} and \\rm{} commands.\n    constructor(text, is_bold) {\n        super();\n        this.text = text;\n        this.is_bold = !!is_bold;\n    }\n\n    is_text() { return true; }\n    as_bold() { return new TextItemTextElement(this.text, true); }\n\n    to_json() {\n        let json = { 'text': this.text };\n        if(this.is_bold) json.is_bold = true;\n        return json;\n    }\n\n    // TODO: respect is_bold here\n    to_text() { return this.text; }\n\n    to_latex() {\n        // This is a little messy because of how KaTeX handles line breaks.\n        // Normally, breaks are only allowed after operators like +, but when\n        // rendering TextItems, we want to allow breaks after each word.\n        // As a workaround, a separate \\text{...} command is created for each\n        // word followed by \\allowbreak commands.  \\allowbreak does not work\n        // inside the actual \\text{...}, otherwise we could presumably just output\n        // \\text{word1\\allowbreak word2\\allowbreak}.\n        const tokens = this.text.split(/ +/);\n        let pieces = [];\n        for(let i = 0; i < tokens.length; i++) {\n            pieces.push(\"\\\\text{\");\n            if(this.is_bold)\n                pieces.push(\"\\\\bf{}\");\n            pieces.push(this._latex_escape(tokens[i]));\n            if(i < tokens.length-1)\n                pieces.push(' ');  // preserve spacing between words\n            pieces.push(\"}\\\\allowbreak \");\n        }\n        return pieces.join('');\n    }\n\n    // Special escape sequences are needed within \\text{...} commands.\n    // This is a quirk of TeX/LaTeX.\n    _latex_escape(text) {\n        // TODO: make this table a global (or switch statement) so it doesn't constantly get remade\n        // NOTE: not sure how to properly get ^ and ~ inside \\text{...} with KaTeX.\n        // Fortunately, \\char\" always works.\n        const replacements = {\n            '_': \"\\\\_\",\n            '^': \"\\\\char\\\"005e{}\",\n            '%': \"\\\\%\",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\char\\\"223c{}\",\n            \"\\\\\": \"\\\\textbackslash \"\n        };\n        return text.replaceAll(/[_^%$&#}{~\\\\]/g, match => replacements[match]);\n    }\n}\n\nclass TextItemExprElement extends TextItemElement {\n    constructor(expr) { super(); this.expr = expr; }\n    is_expr() { return true; }\n    as_bold() { return new TextItemExprElement(this.expr.as_bold()); }\n    to_json() { return { 'expr': this.expr.to_json() }; }\n    to_text() { return '$' + this.expr.to_latex() + '$'; }\n    to_latex() { return this.expr.to_latex(); }\n}\n\n\n// Represents a \"raw\" piece of LaTeX text (similar to TextExpr) within a TextItem.\n// This is used for things like combining a TextItem and ExprItem with an infix operator.\n// TextItemTextElement can't be used for the infix itself because we don't want to wrap it\n// in a \\text{...} and we don't want to escape the operator's actual LaTeX command.\nclass TextItemRawElement extends TextItemElement {\n    constructor(string) { super(); this.string = string; }\n    is_raw() { return true; }\n    as_bold() { return this; }\n    to_json() { return { 'raw': this.string }; }\n    to_text() { return this.string; }\n    to_latex() { return this.string; }\n    is_explicit_space() { return this.string === \"\\\\,\"; }\n}\n\n\nclass TextItem extends Item {\n    static from_expr(expr) { return new TextItem([new TextItemExprElement(expr)]); }\n    static from_string(string) { return new TextItem([new TextItemTextElement(string)]); }\n    static empty_item() { return new TextItem([], true); }\n\n    // Like from_string, but if the string contains \"[]\" sequences, these are parsed out\n    // and converted into PlaceholderExpr placeholders.\n    static from_string_with_placeholders(string) {\n        const pieces = string.split('[]');\n        let elements = [];\n        for(let i = 0; i < pieces.length; i++) {\n            elements.push(new TextItemTextElement(pieces[i]));\n            if(i < pieces.length-1)\n                elements.push(new TextItemExprElement(new PlaceholderExpr()));\n        }\n        return new TextItem(elements);\n    }\n\n    // item1/2 can each be TextItems or ExprItems.\n    static concatenate_items(item1, item2, separator_text) {\n        if(item1.item_type() === 'expr') item1 = TextItem.from_expr(item1.expr);\n        if(item2.item_type() === 'expr') item2 = TextItem.from_expr(item2.expr);\n        const elements = item1.elements.concat(\n            separator_text ? [new TextItemRawElement(separator_text)] : [],\n            item2.elements);\n        // Coalesce adjacent elements.  Rules are:\n        //   - Adjacent TextElements are concatenated directly as long as their is_bold flags match.\n        //   - A RawElement representing an explicit space character (\\,) is absorbed into an\n        //     adjacent TextElement as a normal space character (this is to make the spacing\n        //     less weird when attaching a text and expression via an infix space).\n        let merged_elements = [elements[0]];\n        for(let i = 1; i < elements.length; i++) {\n            const last_index = merged_elements.length-1;\n            const last_merged_element = merged_elements[last_index];\n            if(last_merged_element.is_text() && elements[i].is_text() &&\n               last_merged_element.is_bold === elements[i].is_bold) {\n                // Two adjacent TextElements with the same is_bold flag.\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + elements[i].text, elements[i].is_bold);\n            }\n            else if(last_merged_element.is_raw() && last_merged_element.is_explicit_space() &&\n                    elements[i].is_text()) {\n                // raw space + TextElement\n                merged_elements[last_index] = new TextItemTextElement(\n                    ' ' + elements[i].text,\n                    elements[i].is_bold);\n            }\n            else if(last_merged_element.is_text() &&\n                    elements[i].is_raw() && elements[i].is_explicit_space()) {\n                // TextElement + raw space\n                merged_elements[last_index] = new TextItemTextElement(\n                    last_merged_element.text + ' ',\n                    last_merged_element.is_bold);\n            }\n            else {\n                // Any other combinations are left alone.\n                merged_elements.push(elements[i]);\n            }\n        }\n        return new TextItem(merged_elements, item1.is_heading || item2.is_heading);\n    }\n\n    constructor(elements, is_heading) {\n        super();\n        this.elements = elements;\n        this.is_heading = !!is_heading;\n    }\n\n    item_type() { return 'text'; }\n\n    to_json() {\n        let json = {\n            item_type: 'text',\n            elements: this.elements.map(element => element.to_json())\n        };\n        // avoid lots of useless is_heading: false in the JSON\n        if(this.is_heading) json.is_heading = true;\n        return json;\n    }\n\n    // Empty TextItems are displayed as \"separator lines\" (visually, the underlined part\n    // of an ordinary section header).  Currently empty TextItems can only be created by\n    // the ['][=] command, and they are always created with is_heading=true.\n    // There is a slight corner case here if is_header flag is turned off via [/][\"].\n    // That case \"should\" display as a truly empty item, but for now we avoid this by\n    // just disallowing turning off the is_header flag in [/][\"] (do_toggle_is_heading).\n    is_empty() { return this.elements.length === 0; }\n\n    to_text() {\n\tif(this.is_empty())\n\t    return \"\\\\rule\";\n\telse\n\t    return this.elements.map(element => element.to_text()).join('');\n    }\n    \n    to_latex() { return this.elements.map(element => element.to_latex()).join(''); }\n\n    clone() { return new TextItem(this.elements, this.is_heading); }\n\n    // If this TextItem is simple enough, return a string representation suitable\n    // for editing using the minieditor.  \"Simple enough\" currently means that there\n    // are no Exprs mixed into the text, with the exception of PlaceholderExprs which are\n    // rendered as [].  Bold flags are stripped from the text as well.\n    // If this TextItem is not simple, null is returned indicating that it's\n    // \"uneditable\" with the minieditor.\n    as_editable_string() {\n\tlet pieces = [];\n\tfor(let i = 0; i < this.elements.length; i++) {\n\t    const elt = this.elements[i];\n\t    if(elt.is_text())\n\t\tpieces.push(elt.text);\n\t    else if(elt.is_raw()) {\n\t\t// Only basic \"explicit spaces\" are allowed; otherwise it's\n\t\t// probably a LaTeX command.\n\t\tif(elt.is_explicit_space())\n\t\t    pieces.push(' ');\n\t\telse return null;\n\t    }\n\t    else if(elt.is_expr()) {\n\t\t// Only top-level PlaceholderExprs are allowed.\n\t\tif(elt.expr.expr_type() === 'placeholder')\n\t\t    pieces.push('[]');\n\t\telse return null;\n\t    }\n\t}\n\treturn pieces.join('');\n    }\n\n    // Return a clone of this with all elements bolded.\n    as_bold() {\n        return new TextItem(\n            this.elements.map(element => element.as_bold()),\n            this.is_heading);\n    }\n\n    // If there is any PlaceholderExpr among the elements in this TextItem, substitute\n    // the first one for substitution_expr and return the new TextItem.\n    // If there are no PlaceholderExprs available, return null.\n    try_substitute_placeholder(substitution_expr) {\n        let new_elements = [...this.elements];\n        for(let i = 0; i < new_elements.length; i++) {\n            if(new_elements[i].is_expr()) {\n                const placeholder_expr = new_elements[i].expr.find_placeholder();\n                if(placeholder_expr) {\n                    const new_expr = new_elements[i].expr.substitute_expr(placeholder_expr, substitution_expr);\n                    new_elements[i] = new TextItemExprElement(new_expr);\n                    return new TextItem(new_elements, this.is_heading);\n                }\n            }\n        }\n        return null;\n    }\n}\n\n\nclass CodeItem extends Item {\n    static from_latex_string(s) { return new CodeItem('latex', s); }\n\n    constructor(language, source) {\n\tsuper();\n\tthis.language = language;\n\tthis.source = source;\n    }\n\n    item_type() { return 'code'; }\n\n    to_json() {\n\treturn {\n\t    item_type: 'code',\n\t    language: this.language,\n\t    source: this.source\n\t};\n    }\n\n    to_latex() { return '???'; }\n\n    clone() { return new CodeItem(this.language, this.source); }\n\n    as_bold() { return this.clone(); }\n}\n\n\n// NOTE: All stack operations return a new Stack with the modified\n// items, leaving the original untouched.\nclass Stack {\n    static from_json(json) {\n        return new Stack(\n            json.items.map(item_json => Item.from_json(item_json)));\n    }\n    \n    constructor(items) { this.items = items; }\n\n    depth() { return this.items.length; }\n    check(n) { return this.depth() >= n; }\n\n    // Check that at least n items are available and that they are all ExprItems\n    check_exprs(n) {\n        if(!this.check(n)) return false;\n        for(let i = 0; i < n; i++)\n            if(this.items[this.items.length-1-i].item_type() !== 'expr')\n                return false;\n        return true;\n    }\n\n    // Fetch item at position n (stack top = 1, next = 2, etc)\n    peek(n) {\n        if(!this.check(1)) this.underflow();\n        return this.items[this.items.length - n];\n    }\n\n    // Returns [new_stack, item1, item2, ...]\n    pop(n) {\n        if(n === undefined) n = 1;\n        if(!this.check(n)) this.underflow();\n        return this._unchecked_pop(n);\n    }\n\n    // Like pop(n) but all the items have to be ExprItems, and the wrapped Expr\n    // instances are returned, not the ExprItems.\n    pop_exprs(n) {\n        if(!this.check(n)) this.underflow();\n        if(!this.check_exprs(n)) this.type_error();\n        const [new_stack, ...items] = this._unchecked_pop(n);\n        return [new_stack, ...items.map(item => item.expr)];\n    }\n\n    pop_arrays(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array'))\n            return [new_stack, ...exprs];\n        else this.type_error();\n    }\n\n    pop_matrices(n) {\n        const [new_stack, ...array_exprs] = this.pop_arrays(n);\n        if(array_exprs.every(expr => expr.is_matrix()))\n            return [new_stack, ...array_exprs];\n        else this.type_error();\n    }\n\n    _unchecked_pop(n) {\n        return [new Stack(this.items.slice(0, -n))].concat(this.items.slice(-n));\n    }\n    \n    push_all(items) {\n        if(!items.every(item => item instanceof Item))\n            throw new Error('pushing invalid item onto stack');\n        return new Stack(this.items.concat(items));\n    }\n    \n    push_all_exprs(exprs) { return this.push_all(exprs.map(expr => new ExprItem(expr))); }\n    push(item) { return this.push_all([item]); }\n    push_expr(expr) { return this.push_all_exprs([expr]); }\n\n    // Return a new Stack with cloned copies of all the items.\n    // The cloned items will have new React IDs, which will force a re-render of the items.\n    // This is used for things like changing between display and inline math mode, where\n    // the item content doesn't change but the way it's rendered does.\n    clone_all_items() { return new Stack(this.items.map(item => item.clone())); }\n\n    underflow() { throw new Error('stack_underflow'); }\n    type_error() { throw new Error('stack_type_error'); }\n\n    to_json() {\n        return {\n            object_type: 'stack',\n            items: this.items.map(item => item.to_json())\n        };\n    }\n}\n\n\n// NOTE: Like Stack, all Document operations are non-destructive and return a new\n// Document reflecting the changes.\nclass Document {\n    static from_json(json) {\n        return new Document(\n            json.items.map(item_json => Item.from_json(item_json)),\n            json.selection_index || 0);\n    }\n\n    // NOTE: selection_index can be in the range 0..items.length (inclusive).\n    constructor(items, selection_index) {\n        this.items = items || [];\n        this.selection_index = selection_index;\n    }\n\n    selected_item() {\n        if(this.selection_index > 0)\n            return this.items[this.selection_index-1];\n        else\n            return null;\n    }\n\n    // Insert a new item below the current selection, and select the inserted item.\n    // Returns a modified Document; does not alter this one.\n    insert_item(new_item) {\n        const index = this.selection_index;\n        const new_items = this.items.slice(0, index).concat([new_item], this.items.slice(index));\n        return new Document(new_items, index+1);\n    }\n\n    // Return the new Document if the selection was deleted successfully.\n    // Selects the item that was before this one (or select the 'document top' if this was the first).\n    // Return null if the selection is \"invalid\" (e.g., empty document).\n    delete_selection() {\n        const index = this.selection_index;\n        if(index > 0) {\n            const new_items = this.items.slice(0, index-1).concat(this.items.slice(index));\n            return new Document(new_items, index-1);\n        }\n        else\n            return null;\n    }\n\n    move_selection_by(offset) {\n        let new_index = this.selection_index + offset;\n        if(new_index < 0) new_index = 0;\n        if(new_index > this.items.length) new_index = this.items.length;\n        return new Document(this.items, new_index);\n    }\n\n    // If there is a current selection, move it by the given offset.\n    // Returns the changed document if anything was done.\n    shift_selection_by(offset) {\n        const item = this.selected_item();\n        if(!item ||\n           this.selection_index + offset <= 0 ||\n           this.selection_index + offset > this.items.length)\n            return null;\n        else\n            return this.delete_selection().move_selection_by(offset).insert_item(item);\n    }\n\n    // See Stack.clone_all_items()\n    clone_all_items() {\n        return new Document(this.items.map(item => item.clone()), this.selection_index);\n    }\n\n    to_json() {\n        return {\n            object_type: 'document',\n            items: this.items.map(item => item.to_json()),\n            selection_index: this.selection_index\n        };\n    }\n\n    to_text() {\n        return this.items.map(item => item.to_text()).join(\"\\n\\n\");\n    }\n}\n\n\nexport {\n    Keymap, Settings, AppState, UndoStack, DocumentStorage, ImportExportState, FileManagerState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    Item, ExprItem, TextItem, CodeItem,\n    Stack, Document\n};\n\n","\nimport {\n    AppState, Document, Stack,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, PlaceholderExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    ExprItem, TextItem, CodeItem\n} from './Models';\n\n\n// This acts as a sort of extension to the main App component.\n// TODO: rename -> EditorActions or something\nclass InputContext {\n    constructor(app_component, settings) {\n        this.app_component = app_component;\n        this.settings = settings;\n\n        // Current keymap mode.\n        this.mode = 'base';\n\n        // do_* actions can set this to switch into a new mode after the action (see switch_to_mode()).\n        this.new_mode = null;\n\n        // do_* actions can set this to update the document state.\n        this.new_document = null;\n        \n        this.files_changed = false;\n        this.file_saved = false;\n\n        // If set, this will be displayed as a transient notification in\n        // the stack area.  Cleared after every keypress.\n        this.notification_text = null;\n\n        // Special indicator to help control the undo stack:\n        //    null - save state to undo stack after this action as normal\n        //    'undo' - request an undo\n        //    'redo' - request a redo of saved undo states\n        //    'suppress' - perform action as normal, but don't save state to the undo state\n        //                 (used for 'minor' actions that don't warrant undo tracking)\n        //    'clear' - undo stack will be reset (e.g. when loading a new document)\n        this.perform_undo_or_redo = null;\n\n        // Current prefix argument for commands like Swap; can be one of:\n        //   null - no current prefix argument\n        //   >= 1 - normal prefix argument\n        //   -1   - \"all\" prefix argument (apply to all available items)\n        // Prefix arguments are cleared after any normal command is executed\n        // or if there's an error.  \"Normal\" command means anything that's not\n        // another prefix argument key.\n        this.prefix_argument = null;\n\n        // do_* actions can set this to true to keep the prefix_argument from being reset after the action.\n        this.preserve_prefix_argument = false;\n\n        // If non-null, text-entry mode is active and the entry line will appear at the\n        // bottom of the stack panel.\n        this.text_entry = null;\n\n        // Type of text entry currently being performed.\n        //   'text_entry': [\"] - text entry will become a TextItem (a section heading if Shift+Enter is used)\n        //   'math_text_entry': [\\] - text entry will become a ExprItem with either normal italic math text\n        //               (if Enter is used) or \\mathrm roman math text (if Shift+Enter)\n        //   'latex_entry': [\\][\\] - text entry will become a ExprItem with an arbitrary LaTeX command\n        this.text_entry_mode = null;\n\n\t// If this is set, this is the Item that is currently being edited.  While it's being edited,\n\t// it doesn't exist on the stack and is temporarily held here.  If the editor is cancelled,\n\t// this item will be placed back on the stack.\n\tthis.text_entry_edited_item = null;\n\n        // Tracks multi-part custom_delimiters commands.\n        this.custom_delimiters = {};\n    }\n\n    // Returns [was_handled, new_app_state]\n    // NOTE: was_handled just indicates that a keybinding was found; it doesn't necessarily mean\n    // that the command succeeded without error.\n    handle_key(app_state, key) {\n        if(key === 'Shift' || key === 'Alt' || key === 'Control')\n            return [false, app_state];\n\n        // If the popup panel is active, always use its dedicated keymap.\n        const effective_mode = this.settings.popup_mode || this.mode;\n        const command = this.settings.current_keymap.lookup_binding(effective_mode, key);\n        if(command) {\n            this.last_keypress = key;\n            const new_app_state = this.process_command(command, app_state);\n            return [true, new_app_state || app_state];\n        }\n        else\n            return [false, app_state];\n    }\n\n    // Returns the new AppState, or null if anything failed.\n    process_command(command, app_state) {\n        // Command strings are of the form:\n        //   'piece1;piece2;piece3'\n        // where the pieces are subcommands to be executed as a batch.\n        // Each piece in turn is a space-separated list where the first item\n        // is the command name and the remainder are arguments to the command.\n        // To put a literal semicolon into a command, write out 'semicolon'.\n        const commands = command.split(';').map(\n            piece => piece.split(' ').map(\n                token => token.replaceAll('semicolon', ';')));\n        return this.process_command_batch(commands, app_state);\n    }\n\n    // Process a batch of commands as a unit, returning the new AppState (or null if any of them failed).\n    // Each command is of the form [command_name, param1, param2, ...]\n    process_command_batch(commands, app_state) {\n        this.perform_undo_or_redo = null;\n        for(let i = 0; i < commands.length; i++) {\n            const [command_name, ...parameters] = commands[i];\n            const handler_function = this['do_' + command_name];\n            if(!handler_function)\n                return null;\n            try {\n                // Set up context variables for the handler functions to use:\n                this.app_state = app_state;\n\n                // TODO: maybe have this.changed.mode, this.changed.document etc.\n\n                // Watch to see if the handler sets new_mode.  If it does, switch to that\n                // mode after the command is finished, but otherwise switch back to base mode.\n                this.new_mode = null;\n\n                // The handler function will set this if the document changes.\n                // (Stack changes are expected to be returned by the handler function.)\n                this.new_document = null;\n\n                // Likewise this will be set to true if anything changed about the file list / file selection.\n                this.files_changed = false;  // TODO: rename -> selected_file_changed\n\n                // This will be set to true if the current file was saved by this action.\n                // This indicates that the app state's dirty flag should be cleared.\n                this.file_saved = false;\n\n                // If this is set to true, the prefix_argument will be kept as it as (otherwise it's reset to\n                // null after each action).\n                this.preserve_prefix_argument = false;\n\n                this.notification_text = null;\n\n                // Execute the handler and assemble the new state.\n                const new_stack = (handler_function.bind(this))(app_state.stack, ...parameters);\n                let new_app_state = new AppState(\n                    new_stack || app_state.stack,\n                    this.new_document || app_state.document\n                );\n                new_app_state.is_dirty = app_state.is_dirty || !new_app_state.same_as(app_state);\n                if(this.file_saved)  // Current file was saved; explicitly clear the dirty flag.\n                    new_app_state.is_dirty = false;\n                app_state = new_app_state;\n\n                // Switch back into base mode if the mode was not explicitly set by the handler.\n                this.mode = this.new_mode || 'base';\n\n                // Clear the prefix argument if the last command was not explicitly 'prefix_argument'.\n                if(!this.preserve_prefix_argument)\n                    this.prefix_argument = null;\n            } catch(e) {\n                if(e.message === 'stack_underflow' || e.message === 'stack_type_error' ||\n                   e.message === 'prefix_argument_required') {\n                    this.error_flash_stack();\n                    this.perform_undo_or_redo = null;\n                    this.mode = 'base';\n                    this.prefix_argument = null;\n                    return null;\n                }\n                else throw e;\n            }\n            finally {\n                // Avoid holding references longer than needed.\n                this.app_state = null;\n                this.new_document = null;\n            }\n        }\n        return app_state;\n    }\n\n    switch_to_mode(new_mode) {\n        this.new_mode = new_mode;\n    }\n\n    error_flash_element(dom_element) {\n        dom_element.classList.remove('errorflash');\n        // eslint-disable-next-line no-unused-expressions\n        dom_element.offsetWidth;  // force reflow\n        dom_element.classList.add('errorflash');\n    }\n\n    error_flash_stack() {\n        if(this.settings.layout.stack_split === 0)\n            return this.error_flash_document();\n        else\n            return this.error_flash_element(document.getElementById('stack_panel'));\n    }\n\n    error_flash_document() {\n        if(this.settings.layout.stack_split === 100)\n            return this.error_flash_stack();\n        else\n            return this.error_flash_element(document.getElementById('document_panel'));\n    }\n\n    clear_all_flashes() {\n\t['stack_panel', 'document_panel'].forEach(elt_id =>\n\t    document.getElementById(elt_id).classList.remove('errorflash'));\n        // for(let elt_id = 0; elt_id < elt_ids.length; elt_id++) {\n        //     let elt = document.getElementById(elt_ids[elt_id]);\n        //     elt.classList.remove('errorflash');\n        // }\n    }\n\n    notify(text) { this.notification_text = text; }\n\n    // If the base already has a subscript, and is_superscript is true, the superscript\n    // is placed into the existing base.  Otherwise, a new subscript/superscript node\n    // is created.  A similar rule applies if is_superscript is false.\n    _build_subscript_superscript(base_expr, child_expr, is_superscript) {\n        // Check to see if we can slot the child into an empty sub/superscript \"slot\".\n        if(base_expr.expr_type() === 'subscriptsuperscript' &&\n           ((base_expr.subscript_expr === null && !is_superscript) ||\n            (base_expr.superscript_expr === null && is_superscript))) {\n            // There's \"room\" for it in this expr.\n            return new SubscriptSuperscriptExpr(\n                base_expr.base_expr,\n                (is_superscript ? base_expr.subscript_expr : child_expr),\n                (is_superscript ? child_expr : base_expr.superscript_expr));\n        }\n        else {\n            // Create a new expr instead.  The base will be parenthesized if\n            // it's a low-precedence infix expression.\n            base_expr = DelimiterExpr.autoparenthesize(base_expr);\n\n            // This will automatically parenthesize fractions like x/y -> (x/y)^2.\n            // This line can be removed if this becomes undesired behavior.\n            base_expr = DelimiterExpr.autoparenthesize_frac(base_expr);\n\n            return new SubscriptSuperscriptExpr(\n                base_expr,\n                (is_superscript ? null : child_expr),\n                (is_superscript ? child_expr : null));\n        }\n    }\n\n    // Second-to-top stack item becomes the base, while the stack top becomes the\n    // subscript or superscript depending on 'is_superscript'.\n    make_subscript_superscript(stack, is_superscript) {\n        const [new_stack, base_expr, child_expr] = stack.pop_exprs(2);\n        const new_expr = this._build_subscript_superscript(base_expr, child_expr, is_superscript);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_subscript(stack) { return this.make_subscript_superscript(stack, false); }\n    do_superscript(stack) { return this.make_subscript_superscript(stack, true); }\n\n    // Add a \\prime to the stack top; this is almost like do_superscript with \\prime\n    // but needs some special handling to coalesce multiple \\prime into a single superscript.\n    do_prime(stack) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        const new_prime_expr = new CommandExpr('prime', []);\n\n        // Check whether the base expr is already of the form x^{\\prime}, x^{\\prime\\prime}, etc.\n        // If so, add an extra \\prime into the superscript.\n        if(base_expr.expr_type() === 'subscriptsuperscript' && base_expr.superscript_expr) {\n            const s = base_expr.superscript_expr;\n            const is_prime_command = expr =>\n                  expr.expr_type() === 'command' &&\n                  expr.operand_count() === 0 && expr.command_name === 'prime';\n            let new_superscript_expr;\n            if(is_prime_command(s))\n                new_superscript_expr = new SequenceExpr([s, new_prime_expr]);\n            else if(s.expr_type() === 'sequence' && s.exprs.every(is_prime_command))\n                new_superscript_expr = new SequenceExpr(s.exprs.concat([new_prime_expr]));\n            else\n                new_superscript_expr = null;\n            if(new_superscript_expr) {\n                const new_expr = new SubscriptSuperscriptExpr(\n                    base_expr.base_expr, base_expr.subscript_expr, new_superscript_expr);\n                return new_stack.push_expr(new_expr);\n            }\n        }\n\n        // Otherwise, adding a prime works just like adding a \\prime superscript.\n        const new_expr = this._build_subscript_superscript(base_expr, new_prime_expr, true);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_mode(stack, new_mode) { this.switch_to_mode(new_mode); }\n\n    do_undo() { this.perform_undo_or_redo = 'undo'; }\n    do_redo() { this.perform_undo_or_redo = 'redo'; }\n\n    do_prefix_argument() {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        this.preserve_prefix_argument = true;\n        let new_prefix_argument = null;\n        if(/^[0-9]$/.test(key)) {\n            const value = parseInt(key);\n            if(this.prefix_argument !== null && this.prefix_argument > 0) {\n                // Multi-digit prefix argument\n                new_prefix_argument = 10*this.prefix_argument + value;\n            }\n            else new_prefix_argument = value;\n        }\n        else if(key === '*')\n            new_prefix_argument = -1;\n        this.prefix_argument = new_prefix_argument;\n    }\n\n    // Convenience function for interpreting the prefix_argument in commands that support it.\n    _get_prefix_argument(default_value, all_value) {\n        if(this.prefix_argument === null)\n            return default_value;\n        else if(this.prefix_argument < 0)\n            return all_value;\n        else\n            return this.prefix_argument;\n    }\n\n    // A nonzero prefix argument is required.\n    // star_ok means that a prefix argument of * is acceptable (defaults to false).\n    _require_prefix_argument(star_ok) {\n        if(this.prefix_argument === null ||\n\t   (star_ok && this.prefix_argument === 0) ||\n\t   (!star_ok && this.prefix_argument <= 0))\n            throw new Error('prefix_argument_required');\n        else\n            return this.prefix_argument;\n    }\n\n    // Duplicate the top N stack items (default=1).\n    do_dup(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.map(item => item.clone());  // keep item serial_numbers unique\n        return new_stack.push_all(items.concat(new_items));\n    }\n\n    // Drop the top N stack items (default=1).\n    do_pop(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack;\n    }\n\n    // Drop the Nth stack item (default=2, i.e.: a b -> b)\n    do_nip(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.slice(1));\n    }\n\n    // Reverse top N stack items (default=2)\n    do_swap(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        items.reverse();\n        return new_stack.push_all(items);\n    }\n\n    // Copy stack top above the current Nth stack item.\n    // Default argument of 2 is: a b -> b a b\n    // Argument of 1 acts as \"dup\".\n    do_tuck(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const last_item = items[items.length-1];\n        return new_stack.push_all([last_item.clone()].concat(items));\n    }\n\n    // Pick the Nth item from the stack and copy it to the stack top.\n    // Default argument of 2 is: a b -> a b a\n    do_over(stack) {\n        const arg = this._get_prefix_argument(2, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        return new_stack.push_all(items.concat([items[0].clone()]));\n    }\n\n    // Rotate N top stack items (default=3: a b c -> b c a)\n    do_rot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(1).concat([items[0]]);\n        return new_stack.push_all(new_items);\n    }\n\n    // Rotate N top stack items backwards (default=3: a b c -> c a b)\n    do_unrot(stack) {\n        const arg = this._get_prefix_argument(3, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        const new_items = items.slice(-1).concat(items.slice(0, -1));\n        return new_stack.push_all(new_items);\n    }\n\n    do_change_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        this.new_document = this.app_state.document.move_selection_by(amount);\n        // this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_shift_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        const new_document = this.app_state.document.shift_selection_by(amount);\n        if(new_document)\n            this.new_document = new_document;\n        else\n            this.error_flash_document();\n    }\n\n    do_save_file(stack) {\n        const file_manager_state = this.app_component.state.file_manager_state;\n        const filename = file_manager_state.current_filename;\n        if(!filename)\n            return this.do_save_file_as(stack);\n        this.app_component.state.document_storage.save_state(\n            this.app_state, filename,\n            () => {\n                this.notify('Saved: ' + filename);\n                this.settings.last_opened_filename = filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving:' + filename)\n        );\n        this.file_saved = true;\n    }\n\n    // TODO: factor with do_save_file\n    do_save_file_as(stack) {\n        let new_filename = window.prompt('Enter the filename to save as', this.settings.current_filename);\n        if(!new_filename)\n            return;\n        let document_storage = this.app_component.state.document_storage;\n        new_filename = document_storage.sanitize_filename(new_filename);\n        document_storage.save_state(\n            this.app_state, new_filename,\n            () => {\n                this.notify('Saved as: ' + new_filename);\n                let file_manager_state = this.app_component.state.file_manager_state;\n                file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving: ' + new_filename)\n        );\n        this.file_saved = true;\n    }\n\n    do_load_selected_file(stack) {\n        const selected_filename = this.app_component.state.file_manager_state.selected_filename;\n        if(!selected_filename)\n            return this.error_flash_document();\n        if(this.app_state.is_dirty) {\n            if(window.confirm(\"The current document has been modified.  Save it now?\")) {\n                // Abort actually loading the new file; otherwise a\n                // race condition between save and load is created due\n                // to document_storage calls being asynchronous.  This\n                // could be worked around by chaining the load after\n                // the save but this is the only place it's a problem.\n                return this.do_save_file(stack);\n            }\n        }\n        this.app_component.start_loading_filename(selected_filename);\n    }\n\n    do_start_new_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        let new_filename = file_manager_state.generate_unused_filename(file_manager_state.current_filename || 'untitled');\n        new_filename = window.prompt('Enter a filename for the new document', new_filename);\n        if(!new_filename) return;\n        new_filename = document_storage.sanitize_filename(new_filename || '');\n        if(!new_filename) {\n            alert('Invalid filename (must only contain letters, numbers and underscores)');\n            return;\n        }\n\n        // Save the current document if needed first.\n        if(file_manager_state.current_filename) {\n            // NOTE: don't put up the notification flash here, unlike with an explicit save_document.\n            document_storage.save_state(this.app_state, file_manager_state.current_filename);\n        }\n\n        // This basically works like loading from a blank file.\n        let new_state = new AppState();\n\n        // // Start the document with a default header showing the filename.\n        // const heading_item = TextItem.from_string(new_filename.replaceAll('_', ' '));\n        // heading_item.is_heading = true;\n        // this.new_document = new_state.document.insert_item(heading_item);\n        this.new_document = new_state.document;\n\n        file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n        this.settings.last_opened_filename = new_filename;\n        this.settings.save();\n        this.perform_undo_or_redo = 'clear';\n        this.notify('Started new file: ' + new_filename);\n        this.files_changed = true;\n        this.file_saved = true;\n        this.do_toggle_popup(new_state.stack, 'files');  // close file manager\n        return new_state.stack;\n    }\n\n    do_select_adjacent_file(stack, offset_string) {\n        const offset = parseInt(offset_string);\n        let file_manager_state = this.app_component.state.file_manager_state;\n        const new_filename = file_manager_state.find_adjacent_filename(file_manager_state.selected_filename, offset);\n        if(new_filename) {\n            file_manager_state.selected_filename = new_filename;\n            this.files_changed = true;\n        }\n    }\n\n    do_delete_selected_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        const filename = file_manager_state.selected_filename;\n        if(!filename) return this.error_flash_document();\n        if(!window.confirm(\"Really delete \\\"\" + filename + \"\\\"?\")) return;\n        document_storage.delete_state(\n            filename,\n            () => {\n                this.notify('Deleted: ' + filename);\n                const new_filename = file_manager_state.find_adjacent_filename(filename, 1);\n                // TODO: might need this.files_changed = true\n                file_manager_state.selected_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error deleting: ' + filename)\n        );\n    }\n\n    // If 'preserve' is set, items are kept on the stack after copying them\n    // into the document.  Otherwise, the items are removed from the stack.\n    do_pop_to_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...items] = stack.pop(arg);\n        let new_document = this.app_state.document;\n        for(let n = 0; n < items.length; n++)\n            new_document = new_document.insert_item(items[n].clone());\n        this.new_document = new_document;\n        return preserve ? new_stack.push_all(items) : new_stack;\n    }\n\n    do_extract_from_document(stack, preserve) {\n        const arg = this._get_prefix_argument(1, this.app_state.document.items.length);\n        if(arg <= 0) return stack;\n        let new_document = this.app_state.document;\n        // Make sure there are enough items above the current document selection to extract.\n        if(new_document.selection_index < arg)\n            return this.error_flash_document();\n        let new_items = [];\n        for(let n = 0; n < arg; n++) {\n            const item = new_document.selected_item();\n            new_document = new_document.delete_selection();\n            new_items.push(item.clone());\n        }\n        new_items.reverse();\n        if(!preserve)\n            this.new_document = new_document;\n        return stack.push_all(new_items);\n    }\n\n    // Clear stack and document.\n    do_reset_all(stack) {\n        this.notify(\"Stack and document cleared\");\n        this.new_document = new Document([], 0);\n        return new Stack([]);\n    }\n\n    do_push_separator(stack) {\n\t// See TextItem.is_empty() comment\n\treturn stack.push(TextItem.empty_item());\n    }\n\n    do_push(stack, text) {\n        // TODO: handle this better\n        text = text || '';  // handle 'push nothing' case\n        if(text.startsWith(\"\\\\\"))\n            return stack.push_expr(new CommandExpr(text.slice(1)));\n        else\n            return stack.push_expr(new TextExpr(text));\n    }\n\n    do_self_push(stack) {\n        return this.do_push(stack, this.last_keypress);\n    }\n\n    do_push_placeholder(stack) {\n        return stack.push_expr(new PlaceholderExpr());\n    }\n\n    // Used for \\mathscr / \\mathcal, which only have uppercase glyphs.\n    // case_type: 'uppercase', 'lowercase'\n    // Stack top should be an ExprItem with a simple TextExpr.\n    do_to_case(stack, case_type) {\n        const convert_fn = string => {\n            switch(case_type) {\n            case 'uppercase': return string.toUpperCase();\n            case 'lowercase': return string.toLowerCase();\n            default: return string;\n            }\n        };\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'text')\n            new_expr = new TextExpr(convert_fn(expr.text));\n        else\n            new_expr = expr;\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Pop arity_string items (default 1) and turn them into an Command expr.\n    do_operator(stack, opname, arity_string = '1') {\n        const arity = parseInt(arity_string);\n        const [new_stack, ...popped_exprs] = stack.pop_exprs(arity);\n        const result_expr = new CommandExpr(opname, popped_exprs)\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Wrap the stack top in an \"empty\" CommandExpr.  This causes the expression's\n    // LaTeX to be rendered inside {} braces which is needed to fix up the spacing for\n    // function applications.  For example: f\\left(x\\right) has extra spacing after\n    // the 'f', but f{\\left(x\\right)} does not.\n    do_wrap_braces(stack) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        const result_expr = new CommandExpr('', [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Like do_operator, but if the stack item is already wrapped in a \\boldsymbol or \\pmb,\n    // unwrap it and re-wrap the font face command inside \\pmb.\n    // e.g. \\boldsymbol{A} -> \\pmb{mathtt{A}}\n    // See also do_make_roman(), which is a special case because \\bold{} creates Roman\n    // bold text without needing \\pmb.\n    do_font_operator(stack, facename) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n           (expr.command_name === 'boldsymbol' || expr.command_name === 'pmb'))\n            new_expr = new CommandExpr(\n                'pmb', [new CommandExpr(facename, [expr.operand_exprs[0]])]);\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                expr.command_name === facename) {\n            // Special case: don't wrap in the same typeface twice consecutively\n            // (don't create \\mathtt{\\mathtt{A}}).  This check should probably be\n            // generalized to strip existing typeface commands but there's not a good\n            // way to do this cleanly yet.\n            new_expr = expr;\n        }\n        else\n            new_expr = new CommandExpr(facename, [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // \\sin{x} etc.  Works similarly to do_operator except the argument is autoparenthesized.\n    // If superscript_text is given, the text is applied as a superscript to the function\n    // itself (not to the argument).\n    // NOTE: if superscript_text starts with '_', it's treated as a subscript instead.\n    do_named_function(stack, funcname, superscript_text) {\n        let [new_stack, arg_expr] = stack.pop_exprs(1);\n        const orig_funcname = funcname;\n        if(superscript_text !== undefined) {\n            // \\sin^2{arg} etc.  This is a little awkward because the \"head\" of the command (\\sin^2) is\n            // no longer a simple LaTeX command like other CommandExprs.  Fortunately, things work out fine\n            // treating it as such by just textually concatenating the superscript (putting in explicit braces\n            // if necessary).  For example: \"sin^2\" or \"sin^{-1}\".\n            let sup_or_sub = '^';\n            if(superscript_text.startsWith('_')) {\n                sup_or_sub = '_';\n                superscript_text = superscript_text.slice(1);\n            }\n            if(superscript_text.length > 1)\n                superscript_text = ['{', superscript_text, '}'].join('');\n            funcname = [funcname, sup_or_sub, superscript_text].join('');\n        }\n        arg_expr = DelimiterExpr.autoparenthesize(arg_expr);\n\n        // \\sech and \\csch are are missing in LaTeX for some reason so they need to be special cased here.\n        let expr;\n        if(orig_funcname === 'sech' || orig_funcname === 'csch')\n            expr = new CommandExpr('operatorname', [new TextExpr(funcname), arg_expr]);\n        else\n            expr = new CommandExpr(funcname, [arg_expr]);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // opname == 'argmax': y x -> \\argmax\\limits_{x} y\n    // If make_operatorname is true, opname is not a built-in LaTeX operator\n    // but is instead wrapped in an \\operatorname{} to simulate it.\n    do_underset_operator(stack, opname, make_operatorname) {\n        const [new_stack, argument_expr, sub_expr] = stack.pop_exprs(2);\n        let command_expr;\n        if(make_operatorname)\n            command_expr = new CommandExpr('operatorname', [new TextExpr(opname)]);\n        else\n            command_expr = new CommandExpr(opname);\n        const limits_expr = new SubscriptSuperscriptExpr(\n            new CommandExpr('limits'), sub_expr);\n        const new_expr = Expr.combine_pair(\n            Expr.combine_pair(command_expr, limits_expr),\n            argument_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Same as do_operator, except if the object the hat is being added to is a literal 'i' or 'j',\n    // or bolded i/j, it's first converted into a \\imath or \\jmath to remove the dot.\n    do_apply_hat(stack, hat_op) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'text' &&\n           (expr.text === 'i' || expr.text === 'j'))\n            expr = new CommandExpr(expr.text === 'i' ? 'imath' : 'jmath');\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                (expr.command_name === 'boldsymbol' || expr.command_name === 'mathbf')) {\n            const inner_expr = expr.operand_exprs[0];\n            if(inner_expr.expr_type() === 'text' &&\n               (inner_expr.text === 'i' || inner_expr.text === 'j'))\n                expr = new CommandExpr(\n                    expr.command_name,\n                    [new CommandExpr(inner_expr.text === 'i' ? 'imath' : 'jmath')]);\n        }\n        const result_expr = new CommandExpr(hat_op, [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    // Wrap expr in \\htmlClass{...}\n    // If it's already wrapped in the given class, unwrap it instead.\n    // If class_name_2 is also provided, this cycles between:\n    //    nothing -> class_name -> class_name_2 -> nothing\n    do_html_class(stack, class_name, class_name_2) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        let new_class_name = null;\n        if(expr.expr_type() === 'command' &&\n           expr.command_name === 'htmlClass' &&\n           expr.operand_count() === 2 &&\n           expr.operand_exprs[0].expr_type() === 'text') {\n            // It's already wrapped in \\htmlClass\n            if(expr.operand_exprs[0].text === class_name)\n                new_class_name = class_name_2;  // might be null\n            expr = expr.operand_exprs[1];  // Strip existing \\htmlClass\n        }\n        else\n            new_class_name = class_name;\n        if(new_class_name)\n            expr = new CommandExpr('htmlClass', [new TextExpr(new_class_name), expr]);\n        return new_stack.push_expr(expr);\n    }\n\n    // For ExprItems, this just wraps the expression in \\boldsymbol (if it's not already wrapped).\n    // For TextItems, the individual components of the text are bolded.\n    do_make_bold(stack) {\n        const [new_stack, item] = stack.pop(1);\n        return new_stack.push(item.as_bold());\n    }\n\n    // This is equivalent to 'operator mathrm' except that if the target is already wrapped in a \\boldsymbol{}\n    // (presumably created by do_make_bold()), this converts it into a \\bold{} which yields a bold Roman glyph.\n    do_make_roman(stack) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr = null;\n        if(expr.expr_type() === 'command' && expr.command_name === 'boldsymbol' && expr.operand_count() === 1)\n            new_expr = new CommandExpr('bold', expr.operand_exprs);\n        else if(expr.expr_type() === 'command' && expr.command_name === 'mathrm')\n            new_expr = expr;\n        else\n            new_expr = new CommandExpr('mathrm', [expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_custom_delimiter(stack, delimiter_type) {\n        this.switch_to_mode('custom_delimiters');\n        if(!delimiter_type) {\n            // Start new sequence\n            this.custom_delimiters = {};\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.left) {\n            // First delimiter (left side)\n            this.custom_delimiters.left = delimiter_type;\n            this.preserve_prefix_argument = true;\n            return;\n        }\n        if(!this.custom_delimiters.right) {\n            // Second delimiter (right side)\n            this.custom_delimiters.right = delimiter_type;\n            if(this.prefix_argument === null || this.prefix_argument <= 1)\n                return this._finish_custom_delimiters(stack);\n            else {\n                // Prefix argument of 2 or more has been entered; wait for 3rd delimiter.\n                this.preserve_prefix_argument = true;\n                return;\n            }\n        }\n        // Third delimiter (middle)\n        this.custom_delimiters.middle = delimiter_type;\n        return this._finish_custom_delimiters(stack);\n    }\n\n    _finish_custom_delimiters(stack) {\n        this.switch_to_mode('base');\n        const d = this.custom_delimiters;\n        let arity = this.prefix_argument || 1;\n        if(arity < 1) arity = 1;\n        const [new_stack, ...exprs] = stack.pop_exprs(arity);\n        const new_expr = new DelimiterExpr(d.left, d.right, d.middle, exprs);\n        this.custom_delimiters = {};\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_toggle_fixed_size_delimiters(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tif(expr.expr_type() === 'delimiter')\n\t    return new_stack.push_expr(expr.as_fixed_size(!expr.fixed_size));\n\telse\n\t    stack.type_error();\n    }\n\n    // opname can be either a \\latex_command or a regular string like '+'\n    // The cases of Expr+Expr and Expr+Text (or Text+Text) are handled separately.\n    do_infix(stack, opname) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr (the usual case).\n            let operator_expr, new_expr;\n            if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n                operator_expr = new CommandExpr(opname.slice(1));\n            else\n                operator_expr = new TextExpr(opname);\n            new_expr = new InfixExpr(operator_expr, left_item.expr, right_item.expr)\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text.\n            const new_item = TextItem.concatenate_items(left_item, right_item, opname);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but joins two expressions with an English phrase\n    // with Roman font and extra spacing (\\quad).\n    do_conjunction(stack, phrase) {\n        const [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            // Expr+Expr\n            const operator_expr = new SequenceExpr([\n                new CommandExpr('quad'),\n                new CommandExpr('text', [new TextExpr(phrase.replaceAll('_', ' '))]),\n                new CommandExpr('quad')]);\n            return new_stack.push_expr(new InfixExpr(operator_expr, left_item.expr, right_item.expr));\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            // Expr+Text or Text+Expr or Text+Text\n            const conjunction_item = TextItem.from_string(' ' + phrase + ' ');\n            const new_item = TextItem.concatenate_items(\n                left_item, TextItem.concatenate_items(conjunction_item, right_item));\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Similar to do_infix but only takes 1 item from the stack and makes a PrefixExpr.\n    do_prefix(stack, opname) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        let operator_expr;\n        if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n            operator_expr = new CommandExpr(opname.slice(1));\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new PrefixExpr(base_expr, operator_expr));\n    }\n\n    do_split_infix(stack) {\n        const [new_stack, infix_expr] = stack.pop_exprs(1);\n        if(infix_expr.expr_type() !== 'infix') {\n            this.error_flash_stack();\n            return;\n        }\n        const split_mode = infix_expr.split;\n        let new_split_mode = null;\n        if(split_mode === 'after') new_split_mode = 'before';\n        else if(split_mode === 'before') new_split_mode = null;\n        else new_split_mode = 'after';\n        const new_infix_expr = infix_expr.with_split_mode(new_split_mode);\n        return new_stack.push_expr(new_infix_expr);\n    }\n\n    // Swap left and right sides of an \"infix\" expression, which can be an\n    // actual InfixExpr or else a DelimiterExpr that has 2 inner expressions,\n    // e.g. <x | y> or \\left. x \\middle/ y \\right.\n    do_swap_infix(stack) {\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tlet new_expr = null;\n\tif(expr.expr_type() === 'infix')\n\t    new_expr = new InfixExpr(\n\t\texpr.operator_expr, expr.right_expr, expr.left_expr, expr.split);\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    new_expr = new DelimiterExpr(\n\t\texpr.left_type, expr.right_type, expr.middle_type,\n\t\t[expr.inner_exprs[1], expr.inner_exprs[0]],\n\t\texpr.fixed_size);\n\tif(new_expr)\n\t    return new_stack.push_expr(new_expr);\n\telse\n\t    return this.error_flash_stack();\n    }\n\n    // Stack one expr above (or below) another via \\overset or \\underset.\n    // (overset_op can be 'overset' or 'underset').\n    // If the base expr is an InfixExpr, the other one is stacked above the infix operator;\n    // otherwise the actual items are stacked.\n    do_overunderset(stack, overset_op) {\n        const [new_stack, base_expr, stacked_expr] = stack.pop_exprs(2);\n        let new_expr;\n        if(base_expr.expr_type() === 'infix') {\n            new_expr = new InfixExpr(\n                new CommandExpr(overset_op, [stacked_expr, base_expr.operator_expr]),\n                base_expr.left_expr, base_expr.right_expr);\n        }\n        else\n            new_expr = new CommandExpr(overset_op, [stacked_expr, base_expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_cancel() {}\n\n    do_concat(stack /*, separator_text*/) {\n        let [new_stack, left_item, right_item] = stack.pop(2);\n        const left_type = left_item.item_type(), right_type = right_item.item_type();\n        if(left_type === 'expr' && right_type === 'expr') {\n            let left_expr = left_item.expr, right_expr = right_item.expr;\n            const new_expr = Expr.combine_pair(left_expr, right_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if((left_type === 'expr' || left_type === 'text') &&\n                (right_type === 'expr' || right_type === 'text')) {\n            const new_item = TextItem.concatenate_items(left_item, right_item /*, separator_text*/);\n            return new_stack.push(new_item);\n        }\n        else\n            return stack.type_error();\n    }\n\n    // Substitute the stack top expression into the first available placeholder marker in the\n    // item second from top.  That item can be either an ExprItem or TextItem.\n    do_substitute_placeholder(stack) {\n        const [new_stack, substitution_expr] = stack.pop_exprs(1);\n        const [new_stack_2, item] = new_stack.pop(1);\n        if(item.item_type() === 'expr') {\n            const original_expr = item.expr;\n            const placeholder_expr = original_expr.find_placeholder();\n            if(placeholder_expr) {\n                const new_expr = original_expr.substitute_expr(placeholder_expr, substitution_expr);\n                return new_stack_2.push_expr(new_expr);\n            }\n        }\n        else if(item.item_type() === 'text') {\n            const new_text_item = item.try_substitute_placeholder(substitution_expr);\n            if(new_text_item)\n                return new_stack_2.push(new_text_item);\n        }\n        return stack.type_error();\n    }\n\n    // Extract either the left or right side of an InfixExpr\n    // (or a DelimiterExpr with 2 inner expressions; cf. do_swap_infix).\n    do_extract_infix_side(stack, which_side) {\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, expr] = stack.pop_exprs(1);\n\tlet extracted_expr = null;\n\tif(expr.expr_type() === 'infix')\n\t    extracted_expr = (which_side === 'right') ? expr.right_expr : expr.left_expr;\n\telse if(expr.expr_type() === 'delimiter' &&\n\t\texpr.inner_exprs.length === 2)\n\t    extracted_expr = (which_side === 'right') ? expr.inner_exprs[1] : expr.inner_exprs[0];\n\tif(extracted_expr) {\n            // NOTE: 'stack' and not 'new_stack' is used here in order to preserve\n            // the original expression on the stack.\n            return stack.push_expr(extracted_expr);\n\t}\n\telse\n\t    return stack.type_error();\n    }\n\n    do_start_text_entry(stack, text_entry_mode, initial_text) {\n        this.text_entry = initial_text || '';\n        this.text_entry_mode = text_entry_mode;\n        this.switch_to_mode(text_entry_mode);\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    do_cancel_text_entry(stack) {\n        this.perform_undo_or_redo = 'suppress';\n        return this.cancel_text_entry(stack);\n    }\n\n    cancel_text_entry(stack) {\n        this.text_entry = null;\n        this.text_entry_mode = null;\n\tif(this.text_entry_edited_item) {\n\t    const item = this.text_entry_edited_item;\n\t    this.text_entry_edited_item = null;\n\t    return stack.push(item);\n\t}\n\telse\n\t    return stack;\n    }\n\n    do_append_text_entry(stack) {\n        const key = this.last_keypress;\n        this.perform_undo_or_redo = 'suppress';\n        this.switch_to_mode(this.mode);\n        if(key.length === 1) {\n            if(this.text_entry_mode === 'latex_entry') {\n                // Disallow characters that are invalid as part of a LaTeX command.\n                // Technically, commands like \\$ should be allowed here, but those are all\n                // accessible by their own keybindings already.  So only alphabetic characters\n                // are allowed in latex entry mode.\n                if(!/^[a-zA-Z]$/.test(key))\n                    return this.error_flash_stack();\n            }\n            this.text_entry = (this.text_entry || '') + key;\n        }\n        return stack;\n    }\n\n    // If new_mode_when_empty is provided, switch to that mode if this\n    // backspace was done while the text field is empty.  This is currently\n    // used to switch back from latex entry mode to normal math entry mode.\n    do_backspace_text_entry(stack, new_mode_when_empty) {\n        let text = this.text_entry || '';\n        if(text.length > 0) {\n            this.text_entry = text.slice(0, -1);\n            this.switch_to_mode(this.mode);\n        }\n        else {\n            // Everything has been deleted; cancel text entry.\n\t    // Note that when cancelling via backspace this way, even if\n\t    // there was a text_entry_edited_item, it's discarded.\n            this.cancel_text_entry(stack);\n            if(new_mode_when_empty) {\n\t\tthis.text_entry = '';\n                this.text_entry_mode = new_mode_when_empty;\n                this.switch_to_mode(new_mode_when_empty);\n            }\n\t    return stack;\n        }\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // textstyle determines what the entered text becomes:\n    //   'math' - ExprItem with plain italic math text\n    //   'roman_math' - ExprItem with \\mathrm{...} text\n    //   'latex' - ExprItem with arbitrary latex command\n    //   'text' - TextItem\n    //   'heading' - TextItem with is_heading flag set\n    do_finish_text_entry(stack, textstyle) {\n        if(this.text_entry === null)\n            return stack;  // shouldn't happen\n        if(this.text_entry.length === 0)\n            return this.cancel_text_entry(stack);\n\n        if(textstyle === 'text' || textstyle === 'heading') {\n            let item = TextItem.from_string_with_placeholders(this.text_entry);\n            if(textstyle === 'heading') item.is_heading = true;\n            this.cancel_text_entry(stack);\n            return stack.push(item);\n        }\n\n        // math or roman_math or latex\n        let new_expr;\n        if(textstyle === 'roman_math') {\n            new_expr = new CommandExpr('mathrm', [\n                new TextExpr(this._latex_escape(this.text_entry))]);\n        }\n        else if(textstyle === 'latex') {\n            // NOTE: do_append_text_entry should only allow alphabetic characters through,\n            // so no real need to do sanitization here any more.\n            \n            // const sanitized = this.text_entry.replaceAll(/[^a-zA-Z]/g, '');\n            // if(sanitized.length === 0) {\n            //     this.text_entry = null;\n            //     this.text_entry_mode = null;\n            //     return stack;\n            // }\n            // new_expr = new CommandExpr(sanitized);\n\n            new_expr = new CommandExpr(this.text_entry);\n        }\n        else\n            new_expr = new TextExpr(this._latex_escape(this.text_entry));\n        this.cancel_text_entry(stack);\n        return stack.push_expr(new_expr);\n    }\n\n    // Start text entry mode using the item on the stack top.\n    // Because the minieditor is so limited, only these cases are allowed:\n    //   - TextItems without anything too \"complicated\" (see TextItem.as_editable_string);\n    //     these will start with the minieditor in text-entry mode.\n    //   - ExprItems that are only a simple CommandExpr with a no-argument LaTeX command;\n    //     in this case the minieditor will start directly in LaTeX-entry mode.\n    //   - ExprItems that represent a simple text string like '123' or 'xyz'.\n    //   - ExprItems that represent \\mathrm{x} where x is a simple string like '123' or 'xyz'\n    //     (this is to allow expressions created via Shift+Enter in the minieditor to be editable).\n    do_edit_item(stack) {\n\tconst [new_stack, item] = stack.pop(1);\n\tif(item.item_type() === 'text') {\n\t    const s = item.as_editable_string();\n\t    if(s) {\n\t\tthis.do_start_text_entry(new_stack, 'text_entry', s);\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\telse if(item.item_type() === 'expr') {\n\t    let expr = item.expr;\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 0) {\n\t\t// LaTeX command with no arguments, e.g. \\circledast\n\t\tthis.do_start_text_entry(new_stack, 'latex_entry', expr.command_name);\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t    // Try stripping off a single level of \\mathrm{...} if there is one.\n\t    if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n\t       expr.command_name === 'mathrm')\n\t\texpr = expr.operand_exprs[0];\n\t    // It's editable only if it's a basic TextExpr that doesn't start with a\n\t    // backslash (so generally, only something that was directly created by\n\t    // the minieditor to begin with).\n\t    if(expr.expr_type() === 'text' && !expr.text.startsWith(\"\\\\\")) {\n\t\tthis.do_start_text_entry(\n\t\t    new_stack,\n\t\t    'math_text_entry',\n\t\t    this._latex_unescape(expr.text));\n\t\tthis.text_entry_edited_item = item;\n\t\treturn new_stack;\n\t    }\n\t}\n\treturn this.error_flash_stack();\n    }\n\n    // TODO: may want to make this a general utility method, but it's only used here so far.\n    _latex_escape(text) {\n        const replacements = {\n            ' ': \"\\\\,\",\n            '_': \"\\\\_\",\n            '^': \"\\\\wedge \",\n            '%': \"\\\\%\",\n            \"'\": \"\\\\rq \",\n            \"`\": \"\\\\lq \",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\sim \",\n            \"\\\\\": \"\\\\backslash \"\n        };\n        return text.replaceAll(/[ _^%'`$&#}{~\\\\]/g, match => replacements[match]);\n    }\n\n    // Inverse of _latex_escape.  This is used by do_edit_item to allow simple TextExprs\n    // to be editable again in the minieditor.\n    _latex_unescape(text) {\n\t// TODO: figure out a better way of handling this so it doesn't repeat\n\t// what's in _latex_escape\n        const replacements = {\n            \"\\\\,\": ' ',\n            \"\\\\_\": '_',\n            \"\\\\wedge \": '^',\n            \"\\\\%\": '%',\n            \"\\\\rq \": \"'\",\n            \"\\\\lq \": \"`\",\n            \"\\\\$\": '$',\n            \"\\\\&\": '&',\n            \"\\\\#\": '#',\n            \"\\\\}\": '}',\n            \"\\\\{\": '{',\n            \"\\\\sim \": '~',\n            \"\\\\backslash \": \"\\\\\"\n        };\n        return text.replaceAll(\n\t    /\\\\,|\\\\_|\\\\wedge |\\\\%|\\\\rq |\\\\lq |\\\\\\$|\\\\&|\\\\#|\\\\\\}|\\\\\\{|\\\\sim |\\\\backslash /g,\n\t    match => replacements[match]);\n    }\n\n    do_toggle_is_heading(stack) {\n        let [new_stack, item] = stack.pop(1);\n        if(item.item_type() === 'expr') {\n            // Implicitly turn ExprItems into TextItems.\n            item = TextItem.from_expr(item.expr);\n        }\n        if(item.item_type() === 'text') {\n\t    // Special case: don't allow empty TextItems to be changed this way.\n\t    // See the comment in TextItem.is_empty().\n\t    if(item.is_empty())\n\t\treturn this.error_flash_stack();\n            item = item.clone();\n            item.is_heading = !item.is_heading;\n            return new_stack.push(item);\n        }\n        else\n            this.error_flash_stack();\n    }\n\n    do_extract_latex_source(stack) {\n        // eslint-disable-next-line no-unused-vars\n\tconst [new_stack, expr] = stack.pop_exprs(1);\n\tconst latex_source = expr.to_text();\n\tconst code_item = new CodeItem('latex', latex_source);\n\treturn stack.push(code_item);\n    }\n\n    // expr_count is the number of items to pop from the stack to put inside the delimiters.\n    // It defaults to 1, but if it's 2 or more, 'middle' is used to separate each item within\n    // the delimiters.\n    do_delimiters(stack, left, right, middle, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...inner_exprs] = stack.pop_exprs(expr_count);\n        const new_expr = new DelimiterExpr(left, right, middle, inner_exprs);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Wrap stack top in parentheses if it's not already in delimiters.\n    do_parenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Special case: \\left. X \\middle| \\right. style delimiters\n        // are treated as a kind of pseudo-infix expression here.\n        // This is to make things like Pr(x | y) work better when | is a\n        // flex-size delimiter.\n        if(expr.expr_type() === 'delimiter' && expr.left_type === '.' &&\n           expr.right_type === '.' && expr.inner_exprs.length > 1)\n            expr = new DelimiterExpr('(', ')', expr.middle_type, expr.inner_exprs);\n        else if(expr.expr_type() !== 'delimiter')\n            expr = DelimiterExpr.parenthesize(expr);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // If expr_count_string is provided, exactly that many expressions from the stack\n    // are autoparenthesized.  If any of them is not actually an ExprItem, nothing is done.\n    do_autoparenthesize(stack, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...items] = stack.pop(expr_count);\n        if(items.every(item => item.item_type() === 'expr'))\n            return new_stack.push_all_exprs(\n                items.map(item => DelimiterExpr.autoparenthesize(item.expr)));\n        else\n            return stack;\n    }\n\n    // Combine command name and arguments from the stack into a CommandExpr.\n    // \\frac x y -> \\frac{x}{y}\n    do_apply_operator(stack, arg_count_string) {\n        const arg_count = parseInt(arg_count_string);\n        const [new_stack, command_expr, ...operand_exprs] = stack.pop_exprs(arg_count+1);\n        if(command_expr.expr_type() === 'command' && command_expr.operand_count() === 0)\n            return new_stack.push_expr(\n                new CommandExpr(command_expr.command_name, operand_exprs));\n        else\n            this.error_flash_stack();\n    }\n\n    // Take (left, right, operator) from the stack and create an InfixExpr.\n    // Special case: if 'operator' is \\mathrm{...}, it's surrounded with \\quad\n    // spacers as in do_conjunction().\n    do_apply_infix(stack) {\n        let [new_stack, left_expr, right_expr, operator_expr] = stack.pop_exprs(3);\n        if(operator_expr.expr_type() === 'command' &&\n           operator_expr.command_name === 'mathrm' &&\n           operator_expr.operand_count() === 1)\n            operator_expr = new SequenceExpr([\n                new CommandExpr('quad'), operator_expr, new CommandExpr('quad')]);\n        const new_expr = new InfixExpr(operator_expr, left_expr, right_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // NOTE: if 'help_location' is given, jump to the given anchor in the help text.\n    do_toggle_popup(stack, mode_string, help_location) {\n        // Hack: Save help panel scroll position so we can restore it next\n        // time the help is displayed.  This isn't very good because browser\n        // window/font resizings will throw it off.  Needs revisiting.\n        // Maybe the help should be its own iframe.\n        if(this.settings.popup_mode === 'help') {\n            const elt = document.getElementById('popup_panel');\n            if(elt && elt.scrollTop)\n                this.settings.help_scroll_top = elt.scrollTop;\n        }\n        this.settings.popup_mode =\n            (this.settings.popup_mode === mode_string) ? null : mode_string;\n        if(this.settings.popup_mode === 'help' && help_location)\n            this.settings.help_scroll_top = help_location;\n        this.settings.save();\n        this.app_component.apply_layout_to_dom();\n    }\n\n    // Set various configuration options.\n    do_config(stack, config_option, value) {\n        let settings = this.settings;\n        let layout = settings.layout;\n        let full_refresh_needed = false;  // set to true if everything needs to be re-rendered afterwards\n        let scratch;\n        switch(config_option) {\n        case 'zoom_factor':\n            scratch = this._get_prefix_argument(1, -1);\n            if(scratch < 0)\n                layout.zoom_factor = 0;\n            else if(value === 'decrease')\n                layout.zoom_factor -= scratch;\n            else\n                layout.zoom_factor += scratch;\n\t    this.notify(\"Zoom level: \" + (layout.zoom_factor > 0 ? \"+\" : \"\") + layout.zoom_factor);\n            break;\n        case 'math_align':\n            if(value === 'toggle_document')\n                layout.document_rightalign_math = !layout.document_rightalign_math;\n            else if(value === 'toggle_stack')\n                layout.stack_rightalign_math = !layout.stack_rightalign_math;\n            break;\n        case 'toggle_inline_math':\n            layout.inline_math = !layout.inline_math;\n            full_refresh_needed = true;\n            break;\n\tcase 'toggle_mode_indicator':\n\t    settings.show_mode_indicator = !settings.show_mode_indicator;\n\t    this.notify(\"Mode indicator \" + (settings.show_mode_indicator ? \"enabled\" : \"disabled\"));\n\t    break;\n        case 'stack_side':\n            layout.stack_side = value;\n            break;\n        case 'stack_split':\n            // prefix argument:\n            //   none:    50% (undocumented)\n            //   0..9:    0% to 90%\n            //   *:       100%\n            //   11..99:  11% to 99% (undocumented)\n            scratch = this._get_prefix_argument(5, 10);\n            if(scratch <= 10) scratch *= 10;\n            if(scratch > 100) scratch = 100;\n            layout.stack_split = scratch;\n            break;\n        case 'theme':\n            scratch = this._get_prefix_argument(1, 1);\n            if(scratch < 1 || scratch > 5) scratch = 1;\n            settings.selected_theme = ['default', 'dawn', 'dusk', 'dark', 'minimal'][scratch-1];\n            break;\n        case 'reset_layout':\n            settings.layout = settings.default_layout();\n            settings.selected_theme = 'default';\n            settings.show_mode_indicator = true;\n            full_refresh_needed = true;\n            break;\n        default:\n            break;\n        }\n        settings.save();\n        this.perform_undo_or_redo = 'suppress';\n        this.app_component.apply_layout_to_dom();\n        this.clear_all_flashes();\n        if(full_refresh_needed) {\n            // All displayed ItemComponents need to be re-rendered.\n            this.new_document = this.app_state.document.clone_all_items();\n            return stack.clone_all_items();\n        }\n    }\n\n    do_fullscreen(stack, on_or_off) {\n        if(on_or_off === 'off')\n            document.exitFullscreen();\n        else\n            document.getElementsByTagName('html')[0].requestFullscreen();\n        this.perform_undo_or_redo = 'suppress';\n        return stack;\n    }\n\n    // item1, item2, ... => [item1, item2, ...]\n    // column_count is optional; if omitted, the prefix argument is used.\n    do_build_matrix_row(stack, matrix_type, column_count) {\n        const expr_count = column_count ?\n\t      parseInt(column_count) :\n\t      this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const matrix_expr = new ArrayExpr(\n            (matrix_type || 'bmatrix'),\n            1, expr_count, [exprs]);\n        return new_stack.push_expr(matrix_expr);\n    }\n\n    // Stack two ArrayExprs on top of each other.\n    // The type of the array on the stack-top takes precedence if there's a conflict.\n    // The two arrays/matrices have to have the same number of columns.\n    do_stack_arrays(stack) {\n        const [new_stack, m1, m2] = stack.pop_arrays(2);\n        const new_array = ArrayExpr.stack_arrays(m1, m2);\n        if(new_array)\n            return new_stack.push_expr(new_array);\n        else\n            return new_stack.type_error();\n    }\n\n    // Split an ArrayExpr into its component rows and put them on the stack.\n    do_split_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        return new_stack.push_all_exprs(array_expr.split_rows());\n    }\n\n    // Take apart an ArrayExpr and put all its elements on the stack (in row-major order).\n    do_dissolve_array(stack) {\n        const [new_stack, array_expr] = stack.pop_arrays(1);\n        let dissolved_exprs = [].concat(...array_expr.element_exprs);\n        return new_stack.push_all_exprs(dissolved_exprs);\n    }\n\n    do_insert_matrix_ellipses(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_ellipses());\n    }\n\n    do_transpose_matrix(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.transposed());\n    }\n\n    // Change a matrix bracket type, e.g. to 'pmatrix'.\n    do_change_matrix_type(stack, new_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_array_type(new_type));\n    }\n\n    // is_row_or_column: 'row', 'column'\n    // separator_type: 'solid' or 'dashed'\n    do_array_separator(stack, is_row_or_column, separator_type) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        const is_column = is_row_or_column === 'column';\n        // NOTE: prefix argument of * indicates the final row or column of the matrix\n        const size = is_column ? matrix_expr.column_count : matrix_expr.row_count;\n        const index = this._get_prefix_argument(1, null);\n        if(index !== null && (index < 1 || index > size-1))\n            return this.error_flash_stack();\n        else\n            return new_stack.push_expr(\n                matrix_expr.with_separator(\n                    is_column,\n                    index === null ? null : index-1,\n                    separator_type, true));\n    }\n\n    do_build_align(stack, align_type) {\n        // NOTE: if align_type = 'cases' or 'rcases', align on ':' infix if there is one, and then remove the infix\n        const expr_count = this._get_prefix_argument(0, stack.depth());\n\tif(expr_count <= 0)\n\t    return this.error_flash_stack();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let split_mode;\n        switch(align_type) {\n        case 'gathered': case 'gather': split_mode = 'none'; break;\n        case 'cases': case 'rcases': split_mode = 'colon'; break;\n        case 'cases_if': split_mode = 'colon_if'; align_type = 'cases'; break;\n        case 'rcases_if': split_mode = 'colon_if'; align_type = 'rcases'; break;\n        default: split_mode = 'infix'; break;\n        }\n        const element_exprs = ArrayExpr.split_elements(exprs, split_mode)\n        const array_expr = new ArrayExpr(\n            align_type, element_exprs.length, element_exprs[0].length, element_exprs);\n        return new_stack.push_expr(array_expr);\n    }\n\n    // item1, item2, ..., N => \"item1, item2, ...\"\n    // Concatenate N items from the stack with separator_text between each one.\n    // 'separator_text' has two special cases:\n    //    'nothing': items are simply concatenated together.\n    //    'product': items are autoparenthesized and then concatenated together (i.e. implicit multiplication)\n    // 'final_separator_text' is used as the next to last item if provided.\n    do_build_list(stack, separator_text, final_separator_text) {\n\tthis._require_prefix_argument(true);\n        const expr_count = this._get_prefix_argument(1, stack.depth());\n        let [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        if(separator_text === 'product')\n            exprs = exprs.map(expr => DelimiterExpr.autoparenthesize(expr));\n        let expr = exprs[0];\n        for(let i = 1; i < expr_count; i++) {\n            const s = (final_separator_text && i === expr_count-1) ? final_separator_text : separator_text;\n            if(!(s === 'nothing' || s === 'product')) {\n                if(s.startsWith(\"\\\\\"))  // TODO: clean up this check\n\t\t    expr = Expr.combine_pair(expr, new CommandExpr(s.slice(1)));\n\t        else\n\t\t    expr = Expr.combine_pair(expr, new TextExpr(s));\n            }\n            expr = Expr.combine_pair(expr, exprs[i]);\n        }\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1,...,x_n] from the stack and build a nested InfixExpr with\n    // the given text between each term as an infix operator.\n    // 'final_separator_text' is used as the next to last item if provided.\n    do_build_infix_list(stack, infix_text, final_separator_text) {\n\tthis._require_prefix_argument(true);\n        const expr_count = this._get_prefix_argument(1, stack.depth());\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        let expr = exprs[expr_count-1];\n\t// TODO: handle these repetitive s.startsWith(\"\\\\\") checks more cleanly\n        const infix_operator_expr = infix_text.startsWith(\"\\\\\") ?\n\t      new CommandExpr(infix_text.slice(1)) : new TextExpr(infix_text);\n        if(final_separator_text && expr_count > 1)\n\t    expr = new InfixExpr(infix_operator_expr,\n\t\t\t\t (final_separator_text.startsWith(\"\\\\\") ?\n\t\t\t\t  new CommandExpr(final_separator_text.slice(1)) :\n\t\t\t\t  new TextExpr(final_separator_text)), expr);\n        for(let i = expr_count-2; i >= 0; i--)\n\t    expr = new InfixExpr(infix_operator_expr, exprs[i], expr);\n        return new_stack.push_expr(expr);\n    }\n\n    // Take [x_1, ..., x_n] from the stack and build a \\substack{...} command.\n    // This \"cheats\" by converting the stacked items to LaTeX and concatenating\n    // with \\\\ so any structure in the stacked items will be lost, same as\n    // do_build_list(), etc.\n    do_build_substack(stack) {\n        const expr_count = this._require_prefix_argument();\n        const [new_stack, ...exprs] = stack.pop_exprs(expr_count);\n        const content = exprs.map(expr => expr.to_latex()).join(\"\\\\\\\\\");\n        const new_expr = new CommandExpr('substack', [new TextExpr(content)]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_apply_tag(stack) {\n        let [new_stack, tagged_item, tag_item] = stack.pop(2);\n        if(tagged_item.item_type() !== 'expr')\n            return stack.type_error();\n        let tag_expr;\n        // if(tag_item.item_type() === 'text')\n        //     tag_expr = new CommandExpr('text', [new TextExpr(tag_item.source_text.trim())]);\n        /*else*/ if(tag_item.item_type() === 'expr')\n            tag_expr = tag_item.expr;\n        else\n            return stack.type_error();\n        return new_stack.push(new ExprItem(tagged_item.expr, tag_expr));\n    }\n\n    // Copy stack top to an internal clipboard slot.\n    // A prefix argument may be given to access other slots but this is currently undocumented\n    // because prefix arguments with stack commands highlight items on the stack which is bad UI.\n    do_copy_to_clipboard(stack) {\n        const [new_stack, item] = stack.pop(1);\n        const slot = this._get_prefix_argument(1, '*');\n        this.app_component.state.clipboard_items[slot] = item;\n        if(slot === 1)\n            this.notify(\"Copied to clipboard\");\n        else\n            this.notify(\"Copied to clipboard slot \" + slot);\n        this.perform_undo_or_redo = 'suppress';\n        return new_stack.push(item);\n    }\n\n    do_paste_from_clipboard(stack) {\n        const slot = this._get_prefix_argument(1, '*');\n        const item = this.app_component.state.clipboard_items[slot];\n        if(item)\n            return stack.push(item.clone());\n        else\n            this.error_flash_stack();\n    }\n\n    // screen_percentage=0 means try to scroll so that the top of the selection is flush with the top of the document panel.\n    // screen_percentage=100 tries to make the bottom of the selection flush with the bottom of the panel.\n    // Anything in between is a linear interpolation between the two.\n    do_recenter_document(stack, screen_percentage_string) {\n        const screen_percentage = parseInt(screen_percentage_string);\n        this.perform_undo_or_redo = 'suppress';\n        \n        // TODO: Accessing the DOM elements directly like this is a hack but there's not an easy\n        // way to get it properly from React here.  May want to restructure things to make this cleaner.\n        let container = document.getElementById('document_container');\n        if(!container) return;\n        const selected_elts = container.getElementsByClassName('selected')\n        if(selected_elts.length === 0) return;\n        const selected_elt = selected_elts[0];\n        const top_scrolltop = selected_elt.offsetTop;\n        const bottom_scrolltop = selected_elt.offsetTop + selected_elt.offsetHeight - container.clientHeight;\n        const ratio = screen_percentage/100;\n        const new_scrolltop = Math.round(top_scrolltop*(1-ratio) + bottom_scrolltop*ratio);\n        container.scrollTop = new_scrolltop;\n    }\n\n    do_scroll(stack, panel_name, direction_string, percentage_string) {\n        let panel_elt = document.getElementById(panel_name);\n        if(!panel_elt) return;\n        const percentage = parseInt(percentage_string || '50') / 100.0;\n        if(direction_string === 'horizontal')\n            panel_elt.scrollLeft += Math.round(panel_elt.clientWidth * percentage)\n        else\n            panel_elt.scrollTop += Math.round(panel_elt.clientHeight * percentage);\n    }\n\n    do_export_document_as_text(stack) {\n        const exported_text = this.app_state.document.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied document to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_export_stack_items_as_text(stack) {\n        const arg = this._get_prefix_argument(1, stack.depth());\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, ...items] = stack.pop(arg);\n        const exported_text = items.map(item => item.to_text()).join(\"\\n\\n\");\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied \" + arg + \" item\" + (arg === 1 ? \"\" : \"s\") + \" to clipboard\");\n        this.perform_undo_or_redo = 'suppress';\n    }\n}\n\n\nexport default InputContext;\n\n","\n\nimport './katex.css';  // Must be imported before App.css\nimport './App.css';\n\nimport React from 'react';\nimport katex from 'katex';\nimport {\n    Settings, AppState, UndoStack, DocumentStorage,\n    ImportExportState, FileManagerState\n} from './Models';\nimport InputContext from './Actions';\n\n\nconst $e = React.createElement;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // NOTE: settings are stored in the localStorage, but documents use indexedDB.\n        // This is mainly because we need the settings before the indexedDB may be ready.\n        let settings = Settings.load_from_local_storage();\n\n        this.state = {\n            app_state: new AppState(),\n            settings: settings,\n            file_manager_state: new FileManagerState(),\n            import_export_state: new ImportExportState(),\n            document_storage: new DocumentStorage(),\n            input_context: new InputContext(this, settings),\n            undo_stack: new UndoStack(),\n            clipboard_items: {}\n        };\n        this.state.undo_stack.clear(this.state.app_state);\n        this.state.import_export_state.document_storage = this.state.document_storage;\n        this.state.import_export_state.onstatechange = () => this.import_export_state_changed();\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n\n        this.state.document_storage.open_database(this.on_open_database.bind(this));\n    }\n\n    // Database has been opened; request the list of documents, and try to load the last-opened file.\n    on_open_database() {\n        this.request_file_list();\n        if(this.state.settings.last_opened_filename)\n            this.start_loading_filename(this.state.settings.last_opened_filename);\n        else {\n            let file_manager_state = this.state.file_manager_state;\n            let settings = this.state.settings;\n            const filename = 'untitled';\n            file_manager_state.current_filename = file_manager_state.selected_filename = filename;\n            settings.last_opened_filename = filename;\n            settings.save();\n        }\n    }\n\n    file_manager_state_changed() {\n        this.setState({file_manager_state: this.state.file_manager_state});\n    }\n\n    import_export_state_changed() {\n        const import_export_state = this.state.import_export_state;\n        this.setState({import_export_state: import_export_state});\n        if(import_export_state.file_list_needs_update) {\n            import_export_state.file_list_needs_update = false;\n            this.request_file_list();\n        }\n    }\n\n    // Start loading the current list of documents from the IndexedDB database.\n    request_file_list() {\n        this.state.document_storage.fetch_file_list(\n            this.file_list_request_finished.bind(this),\n            this.file_list_request_error.bind(this));\n    }\n\n    file_list_request_finished(file_list) {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = false;\n        file_manager_state.file_list = file_list;\n        file_manager_state.sort_file_list('filename', true);\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    file_list_request_error() {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = true;\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    start_loading_filename(filename) {\n        this.state.document_storage.load_state(\n            filename,\n            this.file_load_finished.bind(this),\n            this.file_load_error.bind(this));\n    }\n\n    file_load_finished(filename, new_app_state) {\n        const file_manager_state = this.state.file_manager_state;\n        const settings = this.state.settings;\n        file_manager_state.selected_filename = file_manager_state.current_filename = filename;\n        settings.last_opened_filename = filename;\n        settings.save();\n        this.setState({app_state: new_app_state, file_manager_state: file_manager_state});\n        this.state.undo_stack.clear(new_app_state);\n        this.state.input_context.notify('Loaded: ' + filename);\n    }\n\n    // TODO: It's not necessarily an error if the file doesn't exist,\n    // but we should make sure to clear stack/document in that case\n    // (same as do_start_new_file).\n    file_load_error(filename, error) {\n        //alert(\"Unable to load file \\\"\" + filename + \"\\\".\");\n    }\n\n    componentDidMount() {\n        this.apply_layout_to_dom();\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        window.addEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.addEventListener('pageshow', this.handleVisibilityChange);\n//      window.addEventListener('focus', this.handleVisibilityChange);\n        this.request_file_list();\n    }\n\n    apply_layout_to_dom() {\n        if(this.stack_panel_ref.current && this.document_panel_ref.current &&\n           this.popup_panel_ref.current) {\n            this.state.settings.apply_layout_to_dom(\n                this.stack_panel_ref.current, this.document_panel_ref.current,\n                this.popup_panel_ref.current);\n        }\n    }\n\n    componentDidUpdate() {\n        // Show the currently opened file in the browser's document title.\n        const filename = this.state.file_manager_state.current_filename;\n        const program_name = 'rpnlatex';\n        const new_title = filename ? (program_name + ' - ' + filename) : program_name;\n        if(new_title !== document.title)\n            document.title = new_title;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.removeEventListener('pageshow', this.handleVisibilityChange);\n//      window.removeEventListener('focus', this.handleVisibilityChange);\n    }\n\n    render() {\n\tconst app_state = this.state.app_state;\n\tconst settings = this.state.settings;\n\tconst input_context = this.state.input_context;\n\n        this.stack_panel_ref = React.createRef();\n        this.document_panel_ref = React.createRef();\n        this.popup_panel_ref = React.createRef();\n\n\tlet stack_panel_components = [\n\t    $e(StackItemsComponent, {\n                settings: settings,\n                stack: app_state.stack,\n                input_context: input_context\n            })];\n\tif(settings.show_mode_indicator || input_context.notification_text)\n\t    stack_panel_components.push(\n\t\t$e(ModeIndicatorComponent, {\n\t\t    app_state: app_state,\n\t\t    input_context: input_context\n\t\t}));\n\n        return $e(\n            'div', {id: 'panel_layout', className: 'theme_' + settings.selected_theme},\n            $e('div', {className: 'panel stack_panel', id: 'stack_panel', ref: this.stack_panel_ref},\n\t       ...stack_panel_components),\n            $e('div', {className: 'panel document_panel', id: 'document_panel', ref: this.document_panel_ref},\n               $e('div', {id: 'document_container'},\n                  $e(DocumentComponent, {\n                      settings: settings,\n                      document: app_state.document,\n                      filename: this.state.file_manager_state.current_filename,\n                      is_dirty: app_state.is_dirty  /* TODO: revisit, maybe remove this */\n                  }))),\n            $e(PopupPanelComponent, {\n                settings: settings,\n                popup_panel_ref: this.popup_panel_ref,\n                import_export_state: this.state.import_export_state,\n                document_storage: this.state.document_storage,\n                file_manager_state: this.state.file_manager_state\n            }));\n    }\n\n    handleKeyDown(event) {\n        // No Alt/Meta key combinations are handled.\n        if(event.altKey || event.metaKey)\n            return;\n        const key = this._keyname_from_event(event);\n        if(key === 'Meta' || key === 'Ctrl+Control')\n            return;\n        \n        let app_state = this.state.app_state;\n        let [was_handled, new_app_state] = this.state.input_context.handle_key(app_state, key);\n        if(was_handled) {\n            event.preventDefault();\n            // TODO: event.stopPropagation();\n            const scratch = this.manage_undo_state(new_app_state);\n            if(scratch)\n                new_app_state = scratch;\n            else   // undo/redo \"failed\"\n                this.state.input_context.error_flash_stack();\n\n            let state_updates = {app_state: new_app_state};\n            if(this.state.input_context.files_changed) {\n                this.request_file_list();\n                state_updates.file_manager_state = this.state.file_manager_state;  // TODO: revisit\n            }\n            this.setState(state_updates);\n        }\n    }\n\n    _keyname_from_event(event) {\n        let key = event.key;\n\n        if((key.startsWith('Arrow') || key === 'Enter' || key === 'Backspace') && event.shiftKey)\n            key = 'Shift+' + key;\n        if(event.ctrlKey)\n            key = 'Ctrl+' + key;\n\n        // NOTE: none of the Alt stuff works on Firefox for some reason.  Chromium seems ok.\n        // if(event.metaKey || event.altKey || event.getModifierState('Alt') || event.getModifierState('Meta'))\n        //     key = 'Alt+' + key;\n\n        return key;\n    }\n\n    // Auto-save when window is being closed.\n    handleBeforeUnload(event) {\n        const filename = this.state.file_manager_state.current_filename;\n        if(filename)\n            this.state.document_storage.save_state(this.state.app_state, filename);\n        return null;\n    }\n\n    // On iOS Safari, this event is triggered when resuming the tab.\n    // When this happens, the scroll positions are reset, but a re-render takes care of that\n    // via DocumentComponent.ensure_selection_visible().\n    handleVisibilityChange(event) {\n        this.setState({});  // force React to re-render\n    }\n\n    // Returns 'new' new_app_state.\n    manage_undo_state(new_app_state) {\n        let undo_stack = this.state.undo_stack;\n        switch(this.state.input_context.perform_undo_or_redo) {\n        case 'undo': return undo_stack.undo_state();\n        case 'redo': return undo_stack.redo_state();\n        case 'suppress': return new_app_state;  // Normal action, but don't remember undo state.\n        case 'clear':\n            undo_stack.clear(new_app_state);\n            return new_app_state;\n        default:\n            // Normal action; save undo state\n            undo_stack.push_state(new_app_state);\n            return new_app_state;\n        }\n    }\n}\n\n\n// Shows current input mode in top-right corner of stack display\nclass ModeIndicatorComponent extends React.Component {\n    render() {\n        const input_context = this.props.input_context;\n        let indicator_item = undefined;\n        const notification_text = input_context.notification_text;\n        let input_mode = input_context.mode;\n        if(input_context.prefix_argument !== null) {\n            // Show current prefix argument in mode indicator\n            input_mode = [\n                input_mode, '(',\n                (input_context.prefix_argument < 0 ? '*' : input_context.prefix_argument.toString()),\n                ')'\n            ].join('');\n        }\n        // if(input_context.text_entry !== null)\n        //     input_mode = 'text_entry';\n        if(notification_text) {\n            // Auto-highlight anything after the colon in the notification message.\n            const colon = notification_text.indexOf(':');\n            if(colon >= 0)\n                indicator_item = $e(\n                    'span', {className: 'notification'},\n                    $e('span', {}, notification_text.slice(0, colon+1)),\n                    $e('span', {className: 'highlighted'}, notification_text.slice(colon+1)));\n            else\n                indicator_item = $e('span', {className: 'notification'}, notification_text);\n        }\n        else if(input_mode !== 'base')\n            indicator_item = $e(\n                'span', {className: 'mode'},\n                input_mode.replaceAll('_', ' '));\n        return $e('div', {className: 'indicator'}, indicator_item);\n    }\n}\n\n\nclass StackItemsComponent extends React.Component {\n    render() {\n        let input_context = this.props.input_context;\n        const item_components = this.props.stack.items.map((item, index) => {\n            // If there's an active prefix argument for stack commands, highlight the stack items that\n            // will be affected.\n            const selected = (\n                input_context.mode === 'stack' &&\n                    (input_context.prefix_argument < 0 ||\n                     this.props.stack.items.length-index <= input_context.prefix_argument));\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: React.createRef(),\n                    key: item.react_key(index)\n                });\n        });\n        if(input_context.text_entry !== null) {\n            const component = $e(\n                TextEntryComponent, {\n                    text: input_context.text_entry,\n                    entry_type: input_context.text_entry_mode,\n                    key: 'textentry'\n                });\n            item_components.push(component);\n        }\n        let class_names = ['stack_items'];\n        if(this.props.settings.layout.stack_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')}, item_components);\n    }\n}\n\n\nclass DocumentComponent extends React.Component {\n    render() {\n        const document = this.props.document;\n        const subcomponents = document.items.map((item, index) => {\n            let item_ref = React.createRef();\n            const is_selected = document.selection_index === index+1;\n            if(is_selected) this.selected_item_ref = item_ref;\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: is_selected,\n                    inline_math: this.props.settings.layout.inline_math,\n                    item_ref: item_ref,\n                    key: item.react_key(index)\n                });\n        });\n\n        // \"Spacer\" after the last document item.  This enables the document view to scroll\n        // a little past the end so that we don't force the last document item to be flush\n        // against the bottom of the screen.\n        subcomponents.push(\n            $e('div', {className: 'bottom_spacer', key: 'bottom_spacer'}));\n\n        // Top of document \"spacer\", which is used to indicate that items are to be\n        // inserted at the top of the document.  Unlike the bottom spacer, the top\n        // spacer can be the current document selection.\n        const top_is_selected = document.selection_index === 0;\n        if(top_is_selected)\n            this.selected_item_ref = React.createRef();\n        const top_spacer = $e(\n            'div', {\n                className: 'top_spacer' + (top_is_selected ? ' selected' : ''),\n                key: 'top_spacer',\n                ref: top_is_selected ? this.selected_item_ref : null\n            });\n        \n        let class_names = ['document_items'];\n        if(this.props.settings.layout.document_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')},\n                  [top_spacer].concat(subcomponents));\n    }\n\n    componentDidUpdate() {\n        this.ensure_selection_visible();\n    }\n\n    ensure_selection_visible() {\n        if(!this.selected_item_ref) return;\n        const item = this.selected_item_ref.current;\n        if(!item) return;\n        let container = document.getElementById('document_container');\n        const extra_space = item.offsetHeight/2;\n        if(item.offsetTop < container.scrollTop)\n            container.scrollTop = item.offsetTop - extra_space;\n        if(item.offsetTop + item.offsetHeight > container.scrollTop + container.offsetHeight)\n            container.scrollTop = item.offsetTop + item.offsetHeight - container.offsetHeight + extra_space;\n    }\n}\n\n\n// Accumulate a single line of text for literal or Latex command entry\n// (backslash key activates this).\nclass TextEntryComponent extends React.Component {\n    render() {\n        const class_name = 'text_entry ' + this.props.entry_type + '_mode';\n        return $e('div', {className: class_name}, this.props.text);\n    }\n}\n\n\nclass FileManagerComponent extends React.Component {\n    render() {\n        const show_import_export = !this.props.file_manager_state.unavailable;\n        this.file_input_ref = React.createRef();\n        return $e(\n            'div', {className: 'file_header', id: 'files_panel'},\n            $e('h2', {}, 'File Manager'),\n            this.render_current_filename(),\n            this.render_file_table(),\n            this.render_shortcuts(),\n            show_import_export && $e('h2', {}, 'Export/Import'),\n            show_import_export && this.render_export_import_section()\n        );\n    }\n\n    render_export_import_section() {\n        const import_export_state = this.props.import_export_state;\n        let subcomponents = [];\n\n        subcomponents.push(\n            $e('p', {}, 'This section lets you download the internal browser document storage as a .zip file, or restore the internal storage from a previously downloaded export.'));\n\n        subcomponents.push(\n            $e('p', {},\n               $e('strong', {}, import_export_state.textual_state())));\n\n        if(import_export_state.state === 'idle')\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {\n                       href: '#',\n                       onClick: this.start_exporting.bind(this)\n                   }, 'Prepare Export')));\n        if(import_export_state.download_available()) {\n            const export_filename = import_export_state.generate_download_filename();\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {href: import_export_state.download_url, download: export_filename},\n                      'Download: ' + export_filename)));\n        }\n\n        // Show file upload element if ready to accept uploads.\n        if(import_export_state.state === 'idle') {\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {}, 'Import Zip File: '),\n                   $e('input', {\n                       type: 'file',\n                       ref: this.file_input_ref\n                   }),\n                   $e('input', {\n                       type: 'button',\n                       value: 'Upload',\n                       onClick: this.handle_file_upload.bind(this)\n                   })));\n        }\n\n        // Show import results when import finished.\n        if(import_export_state.state === 'idle' && import_export_state.import_result_string)\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {style: {fontWeight: 'bold'}}, 'Import result: '),\n                   $e('span', {}, import_export_state.import_result_string)));\n        \n        return $e('div', {}, ...subcomponents);\n    }\n\n    render_current_filename() {\n        const current_filename = this.props.file_manager_state.current_filename;\n        if(!current_filename) return null;\n        return $e(\n            'div', {className: 'current_file'},\n            $e('label', {}, 'Current file:'),\n            $e('span', {className: 'filename'}, current_filename));\n    }\n\n    render_file_table() {\n        const file_manager_state = this.props.file_manager_state;\n        if(file_manager_state.unavailable)\n            return $e('p', {}, 'IndexedDB support unavailable in your browser.  You will be unable to save or load documents.  Note that Firefox disables IndexedDB when in Private Browsing mode.');\n        else if(file_manager_state.file_list && file_manager_state.file_list.length > 0) {\n            return $e(\n                'div', {},\n                $e('table', {className: 'file_table'},\n                   $e('thead', {},\n                      $e('tr', {},\n                         $e('th', {className: 'filename'}, 'Filename'),\n                         $e('th', {className: 'filesize', colSpan: '2'}, 'Size'),\n                         $e('th', {className: 'timestamp', colSpan: '2'}, 'Last Modified'))),\n                   $e('tbody', {},\n                      file_manager_state.file_list.map(\n                          (file, index) => this._render_file_list_row(file, index)))));\n        }\n        else if(file_manager_state.file_list)\n            return $e('p', {}, 'No files created yet.');\n        else\n            return $e('p', {}, 'Fetching file list...');\n    }\n\n    _render_file_list_row(file, index) {\n        const file_manager_state = this.props.file_manager_state;\n        let class_names = [];\n        if(file.filename === file_manager_state.selected_filename) class_names.push('selected_file');\n        if(file.filename === file_manager_state.current_filename) class_names.push('current_file');\n        const item_count = file.document_item_count + file.stack_item_count;\n        return $e(\n            'tr', {className: class_names.join(' '), key: 'file_' + file.filename},\n            $e('td', {className: 'filename'}, file.filename),\n            $e('td', {className: 'filesize'},\n               Math.floor((file.filesize+1023)/1024) + ' kb'),\n            $e('td', {className: 'filesize'},\n               item_count + ' object' + (item_count === 1 ? '' : 's')),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleDateString()),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleTimeString()));\n    }\n\n    render_shortcuts() {\n        const help_specs = [\n            ['Escape', 'Close file manager'],\n            ['Arrows', 'Select next/previous file'],\n            ['Enter', 'Open selected file'],\n            ['d', 'Delete selected file'],\n            ['n', 'Start a new empty file'],\n            ['s', 'Save current file'], // + (current_filename ? (' (' + current_filename + ')') : '')],\n            ['S', 'Save as...']\n        ];\n        const keyhelp_elements = help_specs.map(spec => {\n            const [keyname, helptext] = spec;\n            return $e(\n                'li', {},\n                $e('span', {className: 'keybinding'}, keyname),\n                $e('span', {}, ' ' + helptext));\n        });\n        return $e('ul', {className: 'keybindings'}, ...keyhelp_elements);\n    }\n\n    handle_file_upload(event) {\n        const file_input_elt = this.file_input_ref.current;\n        if(!file_input_elt) return;\n        const file_list = file_input_elt.files;\n        if(file_list.length === 1)\n            this.start_importing(file_list[0]);\n        else if(file_list.length > 1)\n            alert('Please select a single .zip file to import.');\n        else\n            alert('Please select a .zip file to import.');\n    }\n\n    start_importing(file) {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_importing(file);\n    }\n\n    start_exporting() {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_exporting();\n    }\n}\n\n\n// Displays an Item instance in any context (stack/document).\n// Props: {item: Item, selected: Bool}\nclass ItemComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        let ref = this.props.item_ref;\n        let className = this.props.selected ? 'selected ' : '';\n        if(item.item_type() === 'text' && item.is_heading)\n            className = 'heading_style ' + className;\n        switch(item.item_type()) {\n        case 'expr':\n            if(item.tag_expr) {\n                this.tag_ref = React.createRef();\n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: 'tag_expr', ref: this.tag_ref}, ''),\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n            }\n            else \n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n        case 'text':\n\t    if(item.is_empty()) {\n\t\t// Empty TextItems are rendered as separator lines as a special case.\n\t\treturn $e(\n                    'div', {className: className + 'separator_item'},\n                    $e('hr'));\n\t    }\n\t    else {\n\t\t// TODO: The CSS/markup for heading texts is a little hacky\n\t\treturn $e(\n                    'div', {className: 'text_item'},\n                    $e('div', {className: className + 'latex_fragment'},\n                       $e('div', {className: 'latex_fragment_inner', ref: ref}, '')));\n\t    }\n\tcase 'code':\n\t    // NOTE: only LaTeX source code snippets currently implemented.\n\t    return $e(\n\t\t'div', {className: 'latex_source_item'},\n\t\t$e('div', {className: 'latex_source'}, item.source));\n        default:\n            return $e('div', {}, '????');\n        }\n    }\n\n    componentDidMount() {\n        const item = this.props.item;\n        const node = this.props.item_ref.current;\n        if(!node) return;  // shouldn't happen\n        if(item.item_type() === 'expr') {\n            // Render math with KaTeX\n            this._render_with_katex(item.expr.to_latex(), node, !this.props.inline_math);\n            if(item.tag_expr && this.tag_ref.current)\n                this._render_with_katex(item.tag_expr.to_latex(), this.tag_ref.current, false);\n        }\n        else if(item.item_type() === 'text') {\n            // TextItems are always rendered in inline mode.\n            // Note that this means that text items will always be left-aligned regardless\n            // of the rightalign_math layout settings.\n            this._render_with_katex(item.to_latex(), node, false);\n        }\n    }\n\n    _render_with_katex(latex_code, node, display_mode) {\n        if(latex_code === '' || latex_code === \"\\\\,\") {\n            // Empty/blank latex expression - fake it with something so that it's visible.\n            latex_code = \"\\\\text{(blank)}\";\n        }\n        try {\n            // NOTE: trust: true here allows the use of \\htmlClass etc.\n            katex.render(latex_code, node, {\n\t\tthrowOnError: false,\n\t\tdisplayMode: display_mode,\n\t\tfleqn: true,\n\t\ttrust: true,\n\t\tminRuleThickness: 0.06  // 0.04 default is too thin (but unfortunately this makes the sqrt bars too thick too)\n\t    });\n        }\n        catch(e) {\n            // KaTeX throws actual errors for some inputs, even if throwOnError is false.\n            // Example: \\texttt{\\textbf{test}}\n            const msg = e.toString();\n            node.innerHTML = '<div style=\"color:red;\">' + msg + '</div>';\n        }\n    }\n}\n\n\nclass PopupPanelComponent extends React.Component {\n    render() {\n        this.refs = {\n            help: React.createRef(),\n            help_content: React.createRef()\n        };\n        const popup_mode = this.props.settings.popup_mode;\n        let subcomponent = null;\n        if(popup_mode === 'files') {\n            subcomponent = $e(\n                'div', {id: 'files_container'},\n                $e(FileManagerComponent, {\n                    import_export_state: this.props.import_export_state,\n                    document_storage: this.props.document_storage,\n                    file_manager_state: this.props.file_manager_state\n                }));\n        }\n        return $e(\n            'div', {id: 'popup_panel', ref: this.props.popup_panel_ref},\n            subcomponent,\n            $e('div', {id: 'help_container', ref: this.refs.help},\n               $e('div', {className: 'help', ref: this.refs.help_content})));\n    }\n\n    componentDidMount() {\n        const help_source_elt = document.getElementById('helptext');\n        const help_dest_elt = this.refs.help_content.current;\n        if(help_source_elt) {\n            help_source_elt.style.display = 'block';\n            this._render_help_latex(help_source_elt);\n            help_source_elt.parentNode.removeChild(help_source_elt);\n            help_dest_elt.appendChild(help_source_elt);\n        }\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.settings.popup_mode;\n        if(this.refs.help.current)\n            this.refs.help.current.style.display = (mode === 'help' ? 'block' : 'none');\n        if(mode === 'help' &&\n           this.props.settings.help_scroll_top !== undefined &&\n           this.props.popup_panel_ref.current) {\n            if(typeof(this.props.settings.help_scroll_top) === 'string') {\n                // Jump to a specified anchor in the help text.\n                window.location.hash = '#' + this.props.settings.help_scroll_top;\n            }\n            else {\n                // Restore helptext scroll position previously saved by 'do_toggle_popup'.\n                this.props.popup_panel_ref.current.scrollTop = this.props.settings.help_scroll_top;\n            }\n            this.props.settings.help_scroll_top = undefined;\n        }\n    }\n\n    // Render any <code>...</code> spans in the help text with KaTeX.\n    _render_help_latex(help_elt) {\n        const children = help_elt.getElementsByTagName('code');\n        for(let i = 0; i < children.length; i++) {\n            let code_elt = children[i];\n            const latex_code = code_elt.textContent;\n            if(latex_code)\n                katex.render(latex_code, code_elt,\n                             { throwOnError: false, displayMode: false, trust: true });\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}